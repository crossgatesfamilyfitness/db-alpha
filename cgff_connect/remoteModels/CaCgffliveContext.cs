using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace cgff_connect.remoteModels;

public partial class CaCgffliveContext : DbContext
{
    public CaCgffliveContext()
    {
    }

    public CaCgffliveContext(DbContextOptions<CaCgffliveContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Access> Accesses { get; set; }

    public virtual DbSet<AccgroupEntity> AccgroupEntities { get; set; }

    public virtual DbSet<AccountAgingAggregate> AccountAgingAggregates { get; set; }

    public virtual DbSet<AccountingGroup> AccountingGroups { get; set; }

    public virtual DbSet<AccountingGroupItem> AccountingGroupItems { get; set; }

    public virtual DbSet<AclResource> AclResources { get; set; }

    public virtual DbSet<AclRole> AclRoles { get; set; }

    public virtual DbSet<AclRule> AclRules { get; set; }

    public virtual DbSet<AddonDiscount> AddonDiscounts { get; set; }

    public virtual DbSet<AddonResource> AddonResources { get; set; }

    public virtual DbSet<AddonResourceLocation> AddonResourceLocations { get; set; }

    public virtual DbSet<AddonResourceNote> AddonResourceNotes { get; set; }

    public virtual DbSet<AddonResourceType> AddonResourceTypes { get; set; }

    public virtual DbSet<AddonResourceTypeFee> AddonResourceTypeFees { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AdvancedRating> AdvancedRatings { get; set; }

    public virtual DbSet<AdvancedRatingItem> AdvancedRatingItems { get; set; }

    public virtual DbSet<AdventurecentralStaffField> AdventurecentralStaffFields { get; set; }

    public virtual DbSet<AgilysysInterface> AgilysysInterfaces { get; set; }

    public virtual DbSet<AgilysysPosItem> AgilysysPosItems { get; set; }

    public virtual DbSet<Announcement> Announcements { get; set; }

    public virtual DbSet<AnnouncementEntity> AnnouncementEntities { get; set; }

    public virtual DbSet<ApiMenuDetail> ApiMenuDetails { get; set; }

    public virtual DbSet<ApiSetting> ApiSettings { get; set; }

    public virtual DbSet<AppIntegration> AppIntegrations { get; set; }

    public virtual DbSet<AppIntegrationIcon> AppIntegrationIcons { get; set; }

    public virtual DbSet<AppIntegrationUserGroup> AppIntegrationUserGroups { get; set; }

    public virtual DbSet<AppIntegrationUserHomeClub> AppIntegrationUserHomeClubs { get; set; }

    public virtual DbSet<AppPalette> AppPalettes { get; set; }

    public virtual DbSet<AppTransferNotification> AppTransferNotifications { get; set; }

    public virtual DbSet<AppTransferSetting> AppTransferSettings { get; set; }

    public virtual DbSet<AppleWalletAuth> AppleWalletAuths { get; set; }

    public virtual DbSet<AppleWalletLog> AppleWalletLogs { get; set; }

    public virtual DbSet<AppleWalletRegistration> AppleWalletRegistrations { get; set; }

    public virtual DbSet<ApprovedList> ApprovedLists { get; set; }

    public virtual DbSet<AsyncTaskCollection> AsyncTaskCollections { get; set; }

    public virtual DbSet<AsynchronousTask> AsynchronousTasks { get; set; }

    public virtual DbSet<Attendance> Attendances { get; set; }

    public virtual DbSet<BamboraBatchTransaction> BamboraBatchTransactions { get; set; }

    public virtual DbSet<BankAccountNoc> BankAccountNocs { get; set; }

    public virtual DbSet<BaseballStaffField> BaseballStaffFields { get; set; }

    public virtual DbSet<BasketballStaffField> BasketballStaffFields { get; set; }

    public virtual DbSet<Batch> Batches { get; set; }

    public virtual DbSet<BillingGroup> BillingGroups { get; set; }

    public virtual DbSet<BillingGroupMembership> BillingGroupMemberships { get; set; }

    public virtual DbSet<BlockedCreditCard> BlockedCreditCards { get; set; }

    public virtual DbSet<BlockedCreditCardDeclinedSubmissionLog> BlockedCreditCardDeclinedSubmissionLogs { get; set; }

    public virtual DbSet<BookerCustomField> BookerCustomFields { get; set; }

    public virtual DbSet<BookerFailedOrder> BookerFailedOrders { get; set; }

    public virtual DbSet<BookerSetting> BookerSettings { get; set; }

    public virtual DbSet<BookerUser> BookerUsers { get; set; }

    public virtual DbSet<BowlingStaffField> BowlingStaffFields { get; set; }

    public virtual DbSet<BrivoCardFormat> BrivoCardFormats { get; set; }

    public virtual DbSet<BrivoGroup> BrivoGroups { get; set; }

    public virtual DbSet<Bundle> Bundles { get; set; }

    public virtual DbSet<BundleAddon> BundleAddons { get; set; }

    public virtual DbSet<BundleMembership> BundleMemberships { get; set; }

    public virtual DbSet<BundlePackage> BundlePackages { get; set; }

    public virtual DbSet<CaDashboard> CaDashboards { get; set; }

    public virtual DbSet<CaDashboardItem> CaDashboardItems { get; set; }

    public virtual DbSet<CaMenu> CaMenus { get; set; }

    public virtual DbSet<CaMenuItem> CaMenuItems { get; set; }

    public virtual DbSet<CaMenuItemPermission> CaMenuItemPermissions { get; set; }

    public virtual DbSet<CaacDoor> CaacDoors { get; set; }

    public virtual DbSet<CaacSetting> CaacSettings { get; set; }

    public virtual DbSet<CaacUser> CaacUsers { get; set; }

    public virtual DbSet<Calendar> Calendars { get; set; }

    public virtual DbSet<CardconnectBatchTransaction> CardconnectBatchTransactions { get; set; }

    public virtual DbSet<CashflowInfrastructureRate> CashflowInfrastructureRates { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CcTransaction> CcTransactions { get; set; }

    public virtual DbSet<CcType> CcTypes { get; set; }

    public virtual DbSet<Charge> Charges { get; set; }

    public virtual DbSet<ChargeDeposit> ChargeDeposits { get; set; }

    public virtual DbSet<ChargeDiscount> ChargeDiscounts { get; set; }

    public virtual DbSet<ChargePaymentPending> ChargePaymentPendings { get; set; }

    public virtual DbSet<Check> Checks { get; set; }

    public virtual DbSet<Checkin> Checkins { get; set; }

    public virtual DbSet<CheckinError> CheckinErrors { get; set; }

    public virtual DbSet<CheckinLocation> CheckinLocations { get; set; }

    public virtual DbSet<CheckinRule> CheckinRules { get; set; }

    public virtual DbSet<CheckinUserRule> CheckinUserRules { get; set; }

    public virtual DbSet<ChildcareBillingRule> ChildcareBillingRules { get; set; }

    public virtual DbSet<ChildcareBillingRuleGroup> ChildcareBillingRuleGroups { get; set; }

    public virtual DbSet<ChildcareBillingRulePrice> ChildcareBillingRulePrices { get; set; }

    public virtual DbSet<ChildcareGuardianLocation> ChildcareGuardianLocations { get; set; }

    public virtual DbSet<ChildcareReservationRule> ChildcareReservationRules { get; set; }

    public virtual DbSet<ChildcareReservationRuleGroup> ChildcareReservationRuleGroups { get; set; }

    public virtual DbSet<ChildcareResource> ChildcareResources { get; set; }

    public virtual DbSet<ChildcareSchedule> ChildcareSchedules { get; set; }

    public virtual DbSet<ClimbingStaffField> ClimbingStaffFields { get; set; }

    public virtual DbSet<CloverStation> CloverStations { get; set; }

    public virtual DbSet<Club> Clubs { get; set; }

    public virtual DbSet<ClubAccountShift4> ClubAccountShift4s { get; set; }

    public virtual DbSet<ClubGatewayInformation> ClubGatewayInformations { get; set; }

    public virtual DbSet<ComplimentaryRoundCategory> ComplimentaryRoundCategories { get; set; }

    public virtual DbSet<Component> Components { get; set; }

    public virtual DbSet<ComponentClub> ComponentClubs { get; set; }

    public virtual DbSet<ComponentClubPrivilege> ComponentClubPrivileges { get; set; }

    public virtual DbSet<ComponentEntity> ComponentEntities { get; set; }

    public virtual DbSet<ComponentResource> ComponentResources { get; set; }

    public virtual DbSet<ComponentSetting> ComponentSettings { get; set; }

    public virtual DbSet<Config> Configs { get; set; }

    public virtual DbSet<ContactUsEmailConfig> ContactUsEmailConfigs { get; set; }

    public virtual DbSet<ContactUsSubject> ContactUsSubjects { get; set; }

    public virtual DbSet<Content> Contents { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<ContractContainer> ContractContainers { get; set; }

    public virtual DbSet<ContractContainerTerm> ContractContainerTerms { get; set; }

    public virtual DbSet<ContractTerm> ContractTerms { get; set; }

    public virtual DbSet<ContractTermsBlock> ContractTermsBlocks { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CourtLocation> CourtLocations { get; set; }

    public virtual DbSet<CourtLocationComponent> CourtLocationComponents { get; set; }

    public virtual DbSet<CourtLocationType> CourtLocationTypes { get; set; }

    public virtual DbSet<CourtSale> CourtSales { get; set; }

    public virtual DbSet<CourtType> CourtTypes { get; set; }

    public virtual DbSet<CreditCardDeclineCode> CreditCardDeclineCodes { get; set; }

    public virtual DbSet<CreditCardGatewayLog> CreditCardGatewayLogs { get; set; }

    public virtual DbSet<CronScript> CronScripts { get; set; }

    public virtual DbSet<CronScriptsSchedule> CronScriptsSchedules { get; set; }

    public virtual DbSet<CrossfitStaffField> CrossfitStaffFields { get; set; }

    public virtual DbSet<CryotherapyStaffField> CryotherapyStaffFields { get; set; }

    public virtual DbSet<DanceStaffField> DanceStaffFields { get; set; }

    public virtual DbSet<DayspaStaffField> DayspaStaffFields { get; set; }

    public virtual DbSet<DcsEmailRecord> DcsEmailRecords { get; set; }

    public virtual DbSet<DeclineFee> DeclineFees { get; set; }

    public virtual DbSet<DefaultStaffRate> DefaultStaffRates { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Dict> Dicts { get; set; }

    public virtual DbSet<Discount> Discounts { get; set; }

    public virtual DbSet<DiscountCode> DiscountCodes { get; set; }

    public virtual DbSet<DiscountCodeDetail> DiscountCodeDetails { get; set; }

    public virtual DbSet<DiscountCodeDetailGroup> DiscountCodeDetailGroups { get; set; }

    public virtual DbSet<DiscountCodeUsage> DiscountCodeUsages { get; set; }

    public virtual DbSet<DiscountCodeUsageDetail> DiscountCodeUsageDetails { get; set; }

    public virtual DbSet<EftPendingTotal> EftPendingTotals { get; set; }

    public virtual DbSet<EndOfDay> EndOfDays { get; set; }

    public virtual DbSet<EquipmentCategory> EquipmentCategories { get; set; }

    public virtual DbSet<EquipmentCheckin> EquipmentCheckins { get; set; }

    public virtual DbSet<EquipmentItem> EquipmentItems { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventCalendar> EventCalendars { get; set; }

    public virtual DbSet<EventCloneHistory> EventCloneHistories { get; set; }

    public virtual DbSet<EventCustomDate> EventCustomDates { get; set; }

    public virtual DbSet<EventCustomFee> EventCustomFees { get; set; }

    public virtual DbSet<EventCustomParam> EventCustomParams { get; set; }

    public virtual DbSet<EventCustomRegistrationField> EventCustomRegistrationFields { get; set; }

    public virtual DbSet<EventDirector> EventDirectors { get; set; }

    public virtual DbSet<EventDiscountGroupsDay> EventDiscountGroupsDays { get; set; }

    public virtual DbSet<EventGroup> EventGroups { get; set; }

    public virtual DbSet<EventPrice> EventPrices { get; set; }

    public virtual DbSet<EventPro> EventPros { get; set; }

    public virtual DbSet<EventType> EventTypes { get; set; }

    public virtual DbSet<EventTypeColor> EventTypeColors { get; set; }

    public virtual DbSet<ExternalPosLocation> ExternalPosLocations { get; set; }

    public virtual DbSet<FacilityStaffField> FacilityStaffFields { get; set; }

    public virtual DbSet<Faq> Faqs { get; set; }

    public virtual DbSet<Feature> Features { get; set; }

    public virtual DbSet<FirstAchQueue> FirstAchQueues { get; set; }

    public virtual DbSet<FitnessStaffField> FitnessStaffFields { get; set; }

    public virtual DbSet<FitnessStaffSchedule> FitnessStaffSchedules { get; set; }

    public virtual DbSet<FormConfiguration> FormConfigurations { get; set; }

    public virtual DbSet<FrontDeskClerkField> FrontDeskClerkFields { get; set; }

    public virtual DbSet<FstudioStaffField> FstudioStaffFields { get; set; }

    public virtual DbSet<GeneralDeclineFeeAmount> GeneralDeclineFeeAmounts { get; set; }

    public virtual DbSet<GeneralDeclineFeeExcludedAchCode> GeneralDeclineFeeExcludedAchCodes { get; set; }

    public virtual DbSet<GiftCertificate> GiftCertificates { get; set; }

    public virtual DbSet<GiftCertificateAccountingGroup> GiftCertificateAccountingGroups { get; set; }

    public virtual DbSet<GiftCertificateEntity> GiftCertificateEntities { get; set; }

    public virtual DbSet<GiftCertificateRestriction> GiftCertificateRestrictions { get; set; }

    public virtual DbSet<GiftCertificateRestrictionsEntity> GiftCertificateRestrictionsEntities { get; set; }

    public virtual DbSet<GiftCertificateSaleEntity> GiftCertificateSaleEntities { get; set; }

    public virtual DbSet<GiftCertificateStaffRestriction> GiftCertificateStaffRestrictions { get; set; }

    public virtual DbSet<GiftCertificateType> GiftCertificateTypes { get; set; }

    public virtual DbSet<GolfNote> GolfNotes { get; set; }

    public virtual DbSet<GolfStaffField> GolfStaffFields { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<GroupAccountingGroup> GroupAccountingGroups { get; set; }

    public virtual DbSet<GroupAdditionalCharge> GroupAdditionalCharges { get; set; }

    public virtual DbSet<GroupAdditionalChargeAccountingGroup> GroupAdditionalChargeAccountingGroups { get; set; }

    public virtual DbSet<GroupClassification> GroupClassifications { get; set; }

    public virtual DbSet<GroupDepartment> GroupDepartments { get; set; }

    public virtual DbSet<GroupEntity> GroupEntities { get; set; }

    public virtual DbSet<GroupEntityAccess> GroupEntityAccesses { get; set; }

    public virtual DbSet<GroupEntityAccountingGroup> GroupEntityAccountingGroups { get; set; }

    public virtual DbSet<GroupEntityAdditionalCharge> GroupEntityAdditionalCharges { get; set; }

    public virtual DbSet<GroupEntityBilling> GroupEntityBillings { get; set; }

    public virtual DbSet<GroupEntityCyclePrice> GroupEntityCyclePrices { get; set; }

    public virtual DbSet<GroupEntityDiscount> GroupEntityDiscounts { get; set; }

    public virtual DbSet<GroupEntityMaintenanceFee> GroupEntityMaintenanceFees { get; set; }

    public virtual DbSet<GroupEntityPrice> GroupEntityPrices { get; set; }

    public virtual DbSet<GroupEntityToGroup> GroupEntityToGroups { get; set; }

    public virtual DbSet<GroupEntityToPackage> GroupEntityToPackages { get; set; }

    public virtual DbSet<GroupHoldReason> GroupHoldReasons { get; set; }

    public virtual DbSet<GroupMembershipBilling> GroupMembershipBillings { get; set; }

    public virtual DbSet<GroupMembershipClassification> GroupMembershipClassifications { get; set; }

    public virtual DbSet<GroupServiceRestriction> GroupServiceRestrictions { get; set; }

    public virtual DbSet<GroupType> GroupTypes { get; set; }

    public virtual DbSet<GroupexStaffField> GroupexStaffFields { get; set; }

    public virtual DbSet<Guardian> Guardians { get; set; }

    public virtual DbSet<GuestFee> GuestFees { get; set; }

    public virtual DbSet<GuestFeesVisit> GuestFeesVisits { get; set; }

    public virtual DbSet<GuestHash> GuestHashes { get; set; }

    public virtual DbSet<GuestPassPackage> GuestPassPackages { get; set; }

    public virtual DbSet<GuestPassUse> GuestPassUses { get; set; }

    public virtual DbSet<GymStaffField> GymStaffFields { get; set; }

    public virtual DbSet<GymnasticsStaffField> GymnasticsStaffFields { get; set; }

    public virtual DbSet<HistoricalTransaction> HistoricalTransactions { get; set; }

    public virtual DbSet<HockeyStaffField> HockeyStaffFields { get; set; }

    public virtual DbSet<Hour> Hours { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<ImportAccgroupentity> ImportAccgroupentities { get; set; }

    public virtual DbSet<ImportAccountinggroup> ImportAccountinggroups { get; set; }

    public virtual DbSet<ImportField> ImportFields { get; set; }

    public virtual DbSet<ImportLog> ImportLogs { get; set; }

    public virtual DbSet<ImportProfile> ImportProfiles { get; set; }

    public virtual DbSet<ImportRecurringmembership> ImportRecurringmemberships { get; set; }

    public virtual DbSet<ImportRecurringusergroup> ImportRecurringusergroups { get; set; }

    public virtual DbSet<ImportSettingsadditionalcharge> ImportSettingsadditionalcharges { get; set; }

    public virtual DbSet<ImportSettingsfeescontracttype> ImportSettingsfeescontracttypes { get; set; }

    public virtual DbSet<ImportToolAuthKey> ImportToolAuthKeys { get; set; }

    public virtual DbSet<InfrastructureRateSetting> InfrastructureRateSettings { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<InstructorGhost> InstructorGhosts { get; set; }

    public virtual DbSet<Invitation> Invitations { get; set; }

    public virtual DbSet<KioskLocation> KioskLocations { get; set; }

    public virtual DbSet<Kitchen> Kitchens { get; set; }

    public virtual DbSet<KitchenOrder> KitchenOrders { get; set; }

    public virtual DbSet<KitchenPo> KitchenPos { get; set; }

    public virtual DbSet<LadderMatch> LadderMatches { get; set; }

    public virtual DbSet<LadderPlayer> LadderPlayers { get; set; }

    public virtual DbSet<LessonType> LessonTypes { get; set; }

    public virtual DbSet<LessonTypeOnlineBookingSetting> LessonTypeOnlineBookingSettings { get; set; }

    public virtual DbSet<LessonTypeOnlineStaffAssignment> LessonTypeOnlineStaffAssignments { get; set; }

    public virtual DbSet<LessonTypeStaffAssignment> LessonTypeStaffAssignments { get; set; }

    public virtual DbSet<Letter> Letters { get; set; }

    public virtual DbSet<LocationArea> LocationAreas { get; set; }

    public virtual DbSet<LocationRoom> LocationRooms { get; set; }

    public virtual DbSet<LocationSchedule> LocationSchedules { get; set; }

    public virtual DbSet<LocationScheduleDay> LocationScheduleDays { get; set; }

    public virtual DbSet<LocationStation> LocationStations { get; set; }

    public virtual DbSet<LockerBillingType> LockerBillingTypes { get; set; }

    public virtual DbSet<LockerSize> LockerSizes { get; set; }

    public virtual DbSet<LockerType> LockerTypes { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Mail> Mail { get; set; }

    public virtual DbSet<MailAttachment> MailAttachments { get; set; }

    public virtual DbSet<MailCustomgroup> MailCustomgroups { get; set; }

    public virtual DbSet<MailList> MailLists { get; set; }

    public virtual DbSet<Mailgroup> Mailgroups { get; set; }

    public virtual DbSet<MailingLetterVariable> MailingLetterVariables { get; set; }

    public virtual DbSet<MailingNotice> MailingNotices { get; set; }

    public virtual DbSet<MailingNotification> MailingNotifications { get; set; }

    public virtual DbSet<MailingNotificationTemplate> MailingNotificationTemplates { get; set; }

    public virtual DbSet<MailingTemplate> MailingTemplates { get; set; }

    public virtual DbSet<MailingTheme> MailingThemes { get; set; }

    public virtual DbSet<ManagerField> ManagerFields { get; set; }

    public virtual DbSet<ManualAchBatch> ManualAchBatches { get; set; }

    public virtual DbSet<ManualAchEntry> ManualAchEntries { get; set; }

    public virtual DbSet<ManualEftBulk> ManualEftBulks { get; set; }

    public virtual DbSet<ManualEftUser> ManualEftUsers { get; set; }

    public virtual DbSet<MartialartsStaffField> MartialartsStaffFields { get; set; }

    public virtual DbSet<MassageStaffField> MassageStaffFields { get; set; }

    public virtual DbSet<MassagebyroomStaffField> MassagebyroomStaffFields { get; set; }

    public virtual DbSet<MemberCart> MemberCarts { get; set; }

    public virtual DbSet<Membership> Memberships { get; set; }

    public virtual DbSet<MembershipBillingReport> MembershipBillingReports { get; set; }

    public virtual DbSet<MembershipCancellationReason> MembershipCancellationReasons { get; set; }

    public virtual DbSet<MembershipContractFeeInterval> MembershipContractFeeIntervals { get; set; }

    public virtual DbSet<MembershipContractFeeMonthly> MembershipContractFeeMonthlies { get; set; }

    public virtual DbSet<MembershipFee> MembershipFees { get; set; }

    public virtual DbSet<MembershipRejected> MembershipRejecteds { get; set; }

    public virtual DbSet<MembershipType> MembershipTypes { get; set; }

    public virtual DbSet<Menu> Menus { get; set; }

    public virtual DbSet<MerchantRetailer> MerchantRetailers { get; set; }

    public virtual DbSet<MessageArchive> MessageArchives { get; set; }

    public virtual DbSet<Metric> Metrics { get; set; }

    public virtual DbSet<MigrationVersion> MigrationVersions { get; set; }

    public virtual DbSet<Module> Modules { get; set; }

    public virtual DbSet<ModuleInstalled> ModuleInstalleds { get; set; }

    public virtual DbSet<MotocrossStaffField> MotocrossStaffFields { get; set; }

    public virtual DbSet<Note> Notes { get; set; }

    public virtual DbSet<NoteSetting> NoteSettings { get; set; }

    public virtual DbSet<NoteSubject> NoteSubjects { get; set; }

    public virtual DbSet<NoteSubjectLocation> NoteSubjectLocations { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationList> NotificationLists { get; set; }

    public virtual DbSet<NutritionStaffField> NutritionStaffFields { get; set; }

    public virtual DbSet<OauthAccessToken> OauthAccessTokens { get; set; }

    public virtual DbSet<OauthClient> OauthClients { get; set; }

    public virtual DbSet<OauthClientScope> OauthClientScopes { get; set; }

    public virtual DbSet<OauthScope> OauthScopes { get; set; }

    public virtual DbSet<OauthSession> OauthSessions { get; set; }

    public virtual DbSet<OffsiteStaffField> OffsiteStaffFields { get; set; }

    public virtual DbSet<OnlineBookingSetting> OnlineBookingSettings { get; set; }

    public virtual DbSet<OnlineMemberCart> OnlineMemberCarts { get; set; }

    public virtual DbSet<OnlineMemberCartBundleItem> OnlineMemberCartBundleItems { get; set; }

    public virtual DbSet<OnlineMemberCartGroupItem> OnlineMemberCartGroupItems { get; set; }

    public virtual DbSet<OnlineMemberCartItem> OnlineMemberCartItems { get; set; }

    public virtual DbSet<OnlineMemberCartPackageItem> OnlineMemberCartPackageItems { get; set; }

    public virtual DbSet<OnlineRegistrationRule> OnlineRegistrationRules { get; set; }

    public virtual DbSet<OnlineReservationMatrix> OnlineReservationMatrices { get; set; }

    public virtual DbSet<OverriddenRegistration> OverriddenRegistrations { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<PackageCalendar> PackageCalendars { get; set; }

    public virtual DbSet<PackageComponentAvailability> PackageComponentAvailabilities { get; set; }

    public virtual DbSet<PackageDuration> PackageDurations { get; set; }

    public virtual DbSet<PackageEntity> PackageEntities { get; set; }

    public virtual DbSet<PackageEvent> PackageEvents { get; set; }

    public virtual DbSet<PackageGroup> PackageGroups { get; set; }

    public virtual DbSet<PackageLessonType> PackageLessonTypes { get; set; }

    public virtual DbSet<PackageLocation> PackageLocations { get; set; }

    public virtual DbSet<PackagePlayersCount> PackagePlayersCounts { get; set; }

    public virtual DbSet<PackageRate> PackageRates { get; set; }

    public virtual DbSet<PackageSaleEntity> PackageSaleEntities { get; set; }

    public virtual DbSet<PackageStaff> PackageStaffs { get; set; }

    public virtual DbSet<PaddletennisStaffField> PaddletennisStaffFields { get; set; }

    public virtual DbSet<PadelStaffField> PadelStaffFields { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentRequestLog> PaymentRequestLogs { get; set; }

    public virtual DbSet<PaymentTransaction> PaymentTransactions { get; set; }

    public virtual DbSet<PaymentTransfer> PaymentTransfers { get; set; }

    public virtual DbSet<PaymentType> PaymentTypes { get; set; }

    public virtual DbSet<Payroll> Payrolls { get; set; }

    public virtual DbSet<PayrollApproved> PayrollApproveds { get; set; }

    public virtual DbSet<PayrollItemQuestion> PayrollItemQuestions { get; set; }

    public virtual DbSet<PayrollLog> PayrollLogs { get; set; }

    public virtual DbSet<PayrollQuestion> PayrollQuestions { get; set; }

    public virtual DbSet<PayrollTemplate> PayrollTemplates { get; set; }

    public virtual DbSet<Penalty> Penalties { get; set; }

    public virtual DbSet<Phone> Phones { get; set; }

    public virtual DbSet<PhoneStatus> PhoneStatuses { get; set; }

    public virtual DbSet<PickleballStaffField> PickleballStaffFields { get; set; }

    public virtual DbSet<PilatesStaffField> PilatesStaffFields { get; set; }

    public virtual DbSet<PncAchBatch> PncAchBatches { get; set; }

    public virtual DbSet<PncAchEntry> PncAchEntries { get; set; }

    public virtual DbSet<Po> Pos { get; set; }

    public virtual DbSet<PointInTimeLateFee> PointInTimeLateFees { get; set; }

    public virtual DbSet<PosPaymentType> PosPaymentTypes { get; set; }

    public virtual DbSet<Printjob> Printjobs { get; set; }

    public virtual DbSet<PrintjobParam> PrintjobParams { get; set; }

    public virtual DbSet<Programm> Programms { get; set; }

    public virtual DbSet<ProspectNote> ProspectNotes { get; set; }

    public virtual DbSet<ProspectOption> ProspectOptions { get; set; }

    public virtual DbSet<ProspectTask> ProspectTasks { get; set; }

    public virtual DbSet<ProspectUserAssignment> ProspectUserAssignments { get; set; }

    public virtual DbSet<ProspectUserMembershipGoal> ProspectUserMembershipGoals { get; set; }

    public virtual DbSet<ProspectUserTask> ProspectUserTasks { get; set; }

    public virtual DbSet<QbAccount> QbAccounts { get; set; }

    public virtual DbSet<QbAccountMapping> QbAccountMappings { get; set; }

    public virtual DbSet<QbRequestLog> QbRequestLogs { get; set; }

    public virtual DbSet<QbSetting> QbSettings { get; set; }

    public virtual DbSet<QuickbooksConfig> QuickbooksConfigs { get; set; }

    public virtual DbSet<QuickbooksExportMapping> QuickbooksExportMappings { get; set; }

    public virtual DbSet<QuickbooksIdent> QuickbooksIdents { get; set; }

    public virtual DbSet<QuickbooksLog> QuickbooksLogs { get; set; }

    public virtual DbSet<QuickbooksQueue> QuickbooksQueues { get; set; }

    public virtual DbSet<QuickbooksRecur> QuickbooksRecurs { get; set; }

    public virtual DbSet<QuickbooksTicket> QuickbooksTickets { get; set; }

    public virtual DbSet<QuickbooksUser> QuickbooksUsers { get; set; }

    public virtual DbSet<RacquetballStaffField> RacquetballStaffFields { get; set; }

    public virtual DbSet<RangeStaffField> RangeStaffFields { get; set; }

    public virtual DbSet<Receipt> Receipts { get; set; }

    public virtual DbSet<RecorderRecordGolfcartfee> RecorderRecordGolfcartfees { get; set; }

    public virtual DbSet<RecorderRecordGreenfee> RecorderRecordGreenfees { get; set; }

    public virtual DbSet<Recurrence> Recurrences { get; set; }

    public virtual DbSet<RecurringChargesList> RecurringChargesLists { get; set; }

    public virtual DbSet<RecurringTransaction> RecurringTransactions { get; set; }

    public virtual DbSet<Refund> Refunds { get; set; }

    public virtual DbSet<RefundCustomRefundType> RefundCustomRefundTypes { get; set; }

    public virtual DbSet<RefundReceipt> RefundReceipts { get; set; }

    public virtual DbSet<ReleaseNote> ReleaseNotes { get; set; }

    public virtual DbSet<RepairStaffField> RepairStaffFields { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<ReportsShopInventoryHistory> ReportsShopInventoryHistories { get; set; }

    public virtual DbSet<ReservationStatus> ReservationStatuses { get; set; }

    public virtual DbSet<Resource> Resources { get; set; }

    public virtual DbSet<ResourceSchedule> ResourceSchedules { get; set; }

    public virtual DbSet<ResourceScheduleInfo> ResourceScheduleInfos { get; set; }

    public virtual DbSet<ResourceStatus> ResourceStatuses { get; set; }

    public virtual DbSet<ResourceType> ResourceTypes { get; set; }

    public virtual DbSet<ResourceWaitlist> ResourceWaitlists { get; set; }

    public virtual DbSet<ResourceWaitlistParticipant> ResourceWaitlistParticipants { get; set; }

    public virtual DbSet<RevenueGroup> RevenueGroups { get; set; }

    public virtual DbSet<RevenueRecognition> RevenueRecognitions { get; set; }

    public virtual DbSet<RewardPointsHistory> RewardPointsHistories { get; set; }

    public virtual DbSet<RewardPointsUsage> RewardPointsUsages { get; set; }

    public virtual DbSet<RewardRule> RewardRules { get; set; }

    public virtual DbSet<RewardSetting> RewardSettings { get; set; }

    public virtual DbSet<RinkStaffField> RinkStaffFields { get; set; }

    public virtual DbSet<RsoCheck> RsoChecks { get; set; }

    public virtual DbSet<RsoRecord> RsoRecords { get; set; }

    public virtual DbSet<SalesStaffField> SalesStaffFields { get; set; }

    public virtual DbSet<Schedule> Schedules { get; set; }

    public virtual DbSet<ScheduleAddon> ScheduleAddons { get; set; }

    public virtual DbSet<ScheduleCopy> ScheduleCopies { get; set; }

    public virtual DbSet<ScheduleFee> ScheduleFees { get; set; }

    public virtual DbSet<ScheduleReserve> ScheduleReserves { get; set; }

    public virtual DbSet<ScheduleResource> ScheduleResources { get; set; }

    public virtual DbSet<ScheduleRoom> ScheduleRooms { get; set; }

    public virtual DbSet<ScheduleServiceCommission> ScheduleServiceCommissions { get; set; }

    public virtual DbSet<ScheduleStatus> ScheduleStatuses { get; set; }

    public virtual DbSet<ScheduleUserPackage> ScheduleUserPackages { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceAccountingGroup> ServiceAccountingGroups { get; set; }

    public virtual DbSet<ServiceAlternateFee> ServiceAlternateFees { get; set; }

    public virtual DbSet<ServiceCommission> ServiceCommissions { get; set; }

    public virtual DbSet<ServiceFee> ServiceFees { get; set; }

    public virtual DbSet<ServiceFeeRule> ServiceFeeRules { get; set; }

    public virtual DbSet<ServiceLocation> ServiceLocations { get; set; }

    public virtual DbSet<ServiceOnlineBookingRule> ServiceOnlineBookingRules { get; set; }

    public virtual DbSet<ServiceParticipationRule> ServiceParticipationRules { get; set; }

    public virtual DbSet<ServicePricingGroup> ServicePricingGroups { get; set; }

    public virtual DbSet<ServicePricingGroupServiceFee> ServicePricingGroupServiceFees { get; set; }

    public virtual DbSet<ServicePricingGroupServiceType> ServicePricingGroupServiceTypes { get; set; }

    public virtual DbSet<ServicePricingGroupUserGroup> ServicePricingGroupUserGroups { get; set; }

    public virtual DbSet<ServiceSchedule> ServiceSchedules { get; set; }

    public virtual DbSet<ServiceScheduleDay> ServiceScheduleDays { get; set; }

    public virtual DbSet<ServiceStaff> ServiceStaffs { get; set; }

    public virtual DbSet<ServiceType> ServiceTypes { get; set; }

    public virtual DbSet<Session> Sessions { get; set; }

    public virtual DbSet<SettingClub> SettingClubs { get; set; }

    public virtual DbSet<SettingEvent> SettingEvents { get; set; }

    public virtual DbSet<ShopCart> ShopCarts { get; set; }

    public virtual DbSet<ShopCategory> ShopCategories { get; set; }

    public virtual DbSet<ShopCategoryStore> ShopCategoryStores { get; set; }

    public virtual DbSet<ShopInventoryHistory> ShopInventoryHistories { get; set; }

    public virtual DbSet<ShopInventoryTransfer> ShopInventoryTransfers { get; set; }

    public virtual DbSet<ShopItem> ShopItems { get; set; }

    public virtual DbSet<ShopItemAdjustmentReason> ShopItemAdjustmentReasons { get; set; }

    public virtual DbSet<ShopItemBarcode> ShopItemBarcodes { get; set; }

    public virtual DbSet<ShopItemCourtLocation> ShopItemCourtLocations { get; set; }

    public virtual DbSet<ShopItemManufacturer> ShopItemManufacturers { get; set; }

    public virtual DbSet<ShopItemManufacturerStore> ShopItemManufacturerStores { get; set; }

    public virtual DbSet<ShopItemStore> ShopItemStores { get; set; }

    public virtual DbSet<ShopOrder> ShopOrders { get; set; }

    public virtual DbSet<ShopShortcutCart> ShopShortcutCarts { get; set; }

    public virtual DbSet<ShopShortcutItem> ShopShortcutItems { get; set; }

    public virtual DbSet<ShopShortcutMenu> ShopShortcutMenus { get; set; }

    public virtual DbSet<ShopStore> ShopStores { get; set; }

    public virtual DbSet<ShopStorePo> ShopStorePos { get; set; }

    public virtual DbSet<ShopTaxRate> ShopTaxRates { get; set; }

    public virtual DbSet<ShopVendor> ShopVendors { get; set; }

    public virtual DbSet<ShopVendorItem> ShopVendorItems { get; set; }

    public virtual DbSet<ShopVendorOrder> ShopVendorOrders { get; set; }

    public virtual DbSet<ShopVendorOrderItem> ShopVendorOrderItems { get; set; }

    public virtual DbSet<ShopVendorStore> ShopVendorStores { get; set; }

    public virtual DbSet<SmallgroupStaffField> SmallgroupStaffFields { get; set; }

    public virtual DbSet<SoccerStaffField> SoccerStaffFields { get; set; }

    public virtual DbSet<SpaAddon> SpaAddons { get; set; }

    public virtual DbSet<SpaAddonPrice> SpaAddonPrices { get; set; }

    public virtual DbSet<SpaPayrollRate> SpaPayrollRates { get; set; }

    public virtual DbSet<SpaPayrollRateLevel> SpaPayrollRateLevels { get; set; }

    public virtual DbSet<SpaScheduleAddon> SpaScheduleAddons { get; set; }

    public virtual DbSet<SpaScheduleService> SpaScheduleServices { get; set; }

    public virtual DbSet<SpaService> SpaServices { get; set; }

    public virtual DbSet<SpaServiceAddon> SpaServiceAddons { get; set; }

    public virtual DbSet<SpaServiceNote> SpaServiceNotes { get; set; }

    public virtual DbSet<SpaServicePrice> SpaServicePrices { get; set; }

    public virtual DbSet<SpaStaff> SpaStaffs { get; set; }

    public virtual DbSet<SpaStaffServicePrice> SpaStaffServicePrices { get; set; }

    public virtual DbSet<SquashStaffField> SquashStaffFields { get; set; }

    public virtual DbSet<StaffField> StaffFields { get; set; }

    public virtual DbSet<StaffLevel> StaffLevels { get; set; }

    public virtual DbSet<StaffLevelUser> StaffLevelUsers { get; set; }

    public virtual DbSet<StaffReleaseNote> StaffReleaseNotes { get; set; }

    public virtual DbSet<StaffSchedule> StaffSchedules { get; set; }

    public virtual DbSet<StaffScheduleService> StaffScheduleServices { get; set; }

    public virtual DbSet<StaffScheduleTime> StaffScheduleTimes { get; set; }

    public virtual DbSet<StaffShift> StaffShifts { get; set; }

    public virtual DbSet<StaffShiftSchedule> StaffShiftSchedules { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<StatementCache> StatementCaches { get; set; }

    public virtual DbSet<StatementEmailQueue> StatementEmailQueues { get; set; }

    public virtual DbSet<Style> Styles { get; set; }

    public virtual DbSet<SummerCamp> SummerCamps { get; set; }

    public virtual DbSet<SummerCampRegister> SummerCampRegisters { get; set; }

    public virtual DbSet<SummerCampType> SummerCampTypes { get; set; }

    public virtual DbSet<SwimmingStaffField> SwimmingStaffFields { get; set; }

    public virtual DbSet<SyncDatum> SyncData { get; set; }

    public virtual DbSet<TanningStaffField> TanningStaffFields { get; set; }

    public virtual DbSet<Tbatch> Tbatches { get; set; }

    public virtual DbSet<TbatchTransaction> TbatchTransactions { get; set; }

    public virtual DbSet<TeeSheet> TeeSheets { get; set; }

    public virtual DbSet<TeeSheetTemplate> TeeSheetTemplates { get; set; }

    public virtual DbSet<TeeSheetTemplateItem> TeeSheetTemplateItems { get; set; }

    public virtual DbSet<TeeTime> TeeTimes { get; set; }

    public virtual DbSet<TennisStaffField> TennisStaffFields { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<Tournament> Tournaments { get; set; }

    public virtual DbSet<TournamentDraw> TournamentDraws { get; set; }

    public virtual DbSet<TournamentMatch> TournamentMatches { get; set; }

    public virtual DbSet<TournamentPlayer> TournamentPlayers { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<TransactionInfrastructureFee> TransactionInfrastructureFees { get; set; }

    public virtual DbSet<TransactionPenaltyCharge> TransactionPenaltyCharges { get; set; }

    public virtual DbSet<TrxStaffField> TrxStaffFields { get; set; }

    public virtual DbSet<TryU> TryUs { get; set; }

    public virtual DbSet<TurffieldStaffField> TurffieldStaffFields { get; set; }

    public virtual DbSet<UpdateLogger> UpdateLoggers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAdvancedRating> UserAdvancedRatings { get; set; }

    public virtual DbSet<UserAdvancedRatingItem> UserAdvancedRatingItems { get; set; }

    public virtual DbSet<UserAnalyticDatum> UserAnalyticData { get; set; }

    public virtual DbSet<UserApiMenuSetting> UserApiMenuSettings { get; set; }

    public virtual DbSet<UserArchive> UserArchives { get; set; }

    public virtual DbSet<UserAuthhash> UserAuthhashes { get; set; }

    public virtual DbSet<UserAuthhashToGuestHash> UserAuthhashToGuestHashes { get; set; }

    public virtual DbSet<UserBalance> UserBalances { get; set; }

    public virtual DbSet<UserBankAccount> UserBankAccounts { get; set; }

    public virtual DbSet<UserBankAccountRetailer> UserBankAccountRetailers { get; set; }

    public virtual DbSet<UserBiography> UserBiographies { get; set; }

    public virtual DbSet<UserContract> UserContracts { get; set; }

    public virtual DbSet<UserContractCharge> UserContractCharges { get; set; }

    public virtual DbSet<UserContractToTransaction> UserContractToTransactions { get; set; }

    public virtual DbSet<UserContractToUserGroupSubscription> UserContractToUserGroupSubscriptions { get; set; }

    public virtual DbSet<UserContractToUserGroupSubscriptionPricingDetail> UserContractToUserGroupSubscriptionPricingDetails { get; set; }

    public virtual DbSet<UserContractToUserGroupSubscriptionPricingTable> UserContractToUserGroupSubscriptionPricingTables { get; set; }

    public virtual DbSet<UserContractToUserPackage> UserContractToUserPackages { get; set; }

    public virtual DbSet<UserCreditCard> UserCreditCards { get; set; }

    public virtual DbSet<UserCustomField> UserCustomFields { get; set; }

    public virtual DbSet<UserCustomFieldsValue> UserCustomFieldsValues { get; set; }

    public virtual DbSet<UserCustomRegistrationFieldsValue> UserCustomRegistrationFieldsValues { get; set; }

    public virtual DbSet<UserDocument> UserDocuments { get; set; }

    public virtual DbSet<UserEvent> UserEvents { get; set; }

    public virtual DbSet<UserEventAddon> UserEventAddons { get; set; }

    public virtual DbSet<UserEventDiscount> UserEventDiscounts { get; set; }

    public virtual DbSet<UserEventWaitingList> UserEventWaitingLists { get; set; }

    public virtual DbSet<UserFavoriteClass> UserFavoriteClasses { get; set; }

    public virtual DbSet<UserFavoriteLocation> UserFavoriteLocations { get; set; }

    public virtual DbSet<UserGroup> UserGroups { get; set; }

    public virtual DbSet<UserGroupContractFee> UserGroupContractFees { get; set; }

    public virtual DbSet<UserGroupFee> UserGroupFees { get; set; }

    public virtual DbSet<UserGroupHistory> UserGroupHistories { get; set; }

    public virtual DbSet<UserGroupSale> UserGroupSales { get; set; }

    public virtual DbSet<UserGroupSubscription> UserGroupSubscriptions { get; set; }

    public virtual DbSet<UserGroupSubscriptionAction> UserGroupSubscriptionActions { get; set; }

    public virtual DbSet<UserGroupSubscriptionAdditionalCharge> UserGroupSubscriptionAdditionalCharges { get; set; }

    public virtual DbSet<UserGroupSubscriptionBillingOption> UserGroupSubscriptionBillingOptions { get; set; }

    public virtual DbSet<UserGroupSubscriptionCalculatedFee> UserGroupSubscriptionCalculatedFees { get; set; }

    public virtual DbSet<UserGroupSubscriptionCalculatedFeeDetail> UserGroupSubscriptionCalculatedFeeDetails { get; set; }

    public virtual DbSet<UserGroupSubscriptionCyclePrice> UserGroupSubscriptionCyclePrices { get; set; }

    public virtual DbSet<UserGroupSubscriptionHistory> UserGroupSubscriptionHistories { get; set; }

    public virtual DbSet<UserGroupSubscriptionMaintenanceFee> UserGroupSubscriptionMaintenanceFees { get; set; }

    public virtual DbSet<UserGroupSubscriptionPrice> UserGroupSubscriptionPrices { get; set; }

    public virtual DbSet<UserGroupSubscriptionPriceDetail> UserGroupSubscriptionPriceDetails { get; set; }

    public virtual DbSet<UserGroupSubscriptionSale> UserGroupSubscriptionSales { get; set; }

    public virtual DbSet<UserGroupSubscriptionStatus> UserGroupSubscriptionStatuses { get; set; }

    public virtual DbSet<UserImportBulk> UserImportBulks { get; set; }

    public virtual DbSet<UserImportBulkItem> UserImportBulkItems { get; set; }

    public virtual DbSet<UserLeagueSubstitution> UserLeagueSubstitutions { get; set; }

    public virtual DbSet<UserLoginAttempt> UserLoginAttempts { get; set; }

    public virtual DbSet<UserLoginLock> UserLoginLocks { get; set; }

    public virtual DbSet<UserMailgroup> UserMailgroups { get; set; }

    public virtual DbSet<UserMetricValue> UserMetricValues { get; set; }

    public virtual DbSet<UserNotification> UserNotifications { get; set; }

    public virtual DbSet<UserOffsiteAddress> UserOffsiteAddresses { get; set; }

    public virtual DbSet<UserPackage> UserPackages { get; set; }

    public virtual DbSet<UserPackageAdjustmentLog> UserPackageAdjustmentLogs { get; set; }

    public virtual DbSet<UserPackageDuration> UserPackageDurations { get; set; }

    public virtual DbSet<UserPackageEntity> UserPackageEntities { get; set; }

    public virtual DbSet<UserPackageEvent> UserPackageEvents { get; set; }

    public virtual DbSet<UserPackageLessonType> UserPackageLessonTypes { get; set; }

    public virtual DbSet<UserPackageLocation> UserPackageLocations { get; set; }

    public virtual DbSet<UserPackagePlayersCount> UserPackagePlayersCounts { get; set; }

    public virtual DbSet<UserPackageSource> UserPackageSources { get; set; }

    public virtual DbSet<UserPackageUsage> UserPackageUsages { get; set; }

    public virtual DbSet<UserPasswordsHistory> UserPasswordsHistories { get; set; }

    public virtual DbSet<UserQueueGroup> UserQueueGroups { get; set; }

    public virtual DbSet<UserQueueGroupAdditionalCharge> UserQueueGroupAdditionalCharges { get; set; }

    public virtual DbSet<UserQueueGroupFee> UserQueueGroupFees { get; set; }

    public virtual DbSet<UserQueueGroupSale> UserQueueGroupSales { get; set; }

    public virtual DbSet<UserRetailer> UserRetailers { get; set; }

    public virtual DbSet<UserSetting> UserSettings { get; set; }

    public virtual DbSet<UserStatementAgingBalance> UserStatementAgingBalances { get; set; }

    public virtual DbSet<UserStatementPastDue> UserStatementPastDues { get; set; }

    public virtual DbSet<VolleyballStaffField> VolleyballStaffFields { get; set; }

    public virtual DbSet<VwGroup> VwGroups { get; set; }

    public virtual DbSet<VwUser> VwUsers { get; set; }

    public virtual DbSet<WellnessStaffField> WellnessStaffFields { get; set; }

    public virtual DbSet<YogaStaffField> YogaStaffFields { get; set; }

    public virtual DbSet<YogabyroomStaffField> YogabyroomStaffFields { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseMySql(Connect.ConnectToRemote(), Microsoft.EntityFrameworkCore.ServerVersion.Parse("8.0.4-mysql"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("latin1_swedish_ci")
            .HasCharSet("latin1");

        modelBuilder.Entity<Access>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("access");

            entity.Property(e => e.Action)
                .HasColumnType("enum('view','edit','create','delete')")
                .HasColumnName("action");
            entity.Property(e => e.Flag).HasColumnName("flag");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.TargetId).HasColumnName("target_id");
            entity.Property(e => e.Type)
                .HasColumnType("enum('component','module','content','file')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<AccgroupEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("accgroup_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupName)
                .HasColumnType("text")
                .HasColumnName("acc_group_name");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("address");
            entity.Property(e => e.Address2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("address2");
            entity.Property(e => e.AllowedCapacity).HasColumnName("allowed_capacity");
            entity.Property(e => e.CcRetailer).HasColumnName("cc_retailer");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasDefaultValueSql("'US'")
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.Default).HasColumnName("default");
            entity.Property(e => e.DefaultLocation)
                .HasColumnType("text")
                .HasColumnName("default_location");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("email");
            entity.Property(e => e.EntityName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("entity_name");
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("fax");
            entity.Property(e => e.GlCode)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("gl_code");
            entity.Property(e => e.Latitude)
                .HasPrecision(11, 7)
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasPrecision(11, 7)
                .HasColumnName("longitude");
            entity.Property(e => e.MailAddress)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("mail_address");
            entity.Property(e => e.MailAddress2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("mail_address2");
            entity.Property(e => e.MailCity)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("mail_city");
            entity.Property(e => e.MailCountry)
                .HasMaxLength(2)
                .HasDefaultValueSql("'US'")
                .IsFixedLength()
                .HasColumnName("mail_country");
            entity.Property(e => e.MailState)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("mail_state");
            entity.Property(e => e.MailZip)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("mail_zip");
            entity.Property(e => e.OnlineIsVisible)
                .HasComment("Is this entity visible online")
                .HasColumnName("online_is_visible");
            entity.Property(e => e.OnlineName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("Member-facing location name. If blank entity_name will be used")
                .HasColumnName("online_name");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("phone");
            entity.Property(e => e.Prefix)
                .HasMaxLength(50)
                .HasColumnName("prefix");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("state");
            entity.Property(e => e.TimeZone)
                .HasMaxLength(40)
                .HasColumnName("time_zone");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.Zip)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("zip");
        });

        modelBuilder.Entity<AccountAgingAggregate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("account_aging_aggregate");

            entity.HasIndex(e => e.EffectiveFrom, "effective_from");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AggregateType)
                .HasComment("1 - daily, 2 - monthly, 3 - quarterly, 4 - yearly")
                .HasColumnName("aggregate_type");
            entity.Property(e => e.Balance)
                .HasPrecision(12, 2)
                .HasColumnName("balance");
            entity.Property(e => e.Credit)
                .HasPrecision(12, 2)
                .HasColumnName("credit");
            entity.Property(e => e.EffectiveFrom).HasColumnName("effective_from");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.PeriodEnd).HasColumnName("period_end");
            entity.Property(e => e.PeriodStart).HasColumnName("period_start");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<AccountingGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("accounting_group");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.IsInvisible, "is_invisible");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.HasIndex(e => e.NoCustomCharge, "no_custom_charge");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => e.TaxRateId, "tax_rate_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Acctype)
                .HasDefaultValueSql("'1'")
                .HasColumnName("acctype");
            entity.Property(e => e.BuiltIn).HasColumnName("built_in");
            entity.Property(e => e.CanAddSoldBy).HasColumnName("can_add_sold_by");
            entity.Property(e => e.CogsAcct).HasColumnName("cogs_acct");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Discountable).HasColumnName("discountable");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.ExpRecognition)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("exp_recognition");
            entity.Property(e => e.GlCode)
                .HasColumnType("text")
                .HasColumnName("gl_code");
            entity.Property(e => e.HideInFilter).HasColumnName("hide_in_filter");
            entity.Property(e => e.InvisibleForPos).HasColumnName("invisible_for_pos");
            entity.Property(e => e.IsDescription).HasColumnName("is_description");
            entity.Property(e => e.IsDisabled).HasColumnName("is_disabled");
            entity.Property(e => e.IsInvisible).HasColumnName("is_invisible");
            entity.Property(e => e.IsUnavailable).HasColumnName("is_unavailable");
            entity.Property(e => e.LiabilityType).HasColumnName("liability_type");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.NoCustomCharge).HasColumnName("no_custom_charge");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.QbInventory).HasColumnName("qb_inventory");
            entity.Property(e => e.RevenueAcct).HasColumnName("revenue_acct");
            entity.Property(e => e.TaxRateId).HasColumnName("tax_rate_id");
            entity.Property(e => e.Taxable).HasColumnName("taxable");
            entity.Property(e => e.Title)
                .HasMaxLength(250)
                .HasColumnName("title");
            entity.Property(e => e.UseDescription)
                .HasMaxLength(250)
                .HasColumnName("use_description");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<AccountingGroupItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("accounting_group_items");

            entity.HasIndex(e => e.AccountingGroupId, "accounting_group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.ItemId).HasColumnName("item_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("float(9,3)")
                .HasColumnName("price");
        });

        modelBuilder.Entity<AclResource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("acl_resource")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ParentId)
                .HasMaxLength(255)
                .HasColumnName("parent_id");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'1'")
                .HasColumnName("type");
        });

        modelBuilder.Entity<AclRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("acl_role")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ParentId)
                .HasMaxLength(255)
                .HasColumnName("parent_id");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'1'")
                .HasColumnName("type");
        });

        modelBuilder.Entity<AclRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("acl_rule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsAllowed).HasColumnName("is_allowed");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Privilege)
                .HasMaxLength(255)
                .HasColumnName("privilege");
            entity.Property(e => e.ResourceId)
                .HasMaxLength(255)
                .HasColumnName("resource_id");
            entity.Property(e => e.RoleId)
                .HasMaxLength(255)
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<AddonDiscount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("addon_discount")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AccountingGroupId, "accounting_group_id");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.Fee)
                .HasPrecision(18, 2)
                .HasColumnName("fee");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'%'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("type");

            entity.HasOne(d => d.AccountingGroup).WithMany(p => p.AddonDiscounts)
                .HasForeignKey(d => d.AccountingGroupId)
                .HasConstraintName("accounting_group_id");

            entity.HasOne(d => d.Addon).WithMany(p => p.AddonDiscounts)
                .HasForeignKey(d => d.AddonId)
                .HasConstraintName("addon_id");
        });

        modelBuilder.Entity<AddonResource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("addon_resource");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.HasIndex(e => e.Available, "available");

            entity.HasIndex(e => e.LocationId, "location_id");

            entity.HasIndex(e => e.TypeId, "type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.Available)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("available");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.Prefix)
                .HasMaxLength(32)
                .HasColumnName("prefix");
            entity.Property(e => e.Removed).HasColumnName("removed");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.SubAddonId).HasColumnName("sub_addon_id");
            entity.Property(e => e.Suffix)
                .HasMaxLength(32)
                .HasColumnName("suffix");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.Addon).WithMany(p => p.AddonResources)
                .HasForeignKey(d => d.AddonId)
                .HasConstraintName("addon_resource_ibfk_1");

            entity.HasOne(d => d.Location).WithMany(p => p.AddonResources)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("addon_resource_ibfk_2");

            entity.HasOne(d => d.Type).WithMany(p => p.AddonResources)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("addon_resource_ibfk_3");
        });

        modelBuilder.Entity<AddonResourceLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("addon_resource_location");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<AddonResourceNote>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("addon_resource_note")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasColumnName("note");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");

            entity.HasOne(d => d.Resource).WithMany(p => p.AddonResourceNotes)
                .HasForeignKey(d => d.ResourceId)
                .HasConstraintName("resource_id");
        });

        modelBuilder.Entity<AddonResourceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("addon_resource_type");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<AddonResourceTypeFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("addon_resource_type_fee");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.HasIndex(e => e.BillingAddonId, "billing_addon_id");

            entity.HasIndex(e => e.ResourceTypeId, "resource_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.ActivationAccountingGroupId).HasColumnName("activation_accounting_group_id");
            entity.Property(e => e.ActivationFee)
                .HasPrecision(18, 2)
                .HasColumnName("activation_fee");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.BillingAddonId).HasColumnName("billing_addon_id");
            entity.Property(e => e.Fee)
                .HasPrecision(18, 2)
                .HasColumnName("fee");
            entity.Property(e => e.LiabilityAccountingGroupId).HasColumnName("liability_accounting_group_id");
            entity.Property(e => e.ResourceTypeId).HasColumnName("resource_type_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("address");

            entity.HasIndex(e => e.CountryId, "fk_address_country");

            entity.HasIndex(e => e.StateId, "fk_address_state");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.Latitude)
                .HasPrecision(11, 7)
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasPrecision(11, 7)
                .HasColumnName("longitude");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(40)
                .HasColumnName("postal_code");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Street)
                .HasMaxLength(255)
                .HasColumnName("street");
            entity.Property(e => e.Street2)
                .HasMaxLength(255)
                .HasColumnName("street2");

            entity.HasOne(d => d.Country).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_address_country");

            entity.HasOne(d => d.State).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.StateId)
                .HasConstraintName("fk_address_state");
        });

        modelBuilder.Entity<AdvancedRating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("advanced_rating")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DepartmentId, "department_id");

            entity.HasIndex(e => new { e.DepartmentId, e.Active }, "department_id_active");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<AdvancedRatingItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("advanced_rating_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AdvancedRatingId, "advanced_rating_id");

            entity.HasIndex(e => new { e.AdvancedRatingId, e.Active }, "advanced_rating_id_active");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.AdvancedRatingId).HasColumnName("advanced_rating_id");
            entity.Property(e => e.Group)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("group");
            entity.Property(e => e.Instruction)
                .HasColumnType("text")
                .HasColumnName("instruction");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
        });

        modelBuilder.Entity<AdventurecentralStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("adventurecentral_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<AgilysysInterface>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("agilysys_interfaces")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Login)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("login");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("password");
            entity.Property(e => e.Settings)
                .HasColumnType("text")
                .HasColumnName("settings");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
        });

        modelBuilder.Entity<AgilysysPosItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("agilysys_pos_items");

            entity.HasIndex(e => e.Id, "id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InterfaceId)
                .HasDefaultValueSql("'1'")
                .HasColumnName("interface_id");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("item_name");
        });

        modelBuilder.Entity<Announcement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("announcement")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EndDate, "end_date");

            entity.HasIndex(e => e.StartDate, "start_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Content)
                .HasColumnType("text")
                .HasColumnName("content");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.ImageFileName)
                .HasMaxLength(255)
                .HasColumnName("image_file_name");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasComment("Active/Inactive")
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("title");
            entity.Property(e => e.VideoUrl)
                .HasMaxLength(255)
                .HasColumnName("video_url");
        });

        modelBuilder.Entity<AnnouncementEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("announcement_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AnnouncementId, "announcement_id");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnnouncementId).HasColumnName("announcement_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
        });

        modelBuilder.Entity<ApiMenuDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("api_menu_details")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DisplayName)
                .HasMaxLength(45)
                .HasColumnName("display_name");
            entity.Property(e => e.MenuItem)
                .HasMaxLength(45)
                .HasColumnName("menu_item");
        });

        modelBuilder.Entity<ApiSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("api_setting")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Data)
                .HasColumnType("text")
                .HasColumnName("data");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.OauthClientId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("oauth_client_id");
        });

        modelBuilder.Entity<AppIntegration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("app_integration")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AndroidLink)
                .HasMaxLength(250)
                .HasColumnName("android_link");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Icon).HasColumnName("icon");
            entity.Property(e => e.IosLink)
                .HasMaxLength(250)
                .HasColumnName("ios_link");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsSelectedAllGroups).HasColumnName("is_selected_all_groups");
            entity.Property(e => e.IsSelectedAllLocations).HasColumnName("is_selected_all_locations");
            entity.Property(e => e.LinkType)
                .HasDefaultValueSql("'web'")
                .HasColumnType("enum('web','mobile')")
                .HasColumnName("link_type");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasColumnName("name");
            entity.Property(e => e.PostParams)
                .HasColumnType("json")
                .HasColumnName("post_params");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.WebLink)
                .HasMaxLength(250)
                .HasColumnName("web_link");
        });

        modelBuilder.Entity<AppIntegrationIcon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("app_integration_icon")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Icon)
                .HasMaxLength(255)
                .HasColumnName("icon");
            entity.Property(e => e.Title)
                .HasMaxLength(45)
                .HasColumnName("title");
        });

        modelBuilder.Entity<AppIntegrationUserGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("app_integration_user_groups")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AppIntegrationId, "app_integration_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AppIntegrationId).HasColumnName("app_integration_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
        });

        modelBuilder.Entity<AppIntegrationUserHomeClub>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("app_integration_user_home_clubs")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AppIntegrationId, "app_integration_id");

            entity.HasIndex(e => e.LocationId, "location_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AppIntegrationId).HasColumnName("app_integration_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
        });

        modelBuilder.Entity<AppPalette>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("app_palette")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_time");
            entity.Property(e => e.Data)
                .HasColumnType("mediumtext")
                .HasColumnName("data");
            entity.Property(e => e.DeletedBy).HasColumnName("deleted_by");
            entity.Property(e => e.DeletedTime)
                .HasColumnType("datetime")
                .HasColumnName("deleted_time");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.SubmittedBy).HasColumnName("submitted_by");
            entity.Property(e => e.SubmittedTime)
                .HasColumnType("datetime")
                .HasColumnName("submitted_time");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");
        });

        modelBuilder.Entity<AppTransferNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("app_transfer_notification");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Time)
                .HasColumnType("datetime")
                .HasColumnName("time");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<AppTransferSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("app_transfer_settings");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EmailBody)
                .HasColumnType("text")
                .HasColumnName("email_body");
            entity.Property(e => e.EmailSubject)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("email_subject");
            entity.Property(e => e.Enabled).HasColumnName("enabled");
            entity.Property(e => e.ErrorMessageText)
                .HasColumnType("text")
                .HasColumnName("error_message_text");
            entity.Property(e => e.LinkForNewApp)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("link_for_new_app");
            entity.Property(e => e.NewAppName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("new_app_name");
            entity.Property(e => e.OldAppClientId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("old_app_client_id");
        });

        modelBuilder.Entity<AppleWalletAuth>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("apple_wallet_auth")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.SerialNumber, e.AuthToken, e.PassTypeId }, "apple_wallet_auth_ix1");

            entity.HasIndex(e => new { e.SerialNumber, e.LastHitAt }, "apple_wallet_auth_ix2");

            entity.HasIndex(e => e.UserId, "apple_wallet_auth_ix3");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthToken).HasColumnName("auth_token");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_at");
            entity.Property(e => e.HitsCount).HasColumnName("hits_count");
            entity.Property(e => e.LastHitAt)
                .HasColumnType("timestamp")
                .HasColumnName("last_hit_at");
            entity.Property(e => e.PassTypeId).HasColumnName("pass_type_id");
            entity.Property(e => e.SerialNumber).HasColumnName("serial_number");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.AppleWalletAuths)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("apple_wallet_auth_fk_user");
        });

        modelBuilder.Entity<AppleWalletLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("apple_wallet_log")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.CreatedAt, "apple_wallet_log_ix_created_at");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_at");
            entity.Property(e => e.Message)
                .HasColumnType("text")
                .HasColumnName("message");
        });

        modelBuilder.Entity<AppleWalletRegistration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("apple_wallet_registration")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AuthId, "apple_wallet_registration_fx_apple_wallet_auth");

            entity.HasIndex(e => new { e.DeviceId, e.PassTypeId }, "apple_wallet_registration_ix1");

            entity.HasIndex(e => new { e.DeviceId, e.SerialNumber }, "apple_wallet_registration_uq1").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthId).HasColumnName("auth_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_at");
            entity.Property(e => e.DeviceId).HasColumnName("device_id");
            entity.Property(e => e.PassTypeId).HasColumnName("pass_type_id");
            entity.Property(e => e.PushToken)
                .HasMaxLength(255)
                .HasColumnName("push_token");
            entity.Property(e => e.SerialNumber).HasColumnName("serial_number");
            entity.Property(e => e.State)
                .HasColumnType("enum('up-to-date','obsolete-client-not-informed','obsolete-client-informed','wrong-push-token')")
                .HasColumnName("state");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Auth).WithMany(p => p.AppleWalletRegistrations)
                .HasForeignKey(d => d.AuthId)
                .HasConstraintName("apple_wallet_registration_fx_apple_wallet_auth");
        });

        modelBuilder.Entity<ApprovedList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("approved_list");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Allowed)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("allowed");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<AsyncTaskCollection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("async_task_collection")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.Type, e.CronId }, "cron");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChunkBase)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("chunk_base");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.CronId).HasColumnName("cron_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.StatusCheckCount).HasColumnName("status_check_count");
            entity.Property(e => e.TaskId).HasColumnName("task_id");
            entity.Property(e => e.Type)
                .HasColumnType("enum('cron','task','job')")
                .HasColumnName("type");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");
        });

        modelBuilder.Entity<AsynchronousTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("asynchronous_task")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AsyncCollectionId, "async_collection_id");

            entity.HasIndex(e => e.Chunk, "asynchronous_task_ix_chunk");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AsyncCollectionId).HasColumnName("async_collection_id");
            entity.Property(e => e.Category)
                .HasMaxLength(250)
                .HasDefaultValueSql("'Generic'")
                .HasColumnName("category");
            entity.Property(e => e.Chunk)
                .HasMaxLength(100)
                .HasComment("Task group")
                .HasColumnName("chunk");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.ErrorMessage)
                .HasColumnType("text")
                .HasColumnName("error_message");
            entity.Property(e => e.LogTrack)
                .HasComment("Log_Track stack on the moment the record was created")
                .HasColumnType("mediumtext")
                .HasColumnName("log_track");
            entity.Property(e => e.Params)
                .HasColumnType("mediumtext")
                .HasColumnName("params");
            entity.Property(e => e.ProcessorType)
                .HasDefaultValueSql("'zf1'")
                .HasColumnType("enum('zf1','ze')")
                .HasColumnName("processor_type");
            entity.Property(e => e.RunAsUser).HasColumnName("run_as_user");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .HasMaxLength(250)
                .HasColumnName("type");
            entity.Property(e => e.UpdatedTime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("updated_time");
        });

        modelBuilder.Entity<Attendance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("attendance");

            entity.HasIndex(e => e.Attendance1, "attendance");

            entity.HasIndex(e => e.ChargedNotAttended, "charged_not_attended");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.HasIndex(e => e.Type, "type");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AttendFrom)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("attend_from");
            entity.Property(e => e.AttendTo)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("attend_to");
            entity.Property(e => e.Attendance1)
                .HasDefaultValueSql("'attended'")
                .HasColumnType("enum('confirmed','unconfirmed','not attending','attended','not present','reserve','registered','waitlisted')")
                .HasColumnName("attendance");
            entity.Property(e => e.ChargedNotAttended).HasColumnName("charged_not_attended");
            entity.Property(e => e.ConfirmationExpiryDate)
                .HasColumnType("timestamp")
                .HasColumnName("confirmation_expiry_date");
            entity.Property(e => e.FromWaitlist).HasColumnName("from_waitlist");
            entity.Property(e => e.IsOnline).HasColumnName("is_online");
            entity.Property(e => e.IsWaitlistMail).HasColumnName("is_waitlist_mail");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.MakeUpDate).HasColumnName("make_up_date");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'trainee'")
                .HasColumnType("enum('trainer','trainee')")
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<BamboraBatchTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bambora_batch_transaction");

            entity.HasIndex(e => new { e.SubmitStatus, e.MerchantId }, "idx_bambora_batch_transaction_submit_status_merchant_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountToken)
                .HasMaxLength(50)
                .HasColumnName("account_token");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.BatchId).HasColumnName("batch_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_date");
            entity.Property(e => e.MerchantId).HasColumnName("merchant_id");
            entity.Property(e => e.SubmitStatus)
                .HasColumnType("enum('pending','submitted','processing')")
                .HasColumnName("submit_status");
            entity.Property(e => e.SubmittedDate)
                .HasColumnType("timestamp")
                .HasColumnName("submitted_date");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
        });

        modelBuilder.Entity<BankAccountNoc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bank_account_noc");

            entity.HasIndex(e => e.NocChangeCode, "nocChangeCode");

            entity.HasIndex(e => e.NocDate, "nocDate");

            entity.HasIndex(e => new { e.NocDate, e.PaymentId }, "nocDate_paymentId");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id)
                .HasComment("id")
                .HasColumnName("id");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("accoun number")
                .HasColumnName("accountNumber");
            entity.Property(e => e.AccountType)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("account type")
                .HasColumnName("accountType");
            entity.Property(e => e.NocChangeCode)
                .HasDefaultValueSql("''")
                .HasComment("change code")
                .HasColumnName("nocChangeCode");
            entity.Property(e => e.NocChangeDescription)
                .HasComment("change description")
                .HasColumnType("text")
                .HasColumnName("nocChangeDescription");
            entity.Property(e => e.NocDate)
                .HasComment("date")
                .HasColumnType("datetime")
                .HasColumnName("nocDate");
            entity.Property(e => e.PaymentId)
                .HasDefaultValueSql("''")
                .HasComment("payment ID")
                .HasColumnName("paymentId");
            entity.Property(e => e.RealAccountNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("real accounting number")
                .HasColumnName("realAccountNumber");
            entity.Property(e => e.RealRoutingNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("real routing number")
                .HasColumnName("realRoutingNumber");
            entity.Property(e => e.RetailerId)
                .HasComment("retailer ID")
                .HasColumnName("retailerId");
            entity.Property(e => e.RoutingNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("routing number")
                .HasColumnName("routingNumber");
            entity.Property(e => e.Updated)
                .HasComment("updated data numbers")
                .HasColumnName("updated");
            entity.Property(e => e.UserBankAccountId)
                .HasComment("user bank account id")
                .HasColumnName("userBankAccountId");
            entity.Property(e => e.UserId)
                .HasComment("user ID")
                .HasColumnName("user_id");
        });

        modelBuilder.Entity<BaseballStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("baseball_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<BasketballStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("basketball_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Batch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("batch");

            entity.HasIndex(e => e.AccgroupEntityId, "accgroup_entity_id");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccgroupEntityId)
                .HasComment("club id")
                .HasColumnName("accgroup_entity_id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Payments)
                .HasPrecision(18, 2)
                .HasColumnName("payments");
            entity.Property(e => e.PostedBy).HasColumnName("posted_by");
            entity.Property(e => e.PostedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("posted_date");
            entity.Property(e => e.Sales)
                .HasPrecision(18, 2)
                .HasColumnName("sales");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'2'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<BillingGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("billing_group");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(9, 2)
                .HasColumnName("amount");
            entity.Property(e => e.AmountType)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("amount_type");
            entity.Property(e => e.BillToAccType).HasColumnName("bill_to_acc_type");
            entity.Property(e => e.BillToAccount).HasColumnName("bill_to_account");
            entity.Property(e => e.BillToType)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("bill_to_type");
            entity.Property(e => e.BillToValue)
                .HasPrecision(9, 2)
                .HasColumnName("bill_to_value");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.DiscountAsStatement).HasColumnName("discount_as_statement");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ProrateOptions).HasColumnName("prorate_options");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<BillingGroupMembership>(entity =>
        {
            entity.HasKey(e => new { e.BillingGroupId, e.GroupId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("billing_group_membership");

            entity.Property(e => e.BillingGroupId).HasColumnName("billing_group_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
        });

        modelBuilder.Entity<BlockedCreditCard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("blocked_credit_cards")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Category)
                .HasDefaultValueSql("'1'")
                .HasColumnType("enum('1','2')")
                .HasColumnName("category");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Error)
                .HasMaxLength(255)
                .HasColumnName("error");
            entity.Property(e => e.Gateway)
                .HasDefaultValueSql("'CardConnect'")
                .HasColumnType("enum('CardConnect','Shift4')")
                .HasColumnName("gateway");
            entity.Property(e => e.GatewayResponse)
                .HasColumnType("mediumtext")
                .HasColumnName("gateway_response");
            entity.Property(e => e.PaymentProcessorUniqueId)
                .HasMaxLength(255)
                .HasColumnName("payment_processor_unique_id");
            entity.Property(e => e.SubmissionAttemptsCount).HasColumnName("submission_attempts_count");
            entity.Property(e => e.SubmissionEndDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("submission_end_date");
            entity.Property(e => e.SubmissionStartDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("submission_start_date");
        });

        modelBuilder.Entity<BlockedCreditCardDeclinedSubmissionLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("blocked_credit_card_declined_submission_logs")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BlockedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("blocked_at");
            entity.Property(e => e.Category)
                .HasDefaultValueSql("'1'")
                .HasColumnType("enum('1','2')")
                .HasColumnName("category");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Error)
                .HasMaxLength(255)
                .HasColumnName("error");
            entity.Property(e => e.Gateway)
                .HasDefaultValueSql("'CardConnect'")
                .HasColumnType("enum('CardConnect','Shift4')")
                .HasColumnName("gateway");
            entity.Property(e => e.GatewayResponse)
                .HasColumnType("mediumtext")
                .HasColumnName("gateway_response");
            entity.Property(e => e.PaymentProcessorUniqueId)
                .HasMaxLength(255)
                .HasColumnName("payment_processor_unique_id");
        });

        modelBuilder.Entity<BookerCustomField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("booker_custom_fields");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BookerFieldId).HasColumnName("booker_field_id");
            entity.Property(e => e.CaLinkedField)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("ca_linked_field");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<BookerFailedOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("booker_failed_orders")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("customer_id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.OrderId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("order_id");
            entity.Property(e => e.OrderInfo)
                .HasColumnType("mediumtext")
                .HasColumnName("order_info");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("reason");
        });

        modelBuilder.Entity<BookerSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("booker_settings")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.Account)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("account");
            entity.Property(e => e.AuthLogin)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("auth_login");
            entity.Property(e => e.AuthPassword)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("auth_password");
            entity.Property(e => e.Clientid)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("clientid");
            entity.Property(e => e.Clientsecret)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("clientsecret");
            entity.Property(e => e.DefaultLocation).HasColumnName("default_location");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.Locationid)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("locationid");
            entity.Property(e => e.Logs).HasColumnName("logs");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Prefix)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("prefix");
            entity.Property(e => e.Tenderid)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("tenderid");
        });

        modelBuilder.Entity<BookerUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("booker_user");

            entity.HasIndex(e => e.BookerCustomerId, "booker_customer_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BookerCustomerGuid)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("booker_customer_guid");
            entity.Property(e => e.BookerCustomerId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("booker_customer_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<BowlingStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("bowling_staff_fields")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<BrivoCardFormat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("brivo_card_format")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CardNumberFieldId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("card_number_field_id");
            entity.Property(e => e.FacilityCodeFieldId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("facility_code_field_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<BrivoGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PRIMARY");

            entity
                .ToTable("brivo_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("''")
                .HasColumnName("group_id");
            entity.Property(e => e.GroupName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("group_name");
        });

        modelBuilder.Entity<Bundle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bundle");

            entity.HasIndex(e => e.AvailableForSale, "available_for_sale");

            entity.HasIndex(e => e.Name, "name");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AvailableForSale).HasColumnName("available_for_sale");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.ExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("expiration_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<BundleAddon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bundle_addon");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.HasIndex(e => e.BundleId, "bundle_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.BundleId).HasColumnName("bundle_id");
            entity.Property(e => e.DelayIntervalAmount).HasColumnName("delay_interval_amount");
            entity.Property(e => e.DelayIntervalBillType)
                .HasColumnType("enum('start_date','start_bill_date')")
                .HasColumnName("delay_interval_bill_type");
            entity.Property(e => e.DelayIntervalType)
                .HasColumnType("enum('day','week','month','date')")
                .HasColumnName("delay_interval_type");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.StartDay).HasColumnName("start_day");
            entity.Property(e => e.StartMonth).HasColumnName("start_month");
        });

        modelBuilder.Entity<BundleMembership>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bundle_membership");

            entity.HasIndex(e => e.BundleId, "bundle_id");

            entity.HasIndex(e => e.MembershipId, "membership_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BundleId).HasColumnName("bundle_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MembershipId).HasColumnName("membership_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
        });

        modelBuilder.Entity<BundlePackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bundle_package");

            entity.HasIndex(e => e.BundleId, "bundle_id");

            entity.HasIndex(e => e.PackageId, "package_id");

            entity.HasIndex(e => e.RateId, "rate_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BundleId).HasColumnName("bundle_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.RateId).HasColumnName("rate_id");
        });

        modelBuilder.Entity<CaDashboard>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.ItemId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("ca_dashboard")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .HasDefaultValueSql("'0'")
                .HasColumnName("item_id");
            entity.Property(e => e.Col1)
                .HasColumnType("text")
                .HasColumnName("col1");
            entity.Property(e => e.Col2)
                .HasColumnType("text")
                .HasColumnName("col2");
            entity.Property(e => e.Col3)
                .HasColumnType("text")
                .HasColumnName("col3");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'Main'")
                .HasColumnType("enum('Shop','Main')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<CaDashboardItem>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.ItemId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("ca_dashboard_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.ItemId)
                .HasMaxLength(32)
                .HasColumnName("item_id");
            entity.Property(e => e.Params)
                .HasColumnType("mediumtext")
                .HasColumnName("params");
        });

        modelBuilder.Entity<CaMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("ca_menu")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.SystemName)
                .HasMaxLength(64)
                .HasDefaultValueSql("''")
                .HasColumnName("system_name");
        });

        modelBuilder.Entity<CaMenuItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("ca_menu_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.MenuId, "fk_ca_menu_item_ca_menu");

            entity.HasIndex(e => e.ParentId, "fk_ca_menu_item_ca_menu_item1");

            entity.HasIndex(e => e.SystemName, "system_name");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.HtmlClass)
                .HasMaxLength(64)
                .HasColumnName("html_class");
            entity.Property(e => e.HtmlId)
                .HasMaxLength(64)
                .HasColumnName("html_id");
            entity.Property(e => e.MenuId).HasColumnName("menu_id");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("name");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.SystemName)
                .HasMaxLength(64)
                .HasDefaultValueSql("''")
                .HasColumnName("system_name");
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .HasColumnName("url");

            entity.HasOne(d => d.Menu).WithMany(p => p.CaMenuItems)
                .HasForeignKey(d => d.MenuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ca_menu_item_ca_menu");
        });

        modelBuilder.Entity<CaMenuItemPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("ca_menu_item_permission", tb => tb.HasComment("Deprecated, delete after CA-4471"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.MenuItemId, "fk_ca_menu_item_permission_ca_menu_item1");

            entity.HasIndex(e => e.GroupId, "fk_ca_menu_item_permission_group1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.MenuItemId).HasColumnName("menu_item_id");
            entity.Property(e => e.PermissionType)
                .HasDefaultValueSql("'allow'")
                .HasColumnType("enum('allow','deny')")
                .HasColumnName("permission_type");
        });

        modelBuilder.Entity<CaacDoor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("caac_doors");

            entity.HasIndex(e => e.DeviceId, "device_id");

            entity.HasIndex(e => e.DoorId, "door_id");

            entity.HasIndex(e => e.Provider, "provider");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthToken)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("auth_token");
            entity.Property(e => e.CheckinLocationId).HasColumnName("checkin_location_id");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("device_id");
            entity.Property(e => e.DoorId).HasColumnName("door_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("error_message");
            entity.Property(e => e.Provider)
                .HasDefaultValueSql("'caac'")
                .HasColumnType("enum('caac','brivo','gantner')")
                .HasColumnName("provider");
            entity.Property(e => e.Settings)
                .HasColumnType("mediumtext")
                .HasColumnName("settings");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'Active'")
                .HasColumnType("enum('Active','Pending','Inactive')")
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<CaacSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("caac_settings");

            entity.HasIndex(e => e.Param, "param");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IntValue).HasColumnName("int_value");
            entity.Property(e => e.Param)
                .HasDefaultValueSql("''")
                .HasColumnName("param");
            entity.Property(e => e.TextValue)
                .HasColumnType("text")
                .HasColumnName("text_value");
            entity.Property(e => e.VarcharValue)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("varchar_value");
        });

        modelBuilder.Entity<CaacUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("caac_users");

            entity.HasIndex(e => e.DoorId, "door_id");

            entity.HasIndex(e => new { e.UserId, e.DoorId }, "user_id").IsUnique();

            entity.Property(e => e.AccountNum)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("account_num");
            entity.Property(e => e.DaySettings)
                .HasColumnType("text")
                .HasColumnName("day_settings");
            entity.Property(e => e.DoorId).HasColumnName("door_id");
            entity.Property(e => e.Errors)
                .HasColumnType("text")
                .HasColumnName("errors");
            entity.Property(e => e.Export)
                .HasDefaultValueSql("'1'")
                .HasColumnName("export");
            entity.Property(e => e.FacilityCode).HasColumnName("facility_code");
            entity.Property(e => e.FirstName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("last_name");
            entity.Property(e => e.LastUpdate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("last_update");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'0'")
                .HasColumnType("enum('0','1')")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Calendar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("calendar");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DefaultComponentId).HasColumnName("default_component_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnType("enum('0','1')")
                .HasColumnName("status");
            entity.Property(e => e.System)
                .HasDefaultValueSql("'0'")
                .HasColumnType("enum('0','1')")
                .HasColumnName("system");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
        });

        modelBuilder.Entity<CardconnectBatchTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cardconnect_batch_transaction");

            entity.HasIndex(e => new { e.SubmitStatus, e.MerchantId }, "idx_cardconnect_batch_transaction_submit_status_merchant_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(255)
                .HasColumnName("account_number");
            entity.Property(e => e.AccountType)
                .HasColumnType("enum('C','S')")
                .HasColumnName("account_type");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.Bankaba)
                .HasMaxLength(255)
                .HasColumnName("bankaba");
            entity.Property(e => e.BatchId).HasColumnName("batch_id");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("country");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_date");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.MerchantId).HasColumnName("merchant_id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.SubmitStatus)
                .HasColumnType("enum('pending','submitted','processing')")
                .HasColumnName("submit_status");
            entity.Property(e => e.SubmittedDate)
                .HasColumnType("timestamp")
                .HasColumnName("submitted_date");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(32)
                .HasColumnName("transaction_id");
        });

        modelBuilder.Entity<CashflowInfrastructureRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("cashflow_infrastructure_rates")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CashflowRateId).HasColumnName("cashflow_rate_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.RateName)
                .HasMaxLength(255)
                .HasColumnName("rate_name");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("category");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");
        });

        modelBuilder.Entity<CcTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cc_transaction");

            entity.HasIndex(e => new { e.Id, e.CreditCardNumber }, "idx_cc_transaction_id_credit_card_number");

            entity.HasIndex(e => e.Time, "time");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CcTransactionInfo).HasColumnName("cc_transaction_info");
            entity.Property(e => e.CreditCardNumber).HasColumnName("credit_card_number");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Result)
                .HasColumnType("enum('OK','FAILED','DECLINED','DUPLICATE','FRAUD','VOIDED')")
                .HasColumnName("result");
            entity.Property(e => e.RetailerId).HasColumnName("retailer_id");
            entity.Property(e => e.Time)
                .HasColumnType("datetime")
                .HasColumnName("time");
            entity.Property(e => e.Total)
                .HasPrecision(12, 2)
                .HasColumnName("total");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("cc_types")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Charge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("charge");

            entity.HasIndex(e => e.AccountingGroupId, "accounting_group_id");

            entity.HasIndex(e => e.BillDate, "bill_date");

            entity.HasIndex(e => e.DateCreated, "date_created");

            entity.HasIndex(e => e.EftId, "eft_id");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => new { e.EntityId, e.IsPosted, e.InvoiceDate }, "entity_posted_date");

            entity.HasIndex(e => e.EventDate, "event_date");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.EventStatus, "event_status");

            entity.HasIndex(e => e.ForeignId, "foreign_id");

            entity.HasIndex(e => e.InvoiceDate, "invoice_date");

            entity.HasIndex(e => e.IsOnline, "is_online");

            entity.HasIndex(e => e.IsPosted, "is_posted");

            entity.HasIndex(e => e.ItemId, "item_id");

            entity.HasIndex(e => e.Mode, "mode");

            entity.HasIndex(e => e.OriginalPrice, "original_price");

            entity.HasIndex(e => e.PosId, "pos_id");

            entity.HasIndex(e => e.PostedDate, "posted_date");

            entity.HasIndex(e => e.ReportDate, "report_date");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.HasIndex(e => new { e.ScheduleId, e.SubjectId, e.Mode }, "schedule_subject_mode");

            entity.HasIndex(e => e.ShiftId, "shift_id");

            entity.HasIndex(e => e.SoldBy, "sold_by");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.SubjectId, "subject_id");

            entity.HasIndex(e => e.UserFor, "user_for");

            entity.HasIndex(e => e.UserHomeClub, "user_home_club");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.HasIndex(e => e.Vendor, "vendor");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.BillDate)
                .HasComment("Data when charge was created, immutable")
                .HasColumnType("datetime")
                .HasColumnName("bill_date");
            entity.Property(e => e.CancellationCharge).HasColumnName("cancellation_charge");
            entity.Property(e => e.CancellationDate)
                .HasColumnType("datetime")
                .HasColumnName("cancellation_date");
            entity.Property(e => e.ClubTaxRate)
                .HasPrecision(9, 4)
                .HasColumnName("club_tax_rate");
            entity.Property(e => e.CostFinal)
                .HasPrecision(12, 2)
                .HasColumnName("cost_final");
            entity.Property(e => e.CostPerUnit)
                .HasPrecision(12, 2)
                .HasColumnName("cost_per_unit");
            entity.Property(e => e.Count)
                .HasPrecision(9, 2)
                .HasColumnName("count");
            entity.Property(e => e.CustomDescription)
                .HasColumnType("text")
                .HasColumnName("custom_description");
            entity.Property(e => e.CustomTime)
                .HasColumnType("datetime")
                .HasColumnName("custom_time");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("date_created");
            entity.Property(e => e.DateUpdated)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("date_updated");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DescriptionDate)
                .HasColumnType("datetime")
                .HasColumnName("description_date");
            entity.Property(e => e.Discount)
                .HasPrecision(12, 2)
                .HasColumnName("discount");
            entity.Property(e => e.DiscountRate)
                .HasPrecision(9, 5)
                .HasColumnName("discount_rate");
            entity.Property(e => e.EftAmount)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("eft_amount");
            entity.Property(e => e.EftId).HasColumnName("eft_id");
            entity.Property(e => e.EntityId)
                .HasComment("club id taken from accounting group id")
                .HasColumnName("entity_id");
            entity.Property(e => e.EventDate).HasColumnName("event_date");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventStatus).HasColumnName("event_status");
            entity.Property(e => e.ExportToQb).HasColumnName("export_to_qb");
            entity.Property(e => e.Finalized).HasColumnName("finalized");
            entity.Property(e => e.ForeignId)
                .HasMaxLength(200)
                .HasDefaultValueSql("'0'")
                .HasColumnName("foreign_id");
            entity.Property(e => e.ForeignText)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("foreign_text");
            entity.Property(e => e.Hide).HasColumnName("hide");
            entity.Property(e => e.InvoiceDate).HasColumnName("invoice_date");
            entity.Property(e => e.InvoiceTime)
                .HasColumnType("datetime")
                .HasColumnName("invoice_time");
            entity.Property(e => e.IsAutomatic)
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_automatic");
            entity.Property(e => e.IsOnline).HasColumnName("is_online");
            entity.Property(e => e.IsPosted).HasColumnName("is_posted");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(32)
                .HasColumnName("item_code");
            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("item_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.Mode)
                .HasDefaultValueSql("'1'")
                .HasColumnName("mode");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.OriginalDescription)
                .HasColumnType("text")
                .HasColumnName("original_description");
            entity.Property(e => e.OriginalPrice)
                .HasPrecision(12, 2)
                .HasComment("Price when charge was created, immutable")
                .HasColumnName("original_price");
            entity.Property(e => e.PaidOff).HasColumnName("paid_off");
            entity.Property(e => e.PlayerNum).HasColumnName("player_num");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.PostedDate).HasColumnName("posted_date");
            entity.Property(e => e.PriceFinal)
                .HasPrecision(12, 2)
                .HasColumnName("price_final");
            entity.Property(e => e.PricePerUnit)
                .HasPrecision(12, 2)
                .HasColumnName("price_per_unit");
            entity.Property(e => e.RefundHistory)
                .HasColumnType("text")
                .HasColumnName("refund_history");
            entity.Property(e => e.Removable).HasColumnName("removable");
            entity.Property(e => e.ReportDate).HasColumnName("report_date");
            entity.Property(e => e.ReturnedCount)
                .HasPrecision(13, 6)
                .HasColumnName("returned_count");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ShiftId).HasColumnName("shift_id");
            entity.Property(e => e.SoldBy).HasColumnName("sold_by");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'unpayed'")
                .HasColumnType("enum('unpayed','payed','voided','refunded','sold')")
                .HasColumnName("status");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.Tax)
                .HasPrecision(9, 3)
                .HasDefaultValueSql("'0.000'")
                .HasColumnName("tax");
            entity.Property(e => e.TaxRate)
                .HasPrecision(9, 4)
                .HasColumnName("tax_rate");
            entity.Property(e => e.TaxRateId).HasColumnName("tax_rate_id");
            entity.Property(e => e.TotalPaid)
                .HasPrecision(12, 2)
                .HasColumnName("total_paid");
            entity.Property(e => e.TotalReversed)
                .HasPrecision(12, 2)
                .HasColumnName("total_reversed");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'usage'")
                .HasColumnType("enum('usage','instruction','organization','membership')")
                .HasColumnName("type");
            entity.Property(e => e.Unreal).HasColumnName("unreal");
            entity.Property(e => e.Used).HasColumnName("used");
            entity.Property(e => e.UserFor).HasColumnName("user_for");
            entity.Property(e => e.UserHomeClub)
                .HasComment("club id taken from user profile")
                .HasColumnName("user_home_club");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Vendor).HasColumnName("vendor");
        });

        modelBuilder.Entity<ChargeDeposit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("charge_deposit");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.Amount)
                .HasColumnType("float(9,3)")
                .HasColumnName("amount");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("date_created");
            entity.Property(e => e.DepositChargeId).HasColumnName("deposit_charge_id");
            entity.Property(e => e.DepositCreditPaymentId).HasColumnName("deposit_credit_payment_id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.IsRemoved).HasColumnName("is_removed");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ChargeDiscount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("charge_discount");

            entity.HasIndex(e => e.ChargeId, "charge_Id");

            entity.HasIndex(e => e.DiscountId, "discount_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(10, 4)
                .HasColumnName("amount");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.DiscountId).HasColumnName("discount_id");
            entity.Property(e => e.DiscountType)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("discount_type");
            entity.Property(e => e.DiscountValue)
                .HasPrecision(10, 4)
                .HasColumnName("discount_value");
            entity.Property(e => e.RowType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("row_type");
        });

        modelBuilder.Entity<ChargePaymentPending>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("charge_payment_pending")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.ChargeId, e.PaymentId }, "charge_id_payment_id");

            entity.HasIndex(e => e.PaymentId, "payment_id");

            entity.Property(e => e.Id)
                .HasComment("ID")
                .HasColumnName("id");
            entity.Property(e => e.ChargeId)
                .HasComment("Charge ID")
                .HasColumnName("charge_id");
            entity.Property(e => e.PaymentId)
                .HasComment("Payment ID")
                .HasColumnName("payment_id");
        });

        modelBuilder.Entity<Check>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("check");

            entity.HasIndex(e => e.AddressId, "address_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.Amount)
                .HasPrecision(12, 2)
                .HasColumnName("amount");
            entity.Property(e => e.CheckDate).HasColumnName("check_date");
            entity.Property(e => e.CheckNumber)
                .HasMaxLength(200)
                .HasColumnName("check_number");
            entity.Property(e => e.City)
                .HasMaxLength(200)
                .HasColumnName("city");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(200)
                .HasColumnName("drivers_license");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(200)
                .HasColumnName("phone_number");
            entity.Property(e => e.State)
                .HasMaxLength(200)
                .HasColumnName("state");
            entity.Property(e => e.StreetAddress)
                .HasMaxLength(200)
                .HasColumnName("street_address");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .HasColumnName("zip");

            entity.HasOne(d => d.Address).WithMany(p => p.Checks)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_address_id_check");
        });

        modelBuilder.Entity<Checkin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("checkin");

            entity.HasIndex(e => e.Blocked, "blocked");

            entity.HasIndex(e => e.BlockedDate, "blocked_date");

            entity.HasIndex(e => e.CaacDoorId, "caac_door_id");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.In, "in");

            entity.HasIndex(e => e.LocationId, "location_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.BlockedDate).HasColumnName("blocked_date");
            entity.Property(e => e.BlockedTime)
                .HasColumnType("datetime")
                .HasColumnName("blocked_time");
            entity.Property(e => e.CaacDoorId).HasColumnName("caac_door_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Denied)
                .HasComment("0 or 1. Based on checkin errors")
                .HasColumnName("denied");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.In)
                .HasColumnType("datetime")
                .HasColumnName("in");
            entity.Property(e => e.LocationId)
                .HasDefaultValueSql("'1'")
                .HasColumnName("location_id");
            entity.Property(e => e.Out)
                .HasColumnType("datetime")
                .HasColumnName("out");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<CheckinError>(entity =>
        {
            entity.HasKey(e => new { e.CheckinId, e.ErrorType })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("checkin_error");

            entity.Property(e => e.CheckinId).HasColumnName("checkin_id");
            entity.Property(e => e.ErrorType).HasColumnName("error_type");
        });

        modelBuilder.Entity<CheckinLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("checkin_location")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.IncludeInCapacityCount, "include_in_capacity_count");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.ExternalId).HasColumnName("external_id");
            entity.Property(e => e.IncludeInCapacityCount)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("include_in_capacity_count");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.Position)
                .HasDefaultValueSql("'external'")
                .HasColumnType("enum('external','internal')")
                .HasColumnName("position");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.System).HasColumnName("system");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<CheckinRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("checkin_rules")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Settings)
                .HasColumnType("text")
                .HasColumnName("settings");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<CheckinUserRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("checkin_user_rules")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Errors)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("errors");
            entity.Property(e => e.LastUpdate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("last_update");
            entity.Property(e => e.Settings)
                .HasColumnType("text")
                .HasColumnName("settings");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ChildcareBillingRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("childcare_billing_rule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.BillingRate)
                .HasDefaultValueSql("'age'")
                .HasColumnType("enum('age','dependent')")
                .HasColumnName("billing_rate");
            entity.Property(e => e.BillingType)
                .HasDefaultValueSql("'Unlimited'")
                .HasColumnType("enum('Unlimited','Per Day','Per Reservation','Per Hour')")
                .HasColumnName("billing_type");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Rounding)
                .HasDefaultValueSql("'Exact Time'")
                .HasColumnType("enum('Round Up','Exact Time','Round Down')")
                .HasColumnName("rounding");
            entity.Property(e => e.RoundingIncrement)
                .HasDefaultValueSql("'15'")
                .HasColumnName("rounding_increment");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("statement_description");
        });

        modelBuilder.Entity<ChildcareBillingRuleGroup>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.BillingRuleId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("childcare_billing_rule_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.BillingRuleId).HasColumnName("billing_rule_id");
        });

        modelBuilder.Entity<ChildcareBillingRulePrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("childcare_billing_rule_price");

            entity.HasIndex(e => e.ChildcareBillingRuleId, "FK_childcare_billing_rule_price_childcare_billing_rule");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AgeFrom)
                .HasPrecision(6, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("age_from");
            entity.Property(e => e.AgeTo)
                .HasPrecision(6, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("age_to");
            entity.Property(e => e.ChildcareBillingRuleId).HasColumnName("childcare_billing_rule_id");
            entity.Property(e => e.Rate)
                .HasPrecision(10, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("rate");

            entity.HasOne(d => d.ChildcareBillingRule).WithMany(p => p.ChildcareBillingRulePrices)
                .HasForeignKey(d => d.ChildcareBillingRuleId)
                .HasConstraintName("FK_childcare_billing_rule_price_childcare_billing_rule");
        });

        modelBuilder.Entity<ChildcareGuardianLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("childcare_guardian_location");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<ChildcareReservationRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("childcare_reservation_rule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AgeFrom)
                .HasPrecision(6, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("age_from");
            entity.Property(e => e.AgeTo)
                .HasPrecision(6, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("age_to");
            entity.Property(e => e.DailyTimeLimit).HasColumnName("daily_time_limit");
            entity.Property(e => e.DailyTimeLimitMin).HasColumnName("daily_time_limit_min");
            entity.Property(e => e.MaxPendingReservations).HasColumnName("max_pending_reservations");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ReservationLimit).HasColumnName("reservation_limit");
            entity.Property(e => e.ReservationLimitMin).HasColumnName("reservation_limit_min");
            entity.Property(e => e.ReserveDaysAdvance).HasColumnName("reserve_days_advance");
            entity.Property(e => e.ReserveDaysAdvanceFrom).HasColumnName("reserve_days_advance_from");
            entity.Property(e => e.RuleType)
                .HasDefaultValueSql("'regular'")
                .HasColumnType("enum('regular','online')")
                .HasColumnName("rule_type");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("statement_description");
        });

        modelBuilder.Entity<ChildcareReservationRuleGroup>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.ReservationRuleId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("childcare_reservation_rule_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ReservationRuleId, "FK_childcare_reservation_rule_group_childcare_reservation_rule");

            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.ReservationRuleId).HasColumnName("reservation_rule_id");

            entity.HasOne(d => d.ReservationRule).WithMany(p => p.ChildcareReservationRuleGroups)
                .HasForeignKey(d => d.ReservationRuleId)
                .HasConstraintName("FK_childcare_reservation_rule_group_childcare_reservation_rule");
        });

        modelBuilder.Entity<ChildcareResource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("childcare_resource")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Capacity).HasColumnName("capacity");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.MonthFrom).HasColumnName("month_from");
            entity.Property(e => e.MonthTo).HasColumnName("month_to");
            entity.Property(e => e.Order)
                .HasDefaultValueSql("'1'")
                .HasColumnName("order");
            entity.Property(e => e.StaffChildRatio).HasColumnName("staff_child_ratio");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.YearFrom).HasColumnName("year_from");
            entity.Property(e => e.YearTo).HasColumnName("year_to");
        });

        modelBuilder.Entity<ChildcareSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("childcare_schedule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CancellationBy).HasColumnName("cancellation_by");
            entity.Property(e => e.CancellationDatetime)
                .HasColumnType("datetime")
                .HasColumnName("cancellation_datetime");
            entity.Property(e => e.DependentLevel).HasColumnName("dependent_level");
            entity.Property(e => e.DropoffGuardianId).HasColumnName("dropoff_guardian_id");
            entity.Property(e => e.DropoffStaffId).HasColumnName("dropoff_staff_id");
            entity.Property(e => e.GuardianLocation).HasColumnName("guardian_location");
            entity.Property(e => e.OnlineReservation).HasColumnName("online_reservation");
            entity.Property(e => e.PickupGuardianId).HasColumnName("pickup_guardian_id");
            entity.Property(e => e.PickupStaffId).HasColumnName("pickup_staff_id");
            entity.Property(e => e.ReservationDatetime)
                .HasColumnType("datetime")
                .HasColumnName("reservation_datetime");
            entity.Property(e => e.ReservationTimeIn)
                .HasColumnType("time")
                .HasColumnName("reservation_time_in");
            entity.Property(e => e.ReservationTimeOut)
                .HasColumnType("time")
                .HasColumnName("reservation_time_out");
            entity.Property(e => e.ReservedBy).HasColumnName("reserved_by");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'reserve'")
                .HasColumnType("enum('reserve','dropoff','pickup','overdue','canceled')")
                .HasColumnName("status");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<ClimbingStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("climbing_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CloverStation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clover_stations");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.MerchantId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("merchant_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Prefix)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("prefix");
            entity.Property(e => e.Token)
                .HasMaxLength(255)
                .HasColumnName("token");
        });

        modelBuilder.Entity<Club>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("club");

            entity.HasIndex(e => e.Title, "title").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Abbr)
                .HasMaxLength(100)
                .HasColumnName("abbr");
            entity.Property(e => e.AccountingSystem)
                .HasDefaultValueSql("'other'")
                .HasColumnType("enum('other','mas90','sage50','quickbooks','shelby5')")
                .HasColumnName("accounting_system");
            entity.Property(e => e.AccountingType)
                .HasDefaultValueSql("'cash'")
                .HasColumnType("enum('cash','accrual','modified_accrual')")
                .HasColumnName("accounting_type");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.Address2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("address2");
            entity.Property(e => e.AllowCreditIct)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("allow_credit_ict");
            entity.Property(e => e.ApprovalPeriod).HasColumnName("approval_period");
            entity.Property(e => e.BalanceDate)
                .HasDefaultValueSql("'last_eft'")
                .HasColumnType("enum('current','custom','last_eft')")
                .HasColumnName("balance_date");
            entity.Property(e => e.BalanceDateCustomDay)
                .HasDefaultValueSql("'32'")
                .HasColumnName("balance_date_custom_day");
            entity.Property(e => e.BalanceDateCustomMonth)
                .HasDefaultValueSql("'current'")
                .HasColumnType("enum('current','previous')")
                .HasColumnName("balance_date_custom_month");
            entity.Property(e => e.BatchNo).HasColumnName("batch_no");
            entity.Property(e => e.BigLogo)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("big_logo");
            entity.Property(e => e.BillGuestFeeType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("bill_guest_fee_type");
            entity.Property(e => e.BillingRates)
                .HasColumnType("text")
                .HasColumnName("billing_rates");
            entity.Property(e => e.CancellationPeriod)
                .HasDefaultValueSql("'24'")
                .HasColumnName("cancellation_period");
            entity.Property(e => e.CheckinResetDatetime)
                .HasColumnType("datetime")
                .HasColumnName("checkin_reset_datetime");
            entity.Property(e => e.CheckinTakePhoto).HasColumnName("checkin_take_photo");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.CloseShiftAfter)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("close_shift_after");
            entity.Property(e => e.CloseShiftAuto)
                .HasDefaultValueSql("'1'")
                .HasColumnName("close_shift_auto");
            entity.Property(e => e.CollectionsSettings)
                .HasComment("Club Collection Settings")
                .HasColumnType("text")
                .HasColumnName("collections_settings");
            entity.Property(e => e.Copyright)
                .HasColumnType("text")
                .HasColumnName("copyright");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasDefaultValueSql("'US'")
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.CourtGridStep)
                .HasDefaultValueSql("'30'")
                .HasColumnName("court_grid_step");
            entity.Property(e => e.CustomReceiptText)
                .HasColumnType("text")
                .HasColumnName("custom_receipt_text");
            entity.Property(e => e.DataCleansingParams)
                .HasColumnType("text")
                .HasColumnName("data_cleansing_params");
            entity.Property(e => e.DefaultComponentId)
                .HasDefaultValueSql("'2'")
                .HasColumnName("default_component_id");
            entity.Property(e => e.DefaultEntitiesForStaff)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("default_entities_for_staff");
            entity.Property(e => e.DepositsEnabled)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("deposits_enabled");
            entity.Property(e => e.DepositsLiabilityGroup)
                .HasColumnType("text")
                .HasColumnName("deposits_liability_group");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.DueDates)
                .HasColumnType("text")
                .HasColumnName("due_dates");
            entity.Property(e => e.Eft).HasColumnName("eft");
            entity.Property(e => e.EftPaymentOption)
                .HasDefaultValueSql("'home_club'")
                .HasColumnType("enum('home_club','accounting_group')")
                .HasColumnName("eft_payment_option");
            entity.Property(e => e.EmailReceiptSubjectLine)
                .HasMaxLength(255)
                .HasDefaultValueSql("'Here''s your e-Receipt from [club_name]'")
                .HasColumnName("email_receipt_subject_line");
            entity.Property(e => e.EmailReceiptTemplate).HasColumnName("email_receipt_template");
            entity.Property(e => e.EmailVerification)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("email_verification");
            entity.Property(e => e.Emails)
                .HasColumnType("text")
                .HasColumnName("emails");
            entity.Property(e => e.EventGuestFee)
                .HasDefaultValueSql("'never'")
                .HasColumnType("enum('never','differ_price','always')")
                .HasColumnName("event_guest_fee");
            entity.Property(e => e.ExpPackageRecognition)
                .HasColumnType("text")
                .HasColumnName("exp_package_recognition");
            entity.Property(e => e.ExternalPosParams)
                .HasColumnType("text")
                .HasColumnName("external_pos_params");
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasColumnName("fax");
            entity.Property(e => e.FreeReservationPeriod)
                .HasPrecision(9, 2)
                .HasColumnName("free_reservation_period");
            entity.Property(e => e.GoogleAnalyticsCode)
                .HasColumnType("text")
                .HasColumnName("google_analytics_code");
            entity.Property(e => e.GracePeriod).HasColumnName("grace_period");
            entity.Property(e => e.GroupEventNonmemberPriceType)
                .HasDefaultValueSql("'special'")
                .HasColumnType("enum('special','separate')")
                .HasColumnName("group_event_nonmember_price_type");
            entity.Property(e => e.GroupRevenueMapping)
                .HasDefaultValueSql("'by_home_club'")
                .HasColumnType("enum('by_home_club','by_location_of_sale')")
                .HasColumnName("group_revenue_mapping");
            entity.Property(e => e.GuestFee)
                .HasPrecision(9, 2)
                .HasColumnName("guest_fee");
            entity.Property(e => e.GuestFeeAccountingGroup).HasColumnName("guest_fee_accounting_group");
            entity.Property(e => e.GuestFeeDescription)
                .HasMaxLength(255)
                .HasColumnName("guest_fee_description");
            entity.Property(e => e.GuestFeeGroups)
                .HasColumnType("text")
                .HasColumnName("guest_fee_groups");
            entity.Property(e => e.GuestFeeParams)
                .HasColumnType("text")
                .HasColumnName("guest_fee_params");
            entity.Property(e => e.GuestFeeStatuses)
                .HasColumnType("text")
                .HasColumnName("guest_fee_statuses");
            entity.Property(e => e.GuestFeeType)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("guest_fee_type");
            entity.Property(e => e.GuestPassAutomaticSettings)
                .HasColumnType("text")
                .HasColumnName("guest_pass_automatic_settings");
            entity.Property(e => e.GuestUsageReport)
                .HasDefaultValueSql("'2'")
                .HasColumnName("guest_usage_report");
            entity.Property(e => e.GuestVisitsAllowance)
                .HasDefaultValueSql("'10'")
                .HasColumnName("guest_visits_allowance");
            entity.Property(e => e.IctType)
                .HasDefaultValueSql("'ict_charge'")
                .HasColumnType("enum('ict_no_transfer','ict_payment','ict_charge')")
                .HasColumnName("ict_type");
            entity.Property(e => e.IncludeCreditPaymentsOnStatement).HasColumnName("include_credit_payments_on_statement");
            entity.Property(e => e.IncludePendingChargesInPastDue)
                .HasDefaultValueSql("'0'")
                .HasColumnName("include_pending_charges_in_past_due");
            entity.Property(e => e.Invoice)
                .HasColumnType("text")
                .HasColumnName("invoice");
            entity.Property(e => e.LastLetter)
                .HasColumnType("text")
                .HasColumnName("last_letter");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.Latitude)
                .HasPrecision(11, 7)
                .HasColumnName("latitude");
            entity.Property(e => e.Lesson45minute).HasColumnName("lesson45minute");
            entity.Property(e => e.Longitude)
                .HasPrecision(11, 7)
                .HasColumnName("longitude");
            entity.Property(e => e.MailAddress)
                .HasMaxLength(255)
                .HasColumnName("mail_address");
            entity.Property(e => e.MailAddress2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("mail_address2");
            entity.Property(e => e.MailCity)
                .HasMaxLength(255)
                .HasColumnName("mail_city");
            entity.Property(e => e.MailCountry)
                .HasMaxLength(2)
                .HasDefaultValueSql("'US'")
                .IsFixedLength()
                .HasColumnName("mail_country");
            entity.Property(e => e.MailState)
                .HasMaxLength(255)
                .HasColumnName("mail_state");
            entity.Property(e => e.MailToPrimary)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("mail_to_primary");
            entity.Property(e => e.MailZip)
                .HasMaxLength(255)
                .HasColumnName("mail_zip");
            entity.Property(e => e.Mas90Version)
                .HasDefaultValueSql("'extended'")
                .HasColumnType("enum('extended','free')")
                .HasColumnName("mas90_version");
            entity.Property(e => e.MemberStatementType)
                .HasDefaultValueSql("'standard'")
                .HasColumnType("enum('standard','eft_only','view_all_unpaid')")
                .HasColumnName("member_statement_type");
            entity.Property(e => e.MembershipPackDiscount)
                .HasPrecision(9, 2)
                .HasColumnName("membership_pack_discount");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.MonthlyContractDate)
                .HasDefaultValueSql("'full_months'")
                .HasColumnType("enum('full_months','exact_duration')")
                .HasColumnName("monthly_contract_date");
            entity.Property(e => e.OnlineRegSettings)
                .HasComment("Online Registration Settings")
                .HasColumnType("text")
                .HasColumnName("online_reg_settings");
            entity.Property(e => e.ParkDistrictGroup).HasColumnName("park_district_group");
            entity.Property(e => e.Payroll)
                .HasColumnType("text")
                .HasColumnName("payroll");
            entity.Property(e => e.PayrollDeadline).HasColumnName("payroll_deadline");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasColumnName("phone");
            entity.Property(e => e.PncAchParams)
                .HasColumnType("text")
                .HasColumnName("pnc_ach_params");
            entity.Property(e => e.Prefix)
                .HasMaxLength(10)
                .HasColumnName("prefix");
            entity.Property(e => e.PrimaryActivityPackage).HasColumnName("primary_activity_package");
            entity.Property(e => e.PrintParams)
                .HasColumnType("text")
                .HasColumnName("print_params");
            entity.Property(e => e.ReceiptCopies).HasColumnName("receipt_copies");
            entity.Property(e => e.RefererCredit)
                .HasColumnType("float(9,2)")
                .HasColumnName("referer_credit");
            entity.Property(e => e.RestapiParams)
                .HasColumnType("text")
                .HasColumnName("restapi_params");
            entity.Property(e => e.SecondarySignature)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("secondary_signature");
            entity.Property(e => e.SellSeasonTime)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("sell_season_time");
            entity.Property(e => e.SepLessonCourtFee).HasColumnName("sep_lesson_court_fee");
            entity.Property(e => e.SeparateChashCheck).HasColumnName("separate_chash_check");
            entity.Property(e => e.Shift4LocalUtgUrl)
                .HasComment("Shift4 Local UTG url")
                .HasColumnType("text")
                .HasColumnName("shift4_local_utg_url");
            entity.Property(e => e.ShowSubAccGroupsInQb).HasColumnName("show_sub_acc_groups_in_qb");
            entity.Property(e => e.SmallLogo)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("small_logo");
            entity.Property(e => e.SmsTimeFrom)
                .HasDefaultValueSql("'09:00:00'")
                .HasColumnType("time")
                .HasColumnName("sms_time_from");
            entity.Property(e => e.SplashScreenImg)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("splash_screen_img");
            entity.Property(e => e.StaffMemberSignature).HasColumnName("staff_member_signature");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasColumnName("state");
            entity.Property(e => e.Tax)
                .HasPrecision(9, 4)
                .HasDefaultValueSql("'5.0000'")
                .HasColumnName("tax");
            entity.Property(e => e.TempGlobaladminPass)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("temp_globaladmin_pass");
            entity.Property(e => e.TimeZone)
                .HasMaxLength(40)
                .HasDefaultValueSql("'America/Chicago'")
                .HasColumnName("time_zone");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.VerifyCc).HasColumnName("verify_cc");
            entity.Property(e => e.WebApiParams)
                .HasColumnType("text")
                .HasColumnName("web_api_params");
            entity.Property(e => e.Zip)
                .HasMaxLength(255)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<ClubAccountShift4>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("club_account_shift4", tb => tb.HasComment("Club account shift4"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id)
                .HasComment("id")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("Access token")
                .HasColumnName("access_token");
            entity.Property(e => e.Authtoken)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("Authorization token")
                .HasColumnName("authtoken");
            entity.Property(e => e.CcRetailer)
                .HasComment("Retailer")
                .HasColumnName("cc_retailer");
            entity.Property(e => e.ClientGuid)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("Client GUID")
                .HasColumnName("client_guid");
            entity.Property(e => e.TokenSerialNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("Token Serial Number")
                .HasColumnName("token_serial_number");
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("Type")
                .HasColumnName("type");
        });

        modelBuilder.Entity<ClubGatewayInformation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("club_gateway_information")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.MerchantRetailerId, "merchant_retailer_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_date");
            entity.Property(e => e.Gateway)
                .HasMaxLength(255)
                .HasColumnName("gateway");
            entity.Property(e => e.GatewayHost)
                .HasColumnType("text")
                .HasColumnName("gateway_host");
            entity.Property(e => e.GatewayInfo)
                .HasColumnType("text")
                .HasColumnName("gateway_info");
            entity.Property(e => e.MerchantRetailerId).HasColumnName("merchant_retailer_id");
        });

        modelBuilder.Entity<ComplimentaryRoundCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("complimentary_round_category")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Component>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("component");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.HasIndex(e => e.SchedulingTool, "scheduling_tool");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Author)
                .HasMaxLength(200)
                .HasColumnName("author");
            entity.Property(e => e.BillingRates)
                .HasColumnType("text")
                .HasColumnName("billing_rates");
            entity.Property(e => e.CampSettings)
                .HasColumnType("text")
                .HasColumnName("camp_settings");
            entity.Property(e => e.CreationDate)
                .HasMaxLength(200)
                .HasColumnName("creation_date");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.InstallationDate).HasColumnName("installation_date");
            entity.Property(e => e.Modules)
                .HasColumnType("text")
                .HasColumnName("modules");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Payroll)
                .HasColumnType("text")
                .HasColumnName("payroll");
            entity.Property(e => e.Permanent)
                .HasColumnType("enum('true','false')")
                .HasColumnName("permanent");
            entity.Property(e => e.SchedulingTool).HasColumnName("scheduling_tool");
            entity.Property(e => e.Settings)
                .HasColumnType("mediumtext")
                .HasColumnName("settings");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.Uninstall)
                .HasColumnType("text")
                .HasColumnName("uninstall");
            entity.Property(e => e.Version)
                .HasMaxLength(50)
                .HasColumnName("version");
        });

        modelBuilder.Entity<ComponentClub>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("component_club");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ContentItemId).HasColumnName("content_item_id");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<ComponentClubPrivilege>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("component_club_privilege")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentClubName, "component_club_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClassRegistrationSelectShow).HasColumnName("class_registration_select_show");
            entity.Property(e => e.ClubServiceSelectShow).HasColumnName("club_service_select_show");
            entity.Property(e => e.ComponentClubName).HasColumnName("component_club_name");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ReportPlayerRatingClasses).HasColumnName("report_player_rating_classes");
        });

        modelBuilder.Entity<ComponentEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("component_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.EntityId, e.ComponentId }, "entity_component_unique").IsUnique();

            entity.HasIndex(e => e.ComponentId, "fk_component_entity_component_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");

            entity.HasOne(d => d.Component).WithMany(p => p.ComponentEntities)
                .HasForeignKey(d => d.ComponentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_component_entity_component_id");

            entity.HasOne(d => d.Entity).WithMany(p => p.ComponentEntities)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_component_entity_entity_id");
        });

        modelBuilder.Entity<ComponentResource>(entity =>
        {
            entity.HasKey(e => e.ComponentResourceId).HasName("PRIMARY");

            entity.ToTable("component_resource");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.Property(e => e.ComponentResourceId).HasColumnName("component_resource_id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<ComponentSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("component_setting");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.Name, "name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArrayValue)
                .HasColumnType("mediumtext")
                .HasColumnName("array_value");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.FloatValue).HasColumnName("float_value");
            entity.Property(e => e.IntValue).HasColumnName("int_value");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.StringValue)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("string_value");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .HasColumnName("type");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<Config>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("config")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.Module, e.Name }, "module_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Access)
                .HasColumnType("enum('user','admin','system')")
                .HasColumnName("access");
            entity.Property(e => e.Label)
                .HasMaxLength(250)
                .HasColumnName("label");
            entity.Property(e => e.Module)
                .HasMaxLength(250)
                .HasColumnName("module");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasColumnType("enum('bool','int','float','string')")
                .HasColumnName("type");
            entity.Property(e => e.Value)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("value");
        });

        modelBuilder.Entity<ContactUsEmailConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("contact_us_email_config")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.ToEmail)
                .HasMaxLength(200)
                .HasColumnName("to_email");
        });

        modelBuilder.Entity<ContactUsSubject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("contact_us_subject")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Subject)
                .HasMaxLength(255)
                .HasColumnName("subject");
        });

        modelBuilder.Entity<Content>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("content");

            entity.HasIndex(e => e.Title, "title").HasAnnotation("MySql:IndexPrefixLength", new[] { 15 });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Frontpage).HasColumnName("frontpage");
            entity.Property(e => e.Fulltext)
                .HasColumnType("text")
                .HasColumnName("fulltext");
            entity.Property(e => e.Introtext)
                .HasColumnType("text")
                .HasColumnName("introtext");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.PreviewImage)
                .HasMaxLength(1000)
                .HasColumnName("preview_image");
            entity.Property(e => e.Published).HasColumnName("published");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.Updated)
                .HasColumnType("datetime")
                .HasColumnName("updated");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("contract")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ContractTermsId, "contract_terms_id");

            entity.HasIndex(e => e.Enabled, "enabled");

            entity.HasIndex(e => e.EndDate, "end_Date");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.IsQueue, "is_queue");

            entity.HasIndex(e => e.StartDate, "start_date");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.HasIndex(e => new { e.UserId, e.GroupId }, "user_id_group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveMonths).HasColumnName("active_months");
            entity.Property(e => e.AuditStatus)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("audit_status");
            entity.Property(e => e.CloseDate)
                .HasColumnType("datetime")
                .HasColumnName("close_date");
            entity.Property(e => e.ContractFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("contract_fee");
            entity.Property(e => e.ContractTermsId).HasColumnName("contract_terms_id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.DocumentId).HasColumnName("document_id");
            entity.Property(e => e.Enabled)
                .HasDefaultValueSql("'1'")
                .HasColumnName("enabled");
            entity.Property(e => e.EndDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("end_date");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(12, 2)
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.Expired).HasColumnName("expired");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsQueue).HasColumnName("is_queue");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.MonthCount).HasColumnName("month_count");
            entity.Property(e => e.OriginalFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("original_fee");
            entity.Property(e => e.RenewalOption).HasColumnName("renewal_option");
            entity.Property(e => e.RenewalTerm).HasColumnName("renewal_term");
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.VersionType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("version_type");

            entity.HasOne(d => d.ContractTerms).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.ContractTermsId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_contract_contract_terms_id");
        });

        modelBuilder.Entity<ContractContainer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("contract_container")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FrontPageTerms)
                .HasColumnType("mediumtext")
                .HasColumnName("front_page_terms");
            entity.Property(e => e.FrontPageTermsTitle)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("front_page_terms_title");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.Name)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<ContractContainerTerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("contract_container_terms")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ContractContainerId, "fk_contract_container_terms_contract_container_id");

            entity.HasIndex(e => e.ContractTermsId, "fk_contract_container_terms_contract_terms_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Category)
                .HasColumnType("enum('membership','package','add-on')")
                .HasColumnName("category");
            entity.Property(e => e.ContractContainerId).HasColumnName("contract_container_id");
            entity.Property(e => e.ContractTermsId).HasColumnName("contract_terms_id");
            entity.Property(e => e.InsertPageBreak).HasColumnName("insert_page_break");
            entity.Property(e => e.TermsOrder).HasColumnName("terms_order");

            entity.HasOne(d => d.ContractContainer).WithMany(p => p.ContractContainerTerms)
                .HasForeignKey(d => d.ContractContainerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_contract_container_terms_contract_container_id");

            entity.HasOne(d => d.ContractTerms).WithMany(p => p.ContractContainerTerms)
                .HasForeignKey(d => d.ContractTermsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_contract_container_terms_contract_terms_id");
        });

        modelBuilder.Entity<ContractTerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("contract_terms")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Category)
                .HasDefaultValueSql("'membership'")
                .HasColumnType("enum('general','membership','package','add-on','corporate','eft-billing','cancel','event')")
                .HasColumnName("category");
            entity.Property(e => e.EftAuth)
                .HasColumnType("text")
                .HasColumnName("eft_auth");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.TermsConditions)
                .HasColumnType("text")
                .HasColumnName("terms_conditions");
            entity.Property(e => e.WaiverRelease)
                .HasColumnType("text")
                .HasColumnName("waiver_release");
        });

        modelBuilder.Entity<ContractTermsBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("contract_terms_block")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ContractTermsId, "contract_terms_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddPageBreak).HasColumnName("add_page_break");
            entity.Property(e => e.ContractTermsId).HasColumnName("contract_terms_id");
            entity.Property(e => e.NeedSignature).HasColumnName("need_signature");
            entity.Property(e => e.ShowTotals).HasColumnName("show_totals");
            entity.Property(e => e.Tab)
                .HasDefaultValueSql("'new-contract'")
                .HasColumnType("enum('edit-contract','new-contract','amendment','cancellation')")
                .HasColumnName("tab");
            entity.Property(e => e.Text)
                .HasColumnType("mediumtext")
                .HasColumnName("text");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'text'")
                .HasColumnType("enum('price_detailed','price','text','personal_information')")
                .HasColumnName("type");

            entity.HasOne(d => d.ContractTerms).WithMany(p => p.ContractTermsBlocks)
                .HasForeignKey(d => d.ContractTermsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_contract_terms_id");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("country");

            entity.HasIndex(e => e.Alpha2, "ix_alpha2");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Alpha2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("alpha2");
            entity.Property(e => e.Alpha3)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("alpha3");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Numeric).HasColumnName("numeric");
            entity.Property(e => e.ShortName)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("short_name");
        });

        modelBuilder.Entity<CourtLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("court_location");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.CourtLocationTypeId).HasColumnName("court_location_type_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.IsTermsRequired)
                .HasComment("Must be equal to 1 if Terms & Conditions are required to be accepted during booking.")
                .HasColumnName("is_terms_required");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.TermsText)
                .HasComment("Terms & Conditions to be displayed and accepted during booking.")
                .HasColumnType("text")
                .HasColumnName("terms_text");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<CourtLocationComponent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("court_location_component")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.CourtLocationId, e.ComponentId }, "court_location_id_component_id").IsUnique();

            entity.HasIndex(e => e.ComponentId, "fk_clc_component");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.CourtLocationId).HasColumnName("court_location_id");

            entity.HasOne(d => d.Component).WithMany(p => p.CourtLocationComponents)
                .HasForeignKey(d => d.ComponentId)
                .HasConstraintName("fk_clc_component");

            entity.HasOne(d => d.CourtLocation).WithMany(p => p.CourtLocationComponents)
                .HasForeignKey(d => d.CourtLocationId)
                .HasConstraintName("fk_clc_location");
        });

        modelBuilder.Entity<CourtLocationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("court_location_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CourtSale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("court_sale");

            entity.HasIndex(e => e.ReservationDate, "reservation_date");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Owner).HasColumnName("owner");
            entity.Property(e => e.ReservationDate).HasColumnName("reservation_date");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.Status)
                .HasColumnType("enum('sale','sold','canceled')")
                .HasColumnName("status");
            entity.Property(e => e.TimeFrom)
                .HasMaxLength(10)
                .HasColumnName("time_from");
            entity.Property(e => e.TimeTo)
                .HasMaxLength(10)
                .HasColumnName("time_to");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("updated");
        });

        modelBuilder.Entity<CourtType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("court_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CreditCardDeclineCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("credit_card_decline_codes");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Category)
                .HasColumnType("enum('1','2')")
                .HasColumnName("category");
            entity.Property(e => e.Code)
                .HasMaxLength(4)
                .HasColumnName("code");
            entity.Property(e => e.Gateway)
                .HasDefaultValueSql("'CardConnect'")
                .HasColumnType("enum('CardConnect','Shift4')")
                .HasColumnName("gateway");
            entity.Property(e => e.Processor)
                .HasMaxLength(10)
                .HasColumnName("processor");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .HasColumnName("status");
            entity.Property(e => e.Text)
                .HasMaxLength(45)
                .HasColumnName("text");
        });

        modelBuilder.Entity<CreditCardGatewayLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("credit_card_gateway_log")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Endpoint, "endpoint");

            entity.HasIndex(e => e.Hash, "hash");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClientId)
                .HasMaxLength(255)
                .HasColumnName("client_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Endpoint)
                .HasDefaultValueSql("''")
                .HasColumnName("endpoint");
            entity.Property(e => e.Hash)
                .HasMaxLength(32)
                .HasColumnName("hash");
            entity.Property(e => e.Ip)
                .HasMaxLength(50)
                .HasColumnName("ip");
            entity.Property(e => e.Request)
                .HasComment("json of input data")
                .HasColumnType("mediumtext")
                .HasColumnName("request");
            entity.Property(e => e.Response)
                .HasComment("json of output data")
                .HasColumnType("mediumtext")
                .HasColumnName("response");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CronScript>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cron_scripts");

            entity.HasIndex(e => e.Ordernum, "ordernum");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AutoStatus)
                .HasDefaultValueSql("'enabled'")
                .HasColumnType("enum('enabled','disabled')")
                .HasColumnName("auto_status");
            entity.Property(e => e.BlockedTimeFrom)
                .HasColumnType("time")
                .HasColumnName("blocked_time_from");
            entity.Property(e => e.BlockedTimeTo)
                .HasColumnType("time")
                .HasColumnName("blocked_time_to");
            entity.Property(e => e.CronStatus)
                .HasDefaultValueSql("'enabled'")
                .HasColumnType("enum('enabled','disabled')")
                .HasColumnName("cron_status");
            entity.Property(e => e.DayAt).HasColumnName("day_at");
            entity.Property(e => e.ExecutionTimeout)
                .HasDefaultValueSql("'20:00:00'")
                .HasColumnType("time")
                .HasColumnName("execution_timeout");
            entity.Property(e => e.Frequency).HasColumnName("frequency");
            entity.Property(e => e.Function)
                .HasMaxLength(250)
                .HasColumnName("function");
            entity.Property(e => e.GroupName)
                .HasMaxLength(30)
                .HasColumnName("group_name");
            entity.Property(e => e.IsCritical).HasColumnName("is_critical");
            entity.Property(e => e.LastCronDate).HasColumnName("last_cron_date");
            entity.Property(e => e.LastCronFinishDate).HasColumnName("last_cron_finish_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LaunchAt)
                .HasColumnType("datetime")
                .HasColumnName("launch_at");
            entity.Property(e => e.MailTemplateId).HasColumnName("mail_template_id");
            entity.Property(e => e.ManualStatus)
                .HasDefaultValueSql("'enabled'")
                .HasColumnType("enum('enabled','disabled')")
                .HasColumnName("manual_status");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.MonthAt).HasColumnName("month_at");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasColumnName("name");
            entity.Property(e => e.Ordernum).HasColumnName("ordernum");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.ProcessorType)
                .HasDefaultValueSql("'zf1'")
                .HasColumnType("enum('zf1','ze')")
                .HasColumnName("processor_type");
            entity.Property(e => e.QueuedTime)
                .HasColumnType("datetime")
                .HasColumnName("queued_time");
            entity.Property(e => e.RunAfterScheduled)
                .HasComment("0 - before, 1 - after")
                .HasColumnName("run_after_scheduled");
            entity.Property(e => e.ScheduleType)
                .HasDefaultValueSql("'frequency'")
                .HasColumnType("enum('frequency','every','once','multiple','daily','dates')")
                .HasColumnName("schedule_type");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TimeToRun)
                .HasDefaultValueSql("'01:00:00'")
                .HasColumnType("time")
                .HasColumnName("time_to_run");
        });

        modelBuilder.Entity<CronScriptsSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cron_scripts_schedule");

            entity.HasIndex(e => e.LaunchDate, "launch_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BillingDay).HasColumnName("billing_day");
            entity.Property(e => e.BillingTillDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("billing_till_date");
            entity.Property(e => e.CronId).HasColumnName("cron_id");
            entity.Property(e => e.ErrorMsg)
                .HasMaxLength(255)
                .HasColumnName("error_msg");
            entity.Property(e => e.ExecutionParams)
                .HasColumnType("text")
                .HasColumnName("execution_params");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LaunchDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("launch_date");
            entity.Property(e => e.LaunchTime)
                .HasColumnType("time")
                .HasColumnName("launch_time");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Params)
                .HasColumnType("mediumtext")
                .HasColumnName("params");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CrossfitStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("crossfit_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CryotherapyStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cryotherapy_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<DanceStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dance_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<DayspaStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dayspa_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<DcsEmailRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("dcs_email_records")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasComment("created datetime")
                .HasColumnType("timestamp")
                .HasColumnName("created_date");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("email address")
                .HasColumnName("email_address");
            entity.Property(e => e.ExternalMemberId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("External member ID")
                .HasColumnName("external_member_id");
            entity.Property(e => e.ResponseCode)
                .HasMaxLength(10)
                .HasDefaultValueSql("''")
                .HasComment("from XX01-15, XD01-03, XM01-03, XS01-07")
                .HasColumnName("response_code");
            entity.Property(e => e.ResponseDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("response code description")
                .HasColumnName("response_description");
            entity.Property(e => e.Success)
                .HasComment("1=>success or 0=>failure")
                .HasColumnName("success");
            entity.Property(e => e.UserId)
                .HasComment("User ID")
                .HasColumnName("user_id");
        });

        modelBuilder.Entity<DeclineFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("decline_fee");

            entity.HasIndex(e => e.ChargeId, "charge_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.CountOfAttempts).HasColumnName("count_of_attempts");
            entity.Property(e => e.LastAttemptDate).HasColumnName("last_attempt_date");
        });

        modelBuilder.Entity<DefaultStaffRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("default_staff_rates")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date_created");
            entity.Property(e => e.Default).HasColumnName("default");
            entity.Property(e => e.LessonType)
                .HasColumnType("text")
                .HasColumnName("lesson_type");
            entity.Property(e => e.Level)
                .HasColumnType("text")
                .HasColumnName("level");
            entity.Property(e => e.Membership)
                .HasColumnType("text")
                .HasColumnName("membership");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.ParentRule).HasColumnName("parent_rule");
            entity.Property(e => e.PrimeRates)
                .HasColumnType("mediumtext")
                .HasColumnName("prime_rates");
            entity.Property(e => e.Rates)
                .HasColumnType("mediumtext")
                .HasColumnName("rates");
            entity.Property(e => e.RatesPlayersCount).HasColumnName("rates_players_count");
            entity.Property(e => e.Season)
                .HasColumnType("text")
                .HasColumnName("season");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("department");

            entity.HasIndex(e => new { e.Id, e.ComponentId }, "idx_department_id_component_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.StaffRateTable)
                .HasMaxLength(50)
                .HasColumnName("staff_rate_table");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");
        });

        modelBuilder.Entity<Dict>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("dict");

            entity.HasIndex(e => e.Id, "id").IsUnique();

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Value)
                .HasMaxLength(255)
                .HasColumnName("value");
        });

        modelBuilder.Entity<Discount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("discount");

            entity.HasIndex(e => e.Barcode, "barcode").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasColumnType("float(18,2)")
                .HasColumnName("amount");
            entity.Property(e => e.Barcode)
                .HasMaxLength(32)
                .HasColumnName("barcode");
            entity.Property(e => e.Descripiton)
                .HasColumnType("text")
                .HasColumnName("descripiton");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'enabled'")
                .HasColumnType("enum('enabled','disabled')")
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'1'")
                .HasColumnName("type");
        });

        modelBuilder.Entity<DiscountCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("discount_code")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Code, "code").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.Code)
                .HasDefaultValueSql("''")
                .HasColumnName("code");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("effective_date");
            entity.Property(e => e.ExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("expiration_date");
            entity.Property(e => e.IsAutomatic).HasColumnName("is_automatic");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Reusable).HasColumnName("reusable");
        });

        modelBuilder.Entity<DiscountCodeDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("discount_code_detail")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DiscountCodeId, "fk_discount_code_detail_discount_code_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdditionalDiscountMethod)
                .HasColumnType("enum('percent','dollar')")
                .HasColumnName("additional_discount_method");
            entity.Property(e => e.AdditionalDiscountValue)
                .HasPrecision(8, 2)
                .HasColumnName("additional_discount_value");
            entity.Property(e => e.CycleDiscountCount).HasColumnName("cycle_discount_count");
            entity.Property(e => e.CycleDiscountMethod)
                .HasColumnType("enum('percent','dollar')")
                .HasColumnName("cycle_discount_method");
            entity.Property(e => e.CycleDiscountValue)
                .HasPrecision(8, 2)
                .HasColumnName("cycle_discount_value");
            entity.Property(e => e.DiscountCodeId).HasColumnName("discount_code_id");
            entity.Property(e => e.EnrollmentDiscountMethod)
                .HasColumnType("enum('percent','dollar')")
                .HasColumnName("enrollment_discount_method");
            entity.Property(e => e.EnrollmentDiscountValue)
                .HasPrecision(8, 2)
                .HasColumnName("enrollment_discount_value");

            entity.HasOne(d => d.DiscountCode).WithMany(p => p.DiscountCodeDetails)
                .HasForeignKey(d => d.DiscountCodeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_discount_code_detail_discount_code_id");
        });

        modelBuilder.Entity<DiscountCodeDetailGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("discount_code_detail_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DiscountCodeDetailId, "fk_discount_code_detail_group_discount_code_detail_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DiscountCodeDetailId).HasColumnName("discount_code_detail_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");

            entity.HasOne(d => d.DiscountCodeDetail).WithMany(p => p.DiscountCodeDetailGroups)
                .HasForeignKey(d => d.DiscountCodeDetailId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_discount_code_detail_group_discount_code_detail_id");
        });

        modelBuilder.Entity<DiscountCodeUsage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("discount_code_usage")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DiscountCodeId, "fk_discount_code_usage_discount_code_id");

            entity.HasIndex(e => e.UserGroupSubscriptionId, "fk_discount_code_usage_user_group_subscription_id");

            entity.HasIndex(e => e.UserId, "fk_discount_code_usage_user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DiscountCodeId).HasColumnName("discount_code_id");
            entity.Property(e => e.UserGroupSubscriptionId).HasColumnName("user_group_subscription_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.DiscountCode).WithMany(p => p.DiscountCodeUsages)
                .HasForeignKey(d => d.DiscountCodeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_discount_code_usage_discount_code_id");

            entity.HasOne(d => d.UserGroupSubscription).WithMany(p => p.DiscountCodeUsages)
                .HasForeignKey(d => d.UserGroupSubscriptionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_discount_code_usage_user_group_subscription_id");

            entity.HasOne(d => d.User).WithMany(p => p.DiscountCodeUsages)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_discount_code_usage_user_id");
        });

        modelBuilder.Entity<DiscountCodeUsageDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("discount_code_usage_detail")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DiscountCodeUsageId, "fk_discount_code_usage_detail_discount_code_usage_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdditionalDiscountMethod)
                .HasColumnType("enum('percent','dollar')")
                .HasColumnName("additional_discount_method");
            entity.Property(e => e.AdditionalDiscountValue)
                .HasPrecision(8, 2)
                .HasColumnName("additional_discount_value");
            entity.Property(e => e.CycleDiscountCount).HasColumnName("cycle_discount_count");
            entity.Property(e => e.CycleDiscountMethod)
                .HasColumnType("enum('percent','dollar')")
                .HasColumnName("cycle_discount_method");
            entity.Property(e => e.CycleDiscountValue)
                .HasPrecision(8, 2)
                .HasColumnName("cycle_discount_value");
            entity.Property(e => e.DiscountCodeUsageId).HasColumnName("discount_code_usage_id");
            entity.Property(e => e.EnrollmentDiscountMethod)
                .HasColumnType("enum('percent','dollar')")
                .HasColumnName("enrollment_discount_method");
            entity.Property(e => e.EnrollmentDiscountValue)
                .HasPrecision(8, 2)
                .HasColumnName("enrollment_discount_value");

            entity.HasOne(d => d.DiscountCodeUsage).WithMany(p => p.DiscountCodeUsageDetails)
                .HasForeignKey(d => d.DiscountCodeUsageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_discount_code_usage_detail_discount_code_usage_id");
        });

        modelBuilder.Entity<EftPendingTotal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("eft_pending_totals")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UniqueHash, "unique_hash").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(12, 2)
                .HasColumnName("amount");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.IsProcessing).HasColumnName("is_processing");
            entity.Property(e => e.PayerId).HasColumnName("payer_id");
            entity.Property(e => e.RetailerId).HasColumnName("retailer_id");
            entity.Property(e => e.UniqueHash)
                .HasMaxLength(32)
                .HasColumnName("unique_hash");
            entity.Property(e => e.UserContractId).HasColumnName("user_contract_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<EndOfDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("end_of_day");

            entity.HasIndex(e => e.PosId, "pos_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Cash)
                .HasColumnType("float(18,2)")
                .HasColumnName("cash");
            entity.Property(e => e.Check)
                .HasColumnType("float(18,2)")
                .HasColumnName("check");
            entity.Property(e => e.ClosedBy).HasColumnName("closed_by");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DateClosed)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_closed");
            entity.Property(e => e.OpenedBy).HasColumnName("opened_by");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.TimeClosed)
                .HasDefaultValueSql("'23:59:59'")
                .HasColumnType("time")
                .HasColumnName("time_closed");
            entity.Property(e => e.TimeOpened)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("time_opened");
        });

        modelBuilder.Entity<EquipmentCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("equipment_categories");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DueTime)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("due_time");
            entity.Property(e => e.DueType)
                .HasDefaultValueSql("'sameday'")
                .HasColumnType("enum('sameday','daysfromcheckout')")
                .HasColumnName("due_type");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.InAmountDays).HasColumnName("in_amount_days");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UseDefaults).HasColumnName("use_defaults");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<EquipmentCheckin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("equipment_checkin");

            entity.HasIndex(e => e.ItemId, "item_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CheckIn)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("check_in");
            entity.Property(e => e.CheckOut)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("check_out");
            entity.Property(e => e.ItemId).HasColumnName("item_id");
            entity.Property(e => e.LateFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("late_fee");
            entity.Property(e => e.Price)
                .HasColumnType("float(18,2)")
                .HasColumnName("price");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'out'")
                .HasColumnType("enum('in','out')")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<EquipmentItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("equipment_items");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.Barcode)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("barcode");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.CheckoutOption)
                .HasDefaultValueSql("'single'")
                .HasColumnType("enum('single','multi')")
                .HasColumnName("checkout_option");
            entity.Property(e => e.LateFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("late_fee");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("float(18,2)")
                .HasColumnName("price");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'active'")
                .HasColumnType("enum('active','inactive','damaged','lost')")
                .HasColumnName("status");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("event");

            entity.HasIndex(e => e.AgeRestrictionFrom, "age_restriction_from");

            entity.HasIndex(e => e.AgeRestrictionTo, "age_restriction_to");

            entity.HasIndex(e => new { e.AllMembership, e.Archived }, "all_membership__archived");

            entity.HasIndex(e => new { e.AllRating, e.Archived }, "all_rating__archived");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.DateDisplayAsOf, "date_display_as_of");

            entity.HasIndex(e => e.DateOpenAsOf, "date_open_as_of");

            entity.HasIndex(e => new { e.EventTypeId, e.Archived }, "event_type_id__archived");

            entity.HasIndex(e => new { e.EventTypeId, e.ComponentId, e.SelectPro }, "event_type_id__component_id__select_pro");

            entity.HasIndex(e => e.ServiceId, "fk_event_service");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.InstructorId, "instructor_id");

            entity.HasIndex(e => e.OnlineReg, "online_reg");

            entity.HasIndex(e => e.Order, "order");

            entity.HasIndex(e => e.OrganizerId, "organizer_id");

            entity.HasIndex(e => e.OwnerId, "owner_id");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => new { e.SeasonId, e.EventTypeId, e.Archived, e.ComponentId }, "season_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.AccLiabilityGroupId).HasColumnName("acc_liability_group_id");
            entity.Property(e => e.AddPlayerWaitlist)
                .HasDefaultValueSql("'auto'")
                .HasColumnType("enum('auto','manual')")
                .HasColumnName("add_player_waitlist");
            entity.Property(e => e.Age)
                .HasMaxLength(16)
                .HasColumnName("age");
            entity.Property(e => e.AgeRestrictionFrom)
                .HasPrecision(6, 2)
                .HasColumnName("age_restriction_from");
            entity.Property(e => e.AgeRestrictionTo)
                .HasPrecision(6, 2)
                .HasColumnName("age_restriction_to");
            entity.Property(e => e.AgeTo).HasColumnName("age_to");
            entity.Property(e => e.AllMembership).HasColumnName("all_membership");
            entity.Property(e => e.AllRating).HasColumnName("all_rating");
            entity.Property(e => e.AllowedEntities)
                .HasMaxLength(255)
                .HasColumnName("allowed_entities");
            entity.Property(e => e.ApiScheduleVisible)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasComment("0 - hidden, 1 - visible")
                .HasColumnName("api_schedule_visible");
            entity.Property(e => e.Archived).HasColumnName("archived");
            entity.Property(e => e.AutobillMembershipId).HasColumnName("autobill_membership_id");
            entity.Property(e => e.CanUnregOnline).HasColumnName("can_unreg_online");
            entity.Property(e => e.Capacity).HasColumnName("capacity");
            entity.Property(e => e.ClassNumber)
                .HasMaxLength(16)
                .HasDefaultValueSql("''")
                .HasColumnName("class_number");
            entity.Property(e => e.Comission)
                .HasPrecision(9, 2)
                .HasColumnName("comission");
            entity.Property(e => e.ComissionFormula)
                .HasMaxLength(255)
                .HasDefaultValueSql("'comission * count'")
                .HasColumnName("comission_formula");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("comments");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ConfirmationPeriod)
                .HasDefaultValueSql("'days'")
                .HasColumnType("enum('days','hours','minutes')")
                .HasColumnName("confirmation_period");
            entity.Property(e => e.ConfirmationValue).HasColumnName("confirmation_value");
            entity.Property(e => e.DateDisplayAsOf)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date_display_as_of");
            entity.Property(e => e.DateOpenAsOf)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date_open_as_of");
            entity.Property(e => e.DeferredRevenue).HasColumnName("deferred_revenue");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EarlyFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("early_fee");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.Fee)
                .HasPrecision(9, 2)
                .HasColumnName("fee");
            entity.Property(e => e.FeeType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("fee_type");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GuestEarlyFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("guest_early_fee");
            entity.Property(e => e.GuestFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("guest_fee");
            entity.Property(e => e.GuestFeeAccountingGroupId).HasColumnName("guest_fee_accounting_group_id");
            entity.Property(e => e.GuestPremiumFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("guest_premium_fee");
            entity.Property(e => e.IconFileName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("icon_file_name");
            entity.Property(e => e.IconName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("icon_name");
            entity.Property(e => e.IconType)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("icon_type");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.IsPersonsMaximum)
                .HasDefaultValueSql("'0'")
                .HasColumnName("is_persons_maximum");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.LateUnregFeeAccGroup).HasColumnName("late_unreg_fee_acc_group");
            entity.Property(e => e.LateUnregFeeAmount)
                .HasPrecision(12, 2)
                .HasColumnName("late_unreg_fee_amount");
            entity.Property(e => e.LateUnregFeeType)
                .HasDefaultValueSql("'disabled'")
                .HasColumnType("enum('disabled','class_fee','custom_fee')")
                .HasColumnName("late_unreg_fee_type");
            entity.Property(e => e.LateUnregWindowPeriod)
                .HasDefaultValueSql("'hours'")
                .HasColumnType("enum('hours','minutes')")
                .HasColumnName("late_unreg_window_period");
            entity.Property(e => e.LateUnregWindowValue).HasColumnName("late_unreg_window_value");
            entity.Property(e => e.LeagueId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("league_id");
            entity.Property(e => e.Level)
                .HasMaxLength(16)
                .HasColumnName("level");
            entity.Property(e => e.LinkedDate).HasColumnName("linked_date");
            entity.Property(e => e.LinkedEventId).HasColumnName("linked_event_id");
            entity.Property(e => e.LinkedSessionId).HasColumnName("linked_session_id");
            entity.Property(e => e.LinkedType)
                .HasMaxLength(30)
                .HasColumnName("linked_type");
            entity.Property(e => e.Location)
                .HasMaxLength(250)
                .HasColumnName("location");
            entity.Property(e => e.LockWaitlistPeriod)
                .HasDefaultValueSql("'days'")
                .HasColumnType("enum('days','hours','minutes')")
                .HasColumnName("lock_waitlist_period");
            entity.Property(e => e.LockWaitlistValue).HasColumnName("lock_waitlist_value");
            entity.Property(e => e.MaxPayrollPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("max_payroll_percent");
            entity.Property(e => e.MembersOnly)
                .HasDefaultValueSql("'0'")
                .HasColumnName("members_only");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.NoShowFeeAccGroup).HasColumnName("no_show_fee_acc_group");
            entity.Property(e => e.NoShowFeeAllowed).HasColumnName("no_show_fee_allowed");
            entity.Property(e => e.NoShowFeeAmount)
                .HasPrecision(12, 2)
                .HasColumnName("no_show_fee_amount");
            entity.Property(e => e.OnlineReg).HasColumnName("online_reg");
            entity.Property(e => e.OnlineRegClosePeriod)
                .HasDefaultValueSql("'days'")
                .HasColumnType("enum('days','hours','minutes')")
                .HasColumnName("online_reg_close_period");
            entity.Property(e => e.OnlineRegCloseValue).HasColumnName("online_reg_close_value");
            entity.Property(e => e.OnlineRegOpenPeriod)
                .HasDefaultValueSql("'days'")
                .HasColumnType("enum('days','hours','minutes')")
                .HasColumnName("online_reg_open_period");
            entity.Property(e => e.OnlineRegOpenValue).HasColumnName("online_reg_open_value");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.OrganizerId).HasColumnName("organizer_id");
            entity.Property(e => e.OwnerId).HasColumnName("owner_id");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentName)
                .HasMaxLength(255)
                .HasColumnName("parent_name");
            entity.Property(e => e.PerTimeGuestFee)
                .HasPrecision(18, 2)
                .HasColumnName("per_time_guest_fee");
            entity.Property(e => e.PersonsMaximum).HasColumnName("persons_maximum");
            entity.Property(e => e.PremiumFee)
                .HasPrecision(9, 2)
                .HasColumnName("premium_fee");
            entity.Property(e => e.PriorityRegistrationClasses).HasColumnName("priority_registration_classes");
            entity.Property(e => e.PriorityRegistrationCloseDate)
                .HasColumnType("datetime")
                .HasColumnName("priority_registration_close_date");
            entity.Property(e => e.PriorityRegistrationOpenDate)
                .HasColumnType("datetime")
                .HasColumnName("priority_registration_open_date");
            entity.Property(e => e.PriorityRegistrationStatus).HasColumnName("priority_registration_status");
            entity.Property(e => e.ProFee)
                .HasPrecision(9, 2)
                .HasColumnName("pro_fee");
            entity.Property(e => e.ProgramName)
                .HasMaxLength(255)
                .HasColumnName("program_name");
            entity.Property(e => e.RegistrationFee)
                .HasPrecision(9, 2)
                .HasColumnName("registration_fee");
            entity.Property(e => e.RegistrationFeeAccGroup).HasColumnName("registration_fee_acc_group");
            entity.Property(e => e.RegistrationGuestFee)
                .HasPrecision(9, 2)
                .HasColumnName("registration_guest_fee");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.SeasonId).HasColumnName("season_id");
            entity.Property(e => e.SelectPro)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("select_pro");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.ShowOnGrid)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("show_on_grid");
            entity.Property(e => e.SplitToHours).HasColumnName("split_to_hours");
            entity.Property(e => e.SuspendOnlineReg).HasColumnName("suspend_online_reg");
            entity.Property(e => e.SuspendOnlineRegDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("suspend_online_reg_date");
            entity.Property(e => e.Tbd).HasColumnName("tbd");
            entity.Property(e => e.TotalEarlyGuestFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("total_early_guest_fee");
            entity.Property(e => e.TotalGuestFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("total_guest_fee");
            entity.Property(e => e.WaitlistMaximum)
                .HasDefaultValueSql("'0'")
                .HasColumnName("waitlist_maximum");

            entity.HasOne(d => d.Service).WithMany(p => p.Events)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_event_service");
        });

        modelBuilder.Entity<EventCalendar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("event_calendar");

            entity.HasIndex(e => e.CalendarId, "calendar_id");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CalendarId).HasColumnName("calendar_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
        });

        modelBuilder.Entity<EventCloneHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("event_clone_history")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ClonedBy, "cloned_by");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClonedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("cloned_at");
            entity.Property(e => e.ClonedBy).HasColumnName("cloned_by");
            entity.Property(e => e.EventId).HasColumnName("event_id");
        });

        modelBuilder.Entity<EventCustomDate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("event_custom_dates")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DateOpenAsOf, "date_open_as_of");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateOpenAsOf)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date_open_as_of");
            entity.Property(e => e.EventId).HasColumnName("event_id");
        });

        modelBuilder.Entity<EventCustomFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("event_custom_fees");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActivityFee)
                .HasPrecision(10, 2)
                .HasColumnName("activity_fee");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PerTimeFee)
                .HasPrecision(10, 2)
                .HasColumnName("per_time_fee");
            entity.Property(e => e.RegistrationFee)
                .HasPrecision(10, 2)
                .HasColumnName("registration_fee");
            entity.Property(e => e.SessionFee)
                .HasPrecision(10, 2)
                .HasColumnName("session_fee");

            entity.HasOne(d => d.Event).WithMany(p => p.EventCustomFees)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("event_custom_fees_ibfk_1");
        });

        modelBuilder.Entity<EventCustomParam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("event_custom_params");

            entity.HasIndex(e => new { e.EventId, e.Type }, "event_id_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateOpenAsOf)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date_open_as_of");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.OnlineRegOpenPeriod)
                .HasDefaultValueSql("'days'")
                .HasColumnType("enum('days','hours','minutes')")
                .HasColumnName("online_reg_open_period");
            entity.Property(e => e.OnlineRegOpenValue)
                .HasDefaultValueSql("'0'")
                .HasColumnName("online_reg_open_value");
            entity.Property(e => e.Type)
                .HasColumnType("enum('date_open_as_of','open_reg_period')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<EventCustomRegistrationField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("event_custom_registration_field");

            entity.HasIndex(e => e.UserCustomFieldsId, "event_custom_registration_field_ibfk_1");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.IsRequired).HasColumnName("is_required");
            entity.Property(e => e.UserCustomFieldsId).HasColumnName("user_custom_fields_id");

            entity.HasOne(d => d.UserCustomFields).WithMany(p => p.EventCustomRegistrationFields)
                .HasForeignKey(d => d.UserCustomFieldsId)
                .HasConstraintName("event_custom_registration_field_ibfk_1");
        });

        modelBuilder.Entity<EventDirector>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("event_director");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<EventDiscountGroupsDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("event_discount_groups_days")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.SessionId, "session_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DayId).HasColumnName("day_id");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
        });

        modelBuilder.Entity<EventGroup>(entity =>
        {
            entity.HasKey(e => new { e.EventDayId, e.EventGroupId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("event_group");

            entity.Property(e => e.EventDayId).HasColumnName("event_day_id");
            entity.Property(e => e.EventGroupId).HasColumnName("event_group_id");
        });

        modelBuilder.Entity<EventPrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("event_prices");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Price)
                .HasPrecision(9, 2)
                .HasColumnName("price");
            entity.Property(e => e.PriceType)
                .HasMaxLength(150)
                .HasDefaultValueSql("'0'")
                .HasColumnName("price_type");
        });

        modelBuilder.Entity<EventPro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("event_pros")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => new { e.EventId, e.StaffId }, "event_id_2").IsUnique();

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.PayrollRates)
                .HasColumnType("text")
                .HasColumnName("payroll_rates");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<EventType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("event_type");

            entity.HasIndex(e => e.Name, "name").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<EventTypeColor>(entity =>
        {
            entity.HasKey(e => e.EventTypeId).HasName("PRIMARY");

            entity
                .ToTable("event_type_color")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.EventTypeId)
                .ValueGeneratedNever()
                .HasColumnName("event_type_id");
            entity.Property(e => e.BackgroundColor)
                .HasMaxLength(7)
                .HasColumnName("background_color");
            entity.Property(e => e.SecondaryColor)
                .HasMaxLength(7)
                .HasColumnName("secondary_color");
            entity.Property(e => e.TextColor)
                .HasMaxLength(7)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<ExternalPosLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("external_pos_location")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Prefix)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("prefix");
            entity.Property(e => e.TaxAccountingGroupId).HasColumnName("tax_accounting_group_id");
            entity.Property(e => e.TaxDescription)
                .HasMaxLength(200)
                .HasDefaultValueSql("''")
                .HasColumnName("tax_description");
            entity.Property(e => e.TaxPrefix)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("tax_prefix");
            entity.Property(e => e.TipAccountingGroupId).HasColumnName("tip_accounting_group_id");
            entity.Property(e => e.TipDescription)
                .HasMaxLength(200)
                .HasDefaultValueSql("''")
                .HasColumnName("tip_description");
            entity.Property(e => e.TipPrefix)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("tip_prefix");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<FacilityStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("facility_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Faq>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("faq");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Fulltext)
                .HasColumnType("text")
                .HasColumnName("fulltext");
            entity.Property(e => e.Introtext)
                .HasColumnType("text")
                .HasColumnName("introtext");
            entity.Property(e => e.Title)
                .HasMaxLength(250)
                .HasColumnName("title");
        });

        modelBuilder.Entity<Feature>(entity =>
        {
            entity.HasKey(e => new { e.AccgroupEntityId, e.Name })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("features")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.AccgroupEntityId).HasColumnName("accgroup_entity_id");
            entity.Property(e => e.Name)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<FirstAchQueue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("first_ach_queue")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Error)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("error");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ReasonCode)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("reason_code");
            entity.Property(e => e.ReasonTitle)
                .HasMaxLength(255)
                .HasColumnName("reason_title");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Time)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("time");
            entity.Property(e => e.TransId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("trans_id");
            entity.Property(e => e.TransStatus)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("trans_status");
        });

        modelBuilder.Entity<FitnessStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fitness_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<FitnessStaffSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("fitness_staff_schedule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.TimeFrom)
                .HasColumnType("time")
                .HasColumnName("time_from");
            entity.Property(e => e.TimeTo)
                .HasColumnType("time")
                .HasColumnName("time_to");
        });

        modelBuilder.Entity<FormConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("form_configuration", tb => tb.HasComment("Table for forms configuration data"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Fields)
                .HasColumnType("text")
                .HasColumnName("fields");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<FrontDeskClerkField>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");

            entity
                .ToTable("front_desk_clerk_fields")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasComment("User ID")
                .HasColumnName("user_id");
            entity.Property(e => e.AllowedPos)
                .HasColumnType("mediumtext")
                .HasColumnName("allowed_pos");
            entity.Property(e => e.CanRefund)
                .HasComment("Can do refunds")
                .HasColumnName("can_refund");
            entity.Property(e => e.PosPin)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("pos_pin");
        });

        modelBuilder.Entity<FstudioStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fstudio_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<GeneralDeclineFeeAmount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("general_decline_fee_amount")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.ScheduleType, e.DayOfMonth, e.EntityId, e.AccGroupId, e.PaymentMethodId }, "type_day_entity_group_method_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.DayOfMonth).HasColumnName("day_of_month");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.FeeAmount)
                .HasPrecision(9, 2)
                .HasColumnName("fee_amount");
            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.ScheduleType)
                .HasColumnType("enum('daily','dates','multiple')")
                .HasColumnName("schedule_type");
        });

        modelBuilder.Entity<GeneralDeclineFeeExcludedAchCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("general_decline_fee_excluded_ach_code")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.ScheduleType, e.GatewayType, e.DayOfMonth, e.ExcludedCode }, "type_day_code_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DayOfMonth).HasColumnName("day_of_month");
            entity.Property(e => e.ExcludedCode)
                .HasMaxLength(30)
                .HasColumnName("excluded_code");
            entity.Property(e => e.GatewayType).HasColumnName("gateway_type");
            entity.Property(e => e.ScheduleType)
                .HasColumnType("enum('daily','dates','multiple')")
                .HasColumnName("schedule_type");
        });

        modelBuilder.Entity<GiftCertificate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("gift_certificate");

            entity.HasIndex(e => new { e.Amount, e.OriginalAmount }, "amount_original_amount");

            entity.HasIndex(e => e.Buyer, "buyer");

            entity.HasIndex(e => e.CanActivate, "can_activate");

            entity.HasIndex(e => e.CanExpire, "can_expire");

            entity.HasIndex(e => e.Code, "code").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.ExpirationDate, "expiration_date");

            entity.HasIndex(e => new { e.ExpirationDurationCount, e.ExpirationDurationType }, "expiration_duration_count_expiration_duration_type");

            entity.HasIndex(e => e.CertificateTypeId, "gc_gift_certificate_type");

            entity.HasIndex(e => e.Receiver, "receiver");

            entity.HasIndex(e => e.RecognizedDate, "recognized_date");

            entity.HasIndex(e => e.SharedWithLinked, "shared_with_linked");

            entity.HasIndex(e => e.SoldBy, "sold_by");

            entity.HasIndex(e => new { e.Status, e.LiabilityAccountingGroupId }, "status_liability_accounting_group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Activated)
                .HasColumnType("datetime")
                .HasColumnName("activated");
            entity.Property(e => e.Amount)
                .HasPrecision(9, 3)
                .HasColumnName("amount");
            entity.Property(e => e.Buyer).HasColumnName("buyer");
            entity.Property(e => e.CanActivate).HasColumnName("can_activate");
            entity.Property(e => e.CanExpire).HasColumnName("can_expire");
            entity.Property(e => e.CertificateNote)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("certificate_note");
            entity.Property(e => e.CertificateTypeId).HasColumnName("certificate_type_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.ExpirationDurationCount).HasColumnName("expiration_duration_count");
            entity.Property(e => e.ExpirationDurationType)
                .HasColumnType("enum('days','weeks','months')")
                .HasColumnName("expiration_duration_type");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LastUsedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_used_date");
            entity.Property(e => e.LiabilityAccountingGroupId)
                .HasComment("Liability Accounting Group Id")
                .HasColumnName("liability_accounting_group_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.OriginalAmount)
                .HasPrecision(9, 3)
                .HasColumnName("original_amount");
            entity.Property(e => e.Pin).HasColumnName("pin");
            entity.Property(e => e.Portal).HasColumnName("portal");
            entity.Property(e => e.Receiver).HasColumnName("receiver");
            entity.Property(e => e.RecognizedDate).HasColumnName("recognized_date");
            entity.Property(e => e.RefundedAmount)
                .HasPrecision(12, 2)
                .HasColumnName("refunded_amount");
            entity.Property(e => e.SharedWithLinked).HasColumnName("shared_with_linked");
            entity.Property(e => e.SoldBy)
                .HasComment("Sold By")
                .HasColumnName("sold_by");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'3'")
                .HasColumnName("status");

            entity.HasOne(d => d.CertificateType).WithMany(p => p.GiftCertificates)
                .HasForeignKey(d => d.CertificateTypeId)
                .HasConstraintName("gc_gift_certificate_type");
        });

        modelBuilder.Entity<GiftCertificateAccountingGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("gift_certificate_accounting_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.CertificateTypeId, "gcag_certificate_type_id__gift_certificate_type");

            entity.HasIndex(e => e.EntityId, "gcag_entity_id__accgroup_entity");

            entity.HasIndex(e => e.LiabilityAccountingGroupId, "gcag_liability__accounting_group");

            entity.Property(e => e.Id)
                .HasComment("Id")
                .HasColumnName("id");
            entity.Property(e => e.CertificateTypeId)
                .HasComment("Certificate Type Id")
                .HasColumnName("certificate_type_id");
            entity.Property(e => e.EntityId)
                .HasDefaultValueSql("'0'")
                .HasComment("Accgroup Entity Id")
                .HasColumnName("entity_id");
            entity.Property(e => e.LiabilityAccountingGroupId)
                .HasComment("Liability Accounting Group Id")
                .HasColumnName("liability_accounting_group_id");

            entity.HasOne(d => d.CertificateType).WithMany(p => p.GiftCertificateAccountingGroups)
                .HasForeignKey(d => d.CertificateTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("gcag_certificate_type_id__gift_certificate_type");

            entity.HasOne(d => d.Entity).WithMany(p => p.GiftCertificateAccountingGroups)
                .HasForeignKey(d => d.EntityId)
                .HasConstraintName("gcag_entity_id__accgroup_entity");

            entity.HasOne(d => d.LiabilityAccountingGroup).WithMany(p => p.GiftCertificateAccountingGroups)
                .HasForeignKey(d => d.LiabilityAccountingGroupId)
                .HasConstraintName("gcag_liability__accounting_group");
        });

        modelBuilder.Entity<GiftCertificateEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("gift_certificate_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.CertificateTypeId, "entity_certificate_type_id_idx");

            entity.HasIndex(e => e.EntityId, "gce_entity_id__accgroup_entity");

            entity.Property(e => e.Id)
                .HasComment("Id")
                .HasColumnName("id");
            entity.Property(e => e.CertificateTypeId)
                .HasComment("Certificate Type Id")
                .HasColumnName("certificate_type_id");
            entity.Property(e => e.EntityId)
                .HasComment("Accgroup Entity Id")
                .HasColumnName("entity_id");

            entity.HasOne(d => d.CertificateType).WithMany(p => p.GiftCertificateEntities)
                .HasForeignKey(d => d.CertificateTypeId)
                .HasConstraintName("entity_certificate_type_id_idx");

            entity.HasOne(d => d.Entity).WithMany(p => p.GiftCertificateEntities)
                .HasForeignKey(d => d.EntityId)
                .HasConstraintName("gce_entity_id__accgroup_entity");
        });

        modelBuilder.Entity<GiftCertificateRestriction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("gift_certificate_restrictions")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AccountingGroupId, "restrictions_accgroup_idx");

            entity.HasIndex(e => e.CertificateTypeId, "restrictions_certificate_type_id_idx");

            entity.Property(e => e.Id)
                .HasComment("Id")
                .HasColumnName("id");
            entity.Property(e => e.AccountingGroupId)
                .HasComment("Accounting Group Id")
                .HasColumnName("accounting_group_id");
            entity.Property(e => e.CertificateTypeId)
                .HasComment("Certificate Type Id")
                .HasColumnName("certificate_type_id");

            entity.HasOne(d => d.AccountingGroup).WithMany(p => p.GiftCertificateRestrictions)
                .HasForeignKey(d => d.AccountingGroupId)
                .HasConstraintName("restrictions_accgroup_idx");

            entity.HasOne(d => d.CertificateType).WithMany(p => p.GiftCertificateRestrictions)
                .HasForeignKey(d => d.CertificateTypeId)
                .HasConstraintName("restrictions_certificate_type_id_idx");
        });

        modelBuilder.Entity<GiftCertificateRestrictionsEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("gift_certificate_restrictions_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.GiftCertificateTypeId, e.AccgroupEntityId }, "gift_certificate_type_id_accgroup_entity_id");

            entity.Property(e => e.Id)
                .HasComment("ID")
                .HasColumnName("id");
            entity.Property(e => e.AccgroupEntityId)
                .HasComment("Accounting Group Entity ID")
                .HasColumnName("accgroup_entity_id");
            entity.Property(e => e.GiftCertificateTypeId)
                .HasComment("Gift Certificate Type ID")
                .HasColumnName("gift_certificate_type_id");
        });

        modelBuilder.Entity<GiftCertificateSaleEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("gift_certificate_sale_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.CertificateTypeId, "entity_sale_certificate_type_id_idx");

            entity.HasIndex(e => e.EntityId, "gcse_entity_entity_id__accgroup_entity");

            entity.Property(e => e.Id)
                .HasComment("Id")
                .HasColumnName("id");
            entity.Property(e => e.CertificateTypeId)
                .HasComment("Certificate Type Id")
                .HasColumnName("certificate_type_id");
            entity.Property(e => e.EntityId)
                .HasComment("Accgroup Entity Id")
                .HasColumnName("entity_id");

            entity.HasOne(d => d.CertificateType).WithMany(p => p.GiftCertificateSaleEntities)
                .HasForeignKey(d => d.CertificateTypeId)
                .HasConstraintName("entity_sale_certificate_type_id_idx");

            entity.HasOne(d => d.Entity).WithMany(p => p.GiftCertificateSaleEntities)
                .HasForeignKey(d => d.EntityId)
                .HasConstraintName("gcse_entity_entity_id__accgroup_entity");
        });

        modelBuilder.Entity<GiftCertificateStaffRestriction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("gift_certificate_staff_restrictions")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id)
                .HasComment("ID")
                .HasColumnName("id");
            entity.Property(e => e.GiftCertificateTypeId)
                .HasComment("Gift Certificate Type ID")
                .HasColumnName("gift_certificate_type_id");
            entity.Property(e => e.GroupId)
                .HasComment("Group ID")
                .HasColumnName("group_id");
        });

        modelBuilder.Entity<GiftCertificateType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("gift_certificate_type")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.CanExpire, "can_expire");

            entity.HasIndex(e => e.DefaultShare, "default_share");

            entity.HasIndex(e => e.ExpirationDate, "expiration_date");

            entity.HasIndex(e => e.ExpirationDurationCount, "expiration_duration_count");

            entity.HasIndex(e => e.ExpirationDurationType, "expiration_duration_type");

            entity.HasIndex(e => e.ShareWithLinked, "share_with_linked");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id)
                .HasComment("id")
                .HasColumnName("id");
            entity.Property(e => e.CanExpire)
                .HasComment("Can Expire")
                .HasColumnName("can_expire");
            entity.Property(e => e.DefaultShare)
                .HasComment("Default Share")
                .HasColumnName("default_share");
            entity.Property(e => e.Denomination)
                .HasColumnType("text")
                .HasColumnName("denomination");
            entity.Property(e => e.ExpirationDate)
                .HasComment("Expiration Date")
                .HasColumnName("expiration_date");
            entity.Property(e => e.ExpirationDurationCount)
                .HasComment("Expiration Duration Count")
                .HasColumnName("expiration_duration_count");
            entity.Property(e => e.ExpirationDurationType)
                .HasComment("Expiration Duration Type")
                .HasColumnType("enum('days','weeks','months')")
                .HasColumnName("expiration_duration_type");
            entity.Property(e => e.IsAllStaffGroupsCanSell).HasColumnName("is_all_staff_groups_can_sell");
            entity.Property(e => e.IsAvailableOnline).HasColumnName("is_available_online");
            entity.Property(e => e.OnlineDescription)
                .HasMaxLength(512)
                .HasDefaultValueSql("''")
                .HasColumnName("online_description");
            entity.Property(e => e.ShareWithLinked)
                .HasComment("Share With Linked")
                .HasColumnName("share_with_linked");
            entity.Property(e => e.Status)
                .HasComment("Available For Sale")
                .HasColumnName("status");
            entity.Property(e => e.TypeName)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasComment("Type Name")
                .HasColumnName("type_name");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<GolfNote>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("golf_note")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.Date, e.ResourceId }, "Date and Resource ID");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.Text)
                .HasColumnType("text")
                .HasColumnName("text");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.VersionDate)
                .HasColumnType("datetime")
                .HasColumnName("version_date");
        });

        modelBuilder.Entity<GolfStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("golf_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("group");

            entity.HasIndex(e => e.AddonType, "addon_type");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.ContractTermsId, "contract_terms_id");

            entity.HasIndex(e => e.GroupType, "group_type");

            entity.HasIndex(e => e.IsOnlineRegistration, "is_online_registration");

            entity.HasIndex(e => e.MemberFeeType, "member_fee_type");

            entity.HasIndex(e => e.MembershipTypeId, "membership_type_id");

            entity.HasIndex(e => e.Name, "name");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => e.ShowOnCheckin, "show_on_checkin");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonType)
                .HasDefaultValueSql("'Custom'")
                .HasColumnType("enum('Custom','Discount Program','Resource')")
                .HasColumnName("addon_type");
            entity.Property(e => e.AllowFeeProration)
                .HasDefaultValueSql("'1'")
                .HasColumnName("allow_fee_proration");
            entity.Property(e => e.AnnualMaintenanceFee).HasColumnName("annual_maintenance_fee");
            entity.Property(e => e.AutoCancel).HasColumnName("auto_cancel");
            entity.Property(e => e.AutoEnroll).HasColumnName("auto_enroll");
            entity.Property(e => e.AutoRenew).HasColumnName("auto_renew");
            entity.Property(e => e.AutomaticApproval).HasColumnName("automatic_approval");
            entity.Property(e => e.AvailableForOnlineSale).HasColumnName("available_for_online_sale");
            entity.Property(e => e.AvailableForSale).HasColumnName("available_for_sale");
            entity.Property(e => e.AvailableOnStaffSchedule).HasColumnName("available_on_staff_schedule");
            entity.Property(e => e.BillGuestFee).HasColumnName("bill_guest_fee");
            entity.Property(e => e.BillingDay).HasColumnName("billing_day");
            entity.Property(e => e.BillingType)
                .HasDefaultValueSql("'recurring'")
                .HasColumnType("enum('recurring','pif')")
                .HasColumnName("billing_type");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ContractAgreementTerm)
                .HasDefaultValueSql("'12'")
                .HasColumnName("contract_agreement_term");
            entity.Property(e => e.ContractEnabled).HasColumnName("contract_enabled");
            entity.Property(e => e.ContractLockRate).HasColumnName("contract_lock_rate");
            entity.Property(e => e.ContractRenewalOption)
                .HasDefaultValueSql("'1'")
                .HasColumnName("contract_renewal_option");
            entity.Property(e => e.ContractRenewalTerm).HasColumnName("contract_renewal_term");
            entity.Property(e => e.ContractTermsId).HasColumnName("contract_terms_id");
            entity.Property(e => e.CustomPeriod).HasColumnName("custom_period");
            entity.Property(e => e.CycleDuration)
                .HasDefaultValueSql("'1'")
                .HasColumnName("cycle_duration");
            entity.Property(e => e.CycleType)
                .HasColumnType("enum('day','week','month')")
                .HasColumnName("cycle_type");
            entity.Property(e => e.DeferredRevenue).HasColumnName("deferred_revenue");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DisplayOnProfile)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("display_on_profile");
            entity.Property(e => e.DisplayOnSignin).HasColumnName("display_on_signin");
            entity.Property(e => e.DurationType)
                .HasDefaultValueSql("'month'")
                .HasColumnType("enum('month','week','day')")
                .HasColumnName("duration_type");
            entity.Property(e => e.DurationValue).HasColumnName("duration_value");
            entity.Property(e => e.EndDate)
                .HasMaxLength(5)
                .HasDefaultValueSql("'00-00'")
                .IsFixedLength()
                .HasColumnName("end_date");
            entity.Property(e => e.EnrollmentFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.FamilyType)
                .HasColumnType("enum('individual','individual_dependents','couple','family')")
                .HasColumnName("family_type");
            entity.Property(e => e.GroupType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("group_type");
            entity.Property(e => e.HasAdditionalCharges).HasColumnName("has_additional_charges");
            entity.Property(e => e.HoldType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("hold_type");
            entity.Property(e => e.HoldValue)
                .HasColumnType("float(9,2)")
                .HasColumnName("hold_value");
            entity.Property(e => e.IsFamily).HasColumnName("is_family");
            entity.Property(e => e.IsOnlineRegistration).HasColumnName("is_online_registration");
            entity.Property(e => e.IsResource).HasColumnName("is_resource");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MaxDependents)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("max_dependents");
            entity.Property(e => e.MemberFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("member_fee");
            entity.Property(e => e.MemberFeeType)
                .HasDefaultValueSql("'monthly'")
                .HasColumnType("enum('monthly','custom','annual','cmonthly','trial')")
                .HasColumnName("member_fee_type");
            entity.Property(e => e.MembershipTypeId).HasColumnName("membership_type_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NoGuestFee)
                .HasDefaultValueSql("'0'")
                .HasColumnName("no_guest_fee");
            entity.Property(e => e.NoGuestFeeChild)
                .HasDefaultValueSql("'0'")
                .HasColumnName("no_guest_fee_child");
            entity.Property(e => e.OnlineDescription)
                .HasColumnType("mediumtext")
                .HasColumnName("online_description");
            entity.Property(e => e.OnlineMembershipProration).HasColumnName("online_membership_proration");
            entity.Property(e => e.PAmount)
                .HasColumnType("float(18,2)")
                .HasColumnName("p_amount");
            entity.Property(e => e.PBillingDateDay)
                .HasDefaultValueSql("'1'")
                .HasColumnName("p_billing_date_day");
            entity.Property(e => e.PBillingDateMonth)
                .HasDefaultValueSql("'1'")
                .HasColumnName("p_billing_date_month");
            entity.Property(e => e.PBillingMonth).HasColumnName("p_billing_month");
            entity.Property(e => e.PBillingType)
                .HasDefaultValueSql("'month'")
                .HasColumnType("enum('date','month')")
                .HasColumnName("p_billing_type");
            entity.Property(e => e.PDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("p_description");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PayNow).HasColumnName("pay_now");
            entity.Property(e => e.PaymentRequired).HasColumnName("payment_required");
            entity.Property(e => e.PosAvailable).HasColumnName("pos_available");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProrateLastMonth).HasColumnName("prorate_last_month");
            entity.Property(e => e.RenewBefore).HasColumnName("renew_before");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(255)
                .HasColumnName("resource_name");
            entity.Property(e => e.RevenueMapping)
                .HasDefaultValueSql("'by_home_club'")
                .HasColumnType("enum('by_home_club','by_location_of_sale')")
                .HasColumnName("revenue_mapping");
            entity.Property(e => e.SalesEndDate).HasColumnName("sales_end_date");
            entity.Property(e => e.SalesStartDate).HasColumnName("sales_start_date");
            entity.Property(e => e.ScheduleShow).HasColumnName("schedule_show");
            entity.Property(e => e.ShowOnCheckin).HasColumnName("show_on_checkin");
            entity.Property(e => e.ShowOnMembership).HasColumnName("show_on_membership");
            entity.Property(e => e.ShowOnProspect).HasColumnName("show_on_prospect");
            entity.Property(e => e.StartDate)
                .HasMaxLength(5)
                .HasDefaultValueSql("'00-00'")
                .IsFixedLength()
                .HasColumnName("start_date");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasColumnName("statement_description");
            entity.Property(e => e.SysName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("sys_name");
            entity.Property(e => e.System).HasColumnName("system");
            entity.Property(e => e.SystemType)
                .HasDefaultValueSql("'base'")
                .HasColumnType("enum('base','non_member','member','staff','front_desc','admin','global_admin','guest','addon','manager','time_clock','check_in','prospect','external_pos','membership_sales','api_staff')")
                .HasColumnName("system_type");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'system'")
                .HasColumnType("enum('system','membership','addon','guest','staff','prospect')")
                .HasColumnName("type");
            entity.Property(e => e.UseNonmemberFee).HasColumnName("use_nonmember_fee");
            entity.Property(e => e.UseSaleSpecificDate).HasColumnName("use_sale_specific_date");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.ContractTerms).WithMany(p => p.Groups)
                .HasForeignKey(d => d.ContractTermsId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_group_contract_terms_id");

            entity.HasOne(d => d.MembershipType).WithMany(p => p.Groups)
                .HasForeignKey(d => d.MembershipTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_membership_type_id");

            entity.HasMany(d => d.Addons).WithMany(p => p.Groups)
                .UsingEntity<Dictionary<string, object>>(
                    "GroupMembershipAddon",
                    r => r.HasOne<Group>().WithMany()
                        .HasForeignKey("AddonId")
                        .HasConstraintName("group_membership_addon_ibfk_2"),
                    l => l.HasOne<Group>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("group_membership_addon_ibfk_1"),
                    j =>
                    {
                        j.HasKey("GroupId", "AddonId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j
                            .ToTable("group_membership_addon")
                            .HasCharSet("utf8")
                            .UseCollation("utf8_general_ci");
                        j.HasIndex(new[] { "AddonId" }, "addon_id");
                    });

            entity.HasMany(d => d.EventCustomDates).WithMany(p => p.Groups)
                .UsingEntity<Dictionary<string, object>>(
                    "EventGroupCustomDate",
                    r => r.HasOne<EventCustomDate>().WithMany()
                        .HasForeignKey("EventCustomDateId")
                        .HasConstraintName("event_group_custom_dates_ibfk_2"),
                    l => l.HasOne<Group>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("event_group_custom_dates_ibfk_1"),
                    j =>
                    {
                        j.HasKey("GroupId", "EventCustomDateId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j
                            .ToTable("event_group_custom_dates")
                            .HasCharSet("utf8")
                            .UseCollation("utf8_general_ci");
                        j.HasIndex(new[] { "EventCustomDateId" }, "event_custom_date_id");
                    });

            entity.HasMany(d => d.EventCustomFees).WithMany(p => p.Groups)
                .UsingEntity<Dictionary<string, object>>(
                    "EventGroupCustomFee",
                    r => r.HasOne<EventCustomFee>().WithMany()
                        .HasForeignKey("EventCustomFeesId")
                        .HasConstraintName("event_group_custom_fees_ibfk_2"),
                    l => l.HasOne<Group>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("event_group_custom_fees_ibfk_1"),
                    j =>
                    {
                        j.HasKey("GroupId", "EventCustomFeesId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("event_group_custom_fees");
                        j.HasIndex(new[] { "EventCustomFeesId" }, "event_custom_fees_id");
                    });

            entity.HasMany(d => d.EventCustomParams).WithMany(p => p.Groups)
                .UsingEntity<Dictionary<string, object>>(
                    "EventGroupCustomParam",
                    r => r.HasOne<EventCustomParam>().WithMany()
                        .HasForeignKey("EventCustomParamsId")
                        .HasConstraintName("event_group_custom_params_ibfk_2"),
                    l => l.HasOne<Group>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("event_group_custom_params_ibfk_1"),
                    j =>
                    {
                        j.HasKey("GroupId", "EventCustomParamsId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("event_group_custom_params");
                        j.HasIndex(new[] { "EventCustomParamsId" }, "event_custom_params_id");
                    });

            entity.HasMany(d => d.Groups).WithMany(p => p.Addons)
                .UsingEntity<Dictionary<string, object>>(
                    "GroupMembershipAddon",
                    r => r.HasOne<Group>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("group_membership_addon_ibfk_1"),
                    l => l.HasOne<Group>().WithMany()
                        .HasForeignKey("AddonId")
                        .HasConstraintName("group_membership_addon_ibfk_2"),
                    j =>
                    {
                        j.HasKey("GroupId", "AddonId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j
                            .ToTable("group_membership_addon")
                            .HasCharSet("utf8")
                            .UseCollation("utf8_general_ci");
                        j.HasIndex(new[] { "AddonId" }, "addon_id");
                    });
        });

        modelBuilder.Entity<GroupAccountingGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("group_accounting_group");

            entity.HasIndex(e => new { e.GroupId, e.EntityId, e.Type }, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<GroupAdditionalCharge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_additional_charge")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Fee)
                .HasPrecision(10, 2)
                .HasColumnName("fee");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
        });

        modelBuilder.Entity<GroupAdditionalChargeAccountingGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_additional_charge_accounting_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AdditionalChargeId, "additional_charge_id");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.AdditionalChargeId).HasColumnName("additional_charge_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
        });

        modelBuilder.Entity<GroupClassification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_classification")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<GroupDepartment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("group_department");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
        });

        modelBuilder.Entity<GroupEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("group_entity");

            entity.HasIndex(e => e.ContractTermId, "contract_term_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ContractTermId).HasColumnName("contract_term_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
        });

        modelBuilder.Entity<GroupEntityAccess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_access")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => new { e.GroupId, e.EntityId }, "group_entity").IsUnique();

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
        });

        modelBuilder.Entity<GroupEntityAccountingGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_accounting_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BaseAccountingGroupId).HasColumnName("base_accounting_group_id");
            entity.Property(e => e.EnrollmentAccountingGroupId).HasColumnName("enrollment_accounting_group_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HoldAccountingGroupId).HasColumnName("hold_accounting_group_id");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
        });

        modelBuilder.Entity<GroupEntityAdditionalCharge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_additional_charge")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("statement_description");
        });

        modelBuilder.Entity<GroupEntityBilling>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_billing", tb => tb.HasComment("This table will define which memberships can be sold to which locations. In addition, we will also be able to define and map what the fees will be, based on the user's home location (entity)"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CanSell)
                .HasComment("Control from what location a user can actually sell a membership")
                .HasColumnName("can_sell");
            entity.Property(e => e.CycleCount)
                .HasDefaultValueSql("'1'")
                .HasColumnName("cycle_count");
            entity.Property(e => e.CycleCountRenew)
                .HasDefaultValueSql("'1'")
                .HasColumnName("cycle_count_renew");
            entity.Property(e => e.CycleRenewType)
                .HasDefaultValueSql("'terminated'")
                .HasColumnType("enum('renew_with_custom_price','renew_with_default_price','terminated')")
                .HasColumnName("cycle_renew_type");
            entity.Property(e => e.DefaultBillOnDate).HasColumnName("default_bill_on_date");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HasContractOptions).HasColumnName("has_contract_options");
            entity.Property(e => e.HoldType)
                .HasDefaultValueSql("'no_charge'")
                .HasColumnType("enum('no_charge','credit','charge')")
                .HasColumnName("hold_type");
            entity.Property(e => e.HoldValue)
                .HasPrecision(18, 2)
                .HasColumnName("hold_value");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LockDefaultPrice).HasColumnName("lock_default_price");
            entity.Property(e => e.MapRevenue)
                .HasComment("Control which entities the sale of a membership can be mapped to")
                .HasColumnName("map_revenue");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ProrateFirstMonth)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("prorate_first_month");
            entity.Property(e => e.RenewBefore)
                .HasComment("Days before new billing cycle will start")
                .HasColumnName("renew_before");
            entity.Property(e => e.StartDate)
                .HasMaxLength(5)
                .HasDefaultValueSql("'00-00'")
                .IsFixedLength()
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<GroupEntityCyclePrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_cycle_price")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => new { e.GroupEntityBillingId, e.GroupId, e.EntityId, e.GroupEntityDefaultPriceId, e.Cycle }, "group_entity_billing_id").IsUnique();

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BaseFee)
                .HasPrecision(18, 2)
                .HasColumnName("base_fee");
            entity.Property(e => e.BillMonth)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("bill_month");
            entity.Property(e => e.Cycle)
                .HasDefaultValueSql("'1'")
                .HasColumnName("cycle");
            entity.Property(e => e.DueNow).HasColumnName("due_now");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupEntityBillingId).HasColumnName("group_entity_billing_id");
            entity.Property(e => e.GroupEntityDefaultPriceId).HasColumnName("group_entity_default_price_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.KeepActive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("keep_active");
        });

        modelBuilder.Entity<GroupEntityDiscount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_discount")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AccountingGroupId, "accounting_group_id");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('%','$')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<GroupEntityMaintenanceFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_maintenance_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.BillDay).HasColumnName("bill_day");
            entity.Property(e => e.BillMonth).HasColumnName("bill_month");
            entity.Property(e => e.CycleDuration).HasColumnName("cycle_duration");
            entity.Property(e => e.CycleType)
                .HasColumnType("enum('day','week','month')")
                .HasColumnName("cycle_type");
            entity.Property(e => e.DelayInterval).HasColumnName("delay_interval");
            entity.Property(e => e.DelayIntervalType)
                .HasColumnType("enum('day','week','month')")
                .HasColumnName("delay_interval_type");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Fee)
                .HasPrecision(18, 2)
                .HasColumnName("fee");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("statement_description");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'recurring'")
                .HasColumnType("enum('recurring','fixed')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<GroupEntityPrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_price")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.GroupEntityBillingId, "group_entity_billing_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BaseFee)
                .HasPrecision(18, 2)
                .HasColumnName("base_fee");
            entity.Property(e => e.DependentPriceType)
                .HasColumnType("enum('age','order')")
                .HasColumnName("dependent_price_type");
            entity.Property(e => e.EndAge)
                .HasPrecision(6, 2)
                .HasColumnName("end_age");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(18, 2)
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.FamilyRole)
                .HasDefaultValueSql("'primary'")
                .HasColumnType("enum('primary','dependent')")
                .HasColumnName("family_role");
            entity.Property(e => e.GroupEntityBillingId).HasColumnName("group_entity_billing_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.StartAge)
                .HasPrecision(6, 2)
                .HasColumnName("start_age");
        });

        modelBuilder.Entity<GroupEntityToGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_to_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => new { e.GroupId, e.EntityId, e.LinkedGroupId }, "group_entity_linked_group").IsUnique();

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LinkedGroupId).HasColumnName("linked_group_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
        });

        modelBuilder.Entity<GroupEntityToPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_entity_to_package")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => new { e.GroupId, e.EntityId, e.PackageId }, "group_entity_package").IsUnique();

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
        });

        modelBuilder.Entity<GroupHoldReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_hold_reason")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasColumnName("reason");
        });

        modelBuilder.Entity<GroupMembershipBilling>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("group_membership_billing");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsSecond).HasColumnName("is_second");
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.Type).HasColumnName("type");

            entity.HasOne(d => d.Group).WithMany(p => p.GroupMembershipBillings)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("group_membership_billing_ibfk_1");
        });

        modelBuilder.Entity<GroupMembershipClassification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_membership_classification")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupClassificationId, "group_classification_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupClassificationId).HasColumnName("group_classification_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");

            entity.HasOne(d => d.GroupClassification).WithMany(p => p.GroupMembershipClassifications)
                .HasForeignKey(d => d.GroupClassificationId)
                .HasConstraintName("fk_gc_gmc");

            entity.HasOne(d => d.Group).WithMany(p => p.GroupMembershipClassifications)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("fk_g_gmc");
        });

        modelBuilder.Entity<GroupServiceRestriction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_service_restrictions")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.GroupId, e.ServiceId }, "group_service").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
        });

        modelBuilder.Entity<GroupType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("group_type")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<GroupexStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("groupex_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Guardian>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("guardian")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.GuardianId, e.ChildId }, "guardian_id_child_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChildId).HasColumnName("child_id");
            entity.Property(e => e.GuardianId).HasColumnName("guardian_id");
        });

        modelBuilder.Entity<GuestFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("guest_fees");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroup).HasColumnName("accounting_group");
            entity.Property(e => e.Days)
                .HasColumnType("text")
                .HasColumnName("days");
            entity.Property(e => e.Fee)
                .HasColumnType("float(9,2)")
                .HasColumnName("fee");
            entity.Property(e => e.FeeType)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("fee_type");
            entity.Property(e => e.GuestFeeDescription)
                .HasMaxLength(255)
                .HasColumnName("guest_fee_description");
            entity.Property(e => e.LimitFrom)
                .HasDefaultValueSql("'1'")
                .HasColumnName("limit_from");
            entity.Property(e => e.LimitPeriod)
                .HasDefaultValueSql("'week'")
                .HasColumnType("enum('week','month','season')")
                .HasColumnName("limit_period");
            entity.Property(e => e.LimitTo)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("limit_to");
            entity.Property(e => e.Locations)
                .HasColumnType("text")
                .HasColumnName("locations");
            entity.Property(e => e.MemberGroups)
                .HasColumnType("text")
                .HasColumnName("member_groups");
            entity.Property(e => e.Season)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("season");
            entity.Property(e => e.Services)
                .HasColumnType("text")
                .HasColumnName("services");
            entity.Property(e => e.TimeFrom)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("time_from");
            entity.Property(e => e.TimeTo)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("time_to");
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("type");
            entity.Property(e => e.WholeDay)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("whole_day");
        });

        modelBuilder.Entity<GuestFeesVisit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("guest_fees_visits");

            entity.HasIndex(e => new { e.UserId, e.Date }, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<GuestHash>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("guest_hash")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Hash, "hash");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Hash)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("hash");
        });

        modelBuilder.Entity<GuestPassPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("guest_pass_package");

            entity.HasIndex(e => e.AddedBy, "added_by");

            entity.HasIndex(e => e.ExpirationDate, "expiration_date");

            entity.HasIndex(e => e.Family, "family");

            entity.HasIndex(e => e.Name, "name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.HasIndex(e => e.RuleId, "rule_id");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.ActivatedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("activated_date");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.AddedDate).HasColumnName("added_date");
            entity.Property(e => e.AddedTime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("added_time");
            entity.Property(e => e.Count)
                .HasPrecision(8, 3)
                .HasColumnName("count");
            entity.Property(e => e.CountInitial)
                .HasPrecision(8, 3)
                .HasColumnName("count_initial");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.ExpirationDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("expiration_date");
            entity.Property(e => e.Family).HasColumnName("family");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.PriceInitial)
                .HasPrecision(8, 2)
                .HasColumnName("price_initial");
            entity.Property(e => e.RuleId)
                .HasMaxLength(36)
                .HasDefaultValueSql("''")
                .HasColumnName("rule_id");
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.UsedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("used_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<GuestPassUse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("guest_pass_use");

            entity.HasIndex(e => e.GuestId, "guest_id");

            entity.HasIndex(e => e.PackageId, "package_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GuestId).HasColumnName("guest_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.UsedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("used_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<GymStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("gym_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<GymnasticsStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("gymnastics_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<HistoricalTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("historical_transactions");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<HockeyStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("hockey_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Hour>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("hour");

            entity.HasIndex(e => e.DateEnd, "date_end");

            entity.HasIndex(e => e.DateStart, "date_start");

            entity.HasIndex(e => e.Inactive, "inactive");

            entity.HasIndex(e => e.ParentHourId, "parent_hour_id");

            entity.HasIndex(e => e.ServiceId, "service_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateEnd)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_start");
            entity.Property(e => e.HourType)
                .HasColumnType("enum('season','summer','holiday')")
                .HasColumnName("hour_type");
            entity.Property(e => e.Inactive).HasColumnName("inactive");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.ParentHourId).HasColumnName("parent_hour_id");
            entity.Property(e => e.SeasonId).HasColumnName("season_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'open'")
                .HasColumnType("enum('open','closed','work_as_usually')")
                .HasColumnName("status");
            entity.Property(e => e.TimeFromMin)
                .HasMaxLength(5)
                .HasColumnName("time_from_min");
            entity.Property(e => e.TimeToMax)
                .HasMaxLength(5)
                .HasColumnName("time_to_max");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.WeekTimes)
                .HasColumnType("text")
                .HasColumnName("week_times");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("image")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.RowId, e.ModelName }, "row_id_model_name");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModelName)
                .HasDefaultValueSql("''")
                .HasColumnName("model_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.OriginalId).HasColumnName("original_id");
            entity.Property(e => e.RowId).HasColumnName("row_id");
            entity.Property(e => e.ScaleType)
                .HasMaxLength(255)
                .HasDefaultValueSql("'original'")
                .HasColumnName("scale_type");
            entity.Property(e => e.Src)
                .HasColumnType("mediumtext")
                .HasColumnName("src");
        });

        modelBuilder.Entity<ImportAccgroupentity>(entity =>
        {
            entity.HasKey(e => e.InternalId).HasName("PRIMARY");

            entity
                .ToTable("import_accgroupentity")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.Property(e => e.AccGroupName)
                .HasComment("accounting group name")
                .HasColumnName("acc_group_name");
            entity.Property(e => e.Address)
                .HasMaxLength(100)
                .HasComment("address")
                .HasColumnName("address");
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .HasComment("address2")
                .HasColumnName("address2");
            entity.Property(e => e.CaId).HasComment("unique id from the row inserted to ca production db");
            entity.Property(e => e.CcRetailer)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')")
                .HasColumnName("cc_retailer");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasComment("City")
                .HasColumnName("city");
            entity.Property(e => e.CsvLineNo).HasComment("csv line number that corresponds to this row");
            entity.Property(e => e.Default)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')")
                .HasColumnName("default");
            entity.Property(e => e.DefaultLocation)
                .HasComment("i do not know what this field is")
                .HasColumnName("default_location");
            entity.Property(e => e.Description)
                .HasComment("description")
                .HasColumnName("description");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasComment("Email")
                .HasColumnName("email");
            entity.Property(e => e.EntityName)
                .HasMaxLength(100)
                .HasComment("Must match existing entity name")
                .HasColumnName("entity_name");
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasComment("fax")
                .HasColumnName("fax");
            entity.Property(e => e.GlCode)
                .HasMaxLength(255)
                .HasComment("gl_code")
                .HasColumnName("gl_code");
            entity.Property(e => e.Inserted)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Latitude)
                .HasPrecision(11, 7)
                .HasComment("Latitude")
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasPrecision(11, 7)
                .HasComment("Longitude")
                .HasColumnName("longitude");
            entity.Property(e => e.MailAddress)
                .HasMaxLength(100)
                .HasComment("Mailing address2")
                .HasColumnName("mail_address");
            entity.Property(e => e.MailAddress2)
                .HasMaxLength(50)
                .HasComment("Mailing address2")
                .HasColumnName("mail_address2");
            entity.Property(e => e.MailCity)
                .HasMaxLength(50)
                .HasComment("Mailing City")
                .HasColumnName("mail_city");
            entity.Property(e => e.MailState)
                .HasMaxLength(50)
                .HasComment("Mailing State")
                .HasColumnName("mail_state");
            entity.Property(e => e.MailZip)
                .HasMaxLength(10)
                .HasComment("Mailing Zip")
                .HasColumnName("mail_zip");
            entity.Property(e => e.OnlineIsVisible)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')")
                .HasColumnName("online_is_visible");
            entity.Property(e => e.OnlineName)
                .HasMaxLength(255)
                .HasComment("online_name")
                .HasColumnName("online_name");
            entity.Property(e => e.Phone)
                .HasMaxLength(100)
                .HasComment("phone")
                .HasColumnName("phone");
            entity.Property(e => e.Prefix)
                .HasMaxLength(50)
                .HasComment("prefix")
                .HasColumnName("prefix");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasComment("state")
                .HasColumnName("state");
            entity.Property(e => e.TimeZone)
                .HasMaxLength(100)
                .HasComment("3 digit time zone")
                .HasColumnName("time_zone");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .HasComment("zip")
                .HasColumnName("zip");
        });

        modelBuilder.Entity<ImportAccountinggroup>(entity =>
        {
            entity.HasKey(e => e.InternalId).HasName("PRIMARY");

            entity
                .ToTable("import_accountinggroups")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.Property(e => e.CaId).HasComment("unique id from the row inserted to ca production db");
            entity.Property(e => e.CanAddSoldByInPos)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')")
                .HasColumnName("CanAddSoldByInPOS");
            entity.Property(e => e.CanBeDiscounted)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')");
            entity.Property(e => e.Cogs)
                .HasMaxLength(100)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')")
                .HasColumnName("COGS");
            entity.Property(e => e.CsvLineNo).HasComment("csv line number that corresponds to this row");
            entity.Property(e => e.DefaultTransactionDescription)
                .HasMaxLength(250)
                .HasComment("DefaultTransactionDescription");
            entity.Property(e => e.DisplayCustomDescriptionFieldInPos)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')")
                .HasColumnName("DisplayCustomDescriptionFieldInPOS");
            entity.Property(e => e.Entity)
                .HasMaxLength(50)
                .HasComment("Entity");
            entity.Property(e => e.Inserted)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.NotAvailableForStatementCharges)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')");
            entity.Property(e => e.NotAvailableInPos)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')")
                .HasColumnName("NotAvailableInPOS");
            entity.Property(e => e.ParentGroup)
                .HasMaxLength(100)
                .HasComment("must match an existing group");
            entity.Property(e => e.Tax).HasComment("must match an id from clubautomation tbl shop_tax_rate");
            entity.Property(e => e.Title)
                .HasMaxLength(250)
                .HasComment("Title");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .HasComment("enum('Revenue','Liability')");
            entity.Property(e => e.UniqueName)
                .HasMaxLength(100)
                .HasComment("Must be a unique name that is not used by another accounting group");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<ImportField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("import_field")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Example)
                .HasMaxLength(255)
                .HasColumnName("example");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<ImportLog>(entity =>
        {
            entity.HasKey(e => e.InternalId).HasName("PRIMARY");

            entity
                .ToTable("import_log")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.Property(e => e.Inserted)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(500);
            entity.Property(e => e.MessageType)
                .HasMaxLength(25)
                .HasDefaultValueSql("'info'")
                .HasComment("Required - enum('error','info')");
            entity.Property(e => e.ScriptPath).HasMaxLength(200);
            entity.Property(e => e.UserName)
                .HasMaxLength(100)
                .HasComment("User Running Import");
        });

        modelBuilder.Entity<ImportProfile>(entity =>
        {
            entity.HasKey(e => e.AccountNumber).HasName("PRIMARY");

            entity
                .ToTable("import_profiles")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.HasIndex(e => e.EntityId, "accGroupEntityFk_idx");

            entity.HasIndex(e => e.City, "cityIndex");

            entity.HasIndex(e => e.State, "stateIndex");

            entity.HasIndex(e => e.Zip, "zipIndex");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(100)
                .HasComment("Required");
            entity.Property(e => e.AccessCard).HasMaxLength(100);
            entity.Property(e => e.Birthday).HasMaxLength(100);
            entity.Property(e => e.CaId).HasComment("unique id from the row inserted to ca production db");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Country)
                .HasMaxLength(100)
                .HasDefaultValueSql("'US'");
            entity.Property(e => e.CreditLimit).HasComment("credit limit");
            entity.Property(e => e.CsvLineNo).HasComment("csv line number that corresponds to this row");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DeliveryMethod)
                .HasMaxLength(5)
                .HasDefaultValueSql("'none'")
                .HasComment("enum('none','email','mail') - Not set or not allowed value will be converted to 'no'");
            entity.Property(e => e.EftpaymentMethod)
                .HasMaxLength(25)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('no','credit card', 'bank account', 'mail bill') - Not set or not allowed value will be converted to 'no'")
                .HasColumnName("EFTPaymentMethod");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.EmergencyContact).HasMaxLength(100);
            entity.Property(e => e.EmergencyRelation).HasMaxLength(100);
            entity.Property(e => e.EntityId)
                .HasDefaultValueSql("'1'")
                .HasColumnName("EntityID");
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.HouseCharge)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No') - Not set or not allowed value will be converted to 'no'");
            entity.Property(e => e.Inserted)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.IsProspect).HasComment("enum('0','1')");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.LateFeeExempt)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')");
            entity.Property(e => e.MemberNumber).HasMaxLength(100);
            entity.Property(e => e.MiddleName).HasMaxLength(100);
            entity.Property(e => e.PhoneCell).HasMaxLength(15);
            entity.Property(e => e.PhoneEmergency).HasMaxLength(15);
            entity.Property(e => e.PhoneHome).HasMaxLength(15);
            entity.Property(e => e.PhoneWork).HasMaxLength(15);
            entity.Property(e => e.PrimaryAccountNumber)
                .HasMaxLength(100)
                .HasComment("Must be a valid AccountNumber");
            entity.Property(e => e.ProspectAssignedTo).HasMaxLength(100);
            entity.Property(e => e.ProspectAssignedTo2).HasMaxLength(100);
            entity.Property(e => e.ProspectConfidence).HasMaxLength(100);
            entity.Property(e => e.ProspectOpenDate).HasMaxLength(100);
            entity.Property(e => e.Sex)
                .HasMaxLength(8)
                .HasDefaultValueSql("'not set'")
                .HasComment("Empty value will be converted to 'not set' - Not empty not allowed value will be converted to 'male'");
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetAddress).HasMaxLength(100);
            entity.Property(e => e.StreetAddress2).HasMaxLength(100);
            entity.Property(e => e.TaxExempt)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<ImportRecurringmembership>(entity =>
        {
            entity.HasKey(e => e.InternalId).HasName("PRIMARY");

            entity
                .ToTable("import_recurringmemberships")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.HasIndex(e => e.AccountNumber, "IDX_E00E88B49EF5647A");

            entity.HasIndex(e => e.MembershipName, "IDX_E00E88B4F000D5D0");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(100)
                .HasComment("Required");
            entity.Property(e => e.BillingDay).HasDefaultValueSql("'1'");
            entity.Property(e => e.CaId).HasComment("unique id from the row inserted to ca production db");
            entity.Property(e => e.CancelOnDate).HasMaxLength(100);
            entity.Property(e => e.CanceledDate).HasMaxLength(100);
            entity.Property(e => e.ContractEndDate).HasMaxLength(100);
            entity.Property(e => e.ContractStartDate).HasMaxLength(100);
            entity.Property(e => e.CsvLineNo).HasComment("csv line number that corresponds to this row");
            entity.Property(e => e.ExpireDate).HasMaxLength(100);
            entity.Property(e => e.Fee)
                .HasPrecision(10, 2)
                .HasComment("Fee");
            entity.Property(e => e.FreezeEndDate).HasMaxLength(100);
            entity.Property(e => e.FreezeStartDate).HasMaxLength(100);
            entity.Property(e => e.HoldFromDate).HasMaxLength(100);
            entity.Property(e => e.HoldToDate).HasMaxLength(100);
            entity.Property(e => e.Inserted)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.JoinDate).HasMaxLength(100);
            entity.Property(e => e.MembershipIdentifier).HasMaxLength(100);
            entity.Property(e => e.MembershipName)
                .HasMaxLength(100)
                .HasComment("Must be a valid AccountNumber");
            entity.Property(e => e.MembershipStatus).HasMaxLength(100);
            entity.Property(e => e.NextTransactionDate).HasMaxLength(100);
            entity.Property(e => e.NumberOfPaidCycles).HasDefaultValueSql("'1'");
            entity.Property(e => e.OnHoldFee)
                .HasPrecision(10, 2)
                .HasComment("OnHoldFee");
            entity.Property(e => e.RenewalFee)
                .HasPrecision(10, 2)
                .HasComment("RenewalFee");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");

            entity.HasOne(d => d.AccountNumberNavigation).WithMany(p => p.ImportRecurringmemberships)
                .HasForeignKey(d => d.AccountNumber)
                .HasConstraintName("fkP_RecurringMemberships_PAccountNumber");

            entity.HasOne(d => d.MembershipNameNavigation).WithMany(p => p.ImportRecurringmemberships)
                .HasForeignKey(d => d.MembershipName)
                .HasConstraintName("fk_Recurringmemberships_RecurringUsergroups_Name");
        });

        modelBuilder.Entity<ImportRecurringusergroup>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PRIMARY");

            entity
                .ToTable("import_recurringusergroups")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasComment("Required");
            entity.Property(e => e.BillingType)
                .HasMaxLength(50)
                .HasComment("Required - enum('pif','recurring')");
            entity.Property(e => e.CaId).HasComment("unique id from the row inserted to ca production db");
            entity.Property(e => e.CsvLineNo).HasComment("csv line number that corresponds to this row");
            entity.Property(e => e.CycleLengthType)
                .HasMaxLength(10)
                .HasDefaultValueSql("'month'")
                .HasComment("enum('day','week','month','year')");
            entity.Property(e => e.FamilyType)
                .HasMaxLength(25)
                .HasDefaultValueSql("'family'")
                .HasComment("Required - enum('individual','family')");
            entity.Property(e => e.Inserted)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.UserGroupType)
                .HasMaxLength(10)
                .HasDefaultValueSql("'membership'")
                .HasComment("Required - enum('membership','addon','staff','guest')");
        });

        modelBuilder.Entity<ImportSettingsadditionalcharge>(entity =>
        {
            entity.HasKey(e => e.InternalId).HasName("PRIMARY");

            entity
                .ToTable("import_settingsadditionalcharges")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.HasIndex(e => e.UserGroupName, "IDX_AB51BB2DCF2A488D");

            entity.Property(e => e.AccountingGroup).HasComment("Accounting Group");
            entity.Property(e => e.CaId).HasComment("unique id from the row inserted to ca production db");
            entity.Property(e => e.CsvLineNo).HasComment("csv line number that corresponds to this row");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasComment("Description of charge");
            entity.Property(e => e.Fee)
                .HasPrecision(10, 2)
                .HasComment("Fee");
            entity.Property(e => e.Inserted)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.UserGroupName)
                .HasMaxLength(100)
                .HasComment("Required - Must match Name from 'usergroup.csv' file");

            entity.HasOne(d => d.UserGroupNameNavigation).WithMany(p => p.ImportSettingsadditionalcharges)
                .HasForeignKey(d => d.UserGroupName)
                .HasConstraintName("fkUG_SettingsAdditionalCharges_UgName");
        });

        modelBuilder.Entity<ImportSettingsfeescontracttype>(entity =>
        {
            entity.HasKey(e => e.InternalId).HasName("PRIMARY");

            entity
                .ToTable("import_settingsfeescontracttypes")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.HasIndex(e => e.UserGroupName, "IDX_E3AA23E8CF2A488D");

            entity.Property(e => e.AutoCancel)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("Required - enum('Yes','No')");
            entity.Property(e => e.AutoRenew)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("Required - Only Valid For Interval Billing Types - enum('Yes','No')");
            entity.Property(e => e.AutoRenewDaysBeforeReactivation).HasComment("Only valid for Interval Billing Types - enum('0','1')");
            entity.Property(e => e.AvailableForSale)
                .HasMaxLength(3)
                .HasDefaultValueSql("'yes'")
                .HasComment("enum('Yes','No')");
            entity.Property(e => e.CaId).HasComment("unique id from the row inserted to ca production db");
            entity.Property(e => e.Contract)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')");
            entity.Property(e => e.ContractDuration)
                .HasMaxLength(50)
                .HasComment("Contract Duration");
            entity.Property(e => e.ContractFee)
                .HasPrecision(10, 2)
                .HasComment("Contract Fee");
            entity.Property(e => e.ContractRenewalOptions)
                .HasMaxLength(30)
                .HasDefaultValueSql("'Terminate on Expiration'")
                .HasComment("enum('Terminate on Expiration','Automatically Renew','Renew without Contract','Month to Month')");
            entity.Property(e => e.ContractTerms)
                .HasMaxLength(100)
                .HasComment("Text String - must match an existing contract terms name");
            entity.Property(e => e.CsvLineNo).HasComment("csv line number that corresponds to this row");
            entity.Property(e => e.DefaultHoldFee)
                .HasPrecision(10, 2)
                .HasComment("Default Hold Fee");
            entity.Property(e => e.DoNotExpireIfUnpaid)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("*Required - enum('Yes','No')");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(10, 2)
                .HasComment("EnrollmentFee");
            entity.Property(e => e.HoldOptions)
                .HasMaxLength(30)
                .HasDefaultValueSql("''")
                .HasComment("Only Valid for monthly Billing Types - enum('No Charge','Charge','Credit','')");
            entity.Property(e => e.Inserted)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.LockRate)
                .HasMaxLength(3)
                .HasDefaultValueSql("'no'")
                .HasComment("enum('Yes','No')");
            entity.Property(e => e.MembershipRenewalFee)
                .HasPrecision(10, 2)
                .HasComment("Membership Renewal Fee");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.UserGroupName)
                .HasMaxLength(100)
                .HasComment("Required - Must match Name from 'usergroup.csv' file");

            entity.HasOne(d => d.UserGroupNameNavigation).WithMany(p => p.ImportSettingsfeescontracttypes)
                .HasForeignKey(d => d.UserGroupName)
                .HasConstraintName("fkUG_SettingsFeesContractTypes_UgName");
        });

        modelBuilder.Entity<ImportToolAuthKey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("import_tool_auth_key")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.MicroserviceInstance, "microservice_instance");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthKey)
                .HasColumnType("text")
                .HasColumnName("auth_key");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MicroserviceInstance)
                .HasDefaultValueSql("''")
                .HasColumnName("microservice_instance");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
        });

        modelBuilder.Entity<InfrastructureRateSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("infrastructure_rate_settings")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AccountingGroupId, "accounting_group_id");

            entity.HasIndex(e => e.RateId, "rate_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.RateId).HasColumnName("rate_id");
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("instructor");

            entity.HasIndex(e => e.CustomPrice, "custom_price");

            entity.HasIndex(e => e.InstructorId, "instructor_id");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Attended).HasColumnName("attended");
            entity.Property(e => e.CalcStaffCourtFee)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(18,2)")
                .HasColumnName("calc_staff_court_fee");
            entity.Property(e => e.ChargedNotAttended).HasColumnName("charged_not_attended");
            entity.Property(e => e.ComplimentaryRoundCategoryId).HasColumnName("complimentary_round_category_id");
            entity.Property(e => e.CustomPrice)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(18,2)")
                .HasColumnName("custom_price");
            entity.Property(e => e.CustomPriceType)
                .HasDefaultValueSql("'per_hour'")
                .HasColumnType("enum('per_hour','full','hours_only','flat','per_person','per_reservation')")
                .HasColumnName("custom_price_type");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.ParticipantStatus)
                .HasDefaultValueSql("'booked'")
                .HasComment("Is used for Scheduler Events")
                .HasColumnType("enum('booked','confirmed','checked-in','complete','no-show')")
                .HasColumnName("participant_status");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.StaffCourtFee)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(18,2)")
                .HasColumnName("staff_court_fee");
        });

        modelBuilder.Entity<InstructorGhost>(entity =>
        {
            entity.HasKey(e => new { e.ScheduleId, e.Name })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("instructor_ghost");

            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<Invitation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("invitation");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Hash)
                .HasMaxLength(200)
                .HasColumnName("hash")
                .UseCollation("utf8_bin")
                .HasCharSet("utf8");
            entity.Property(e => e.MailId).HasColumnName("mail_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<KioskLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("kiosk_locations")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.LocationId, "location_id");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.HasIndex(e => e.PosLocationId, "pos_location_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.PosLocationId).HasColumnName("pos_location_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasComment("Active/Inactive")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Kitchen>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("kitchen")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id)
                .HasComment("ID")
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasComment("name")
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<KitchenOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("kitchen_order")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Timestamp, "timestamp");

            entity.HasIndex(e => e.TransactionId, "transaction_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.Delivery)
                .HasMaxLength(20)
                .HasDefaultValueSql("''")
                .HasColumnName("delivery");
            entity.Property(e => e.LastUpdated)
                .HasColumnType("timestamp")
                .HasColumnName("last_updated");
            entity.Property(e => e.OrderNotes)
                .HasMaxLength(256)
                .HasDefaultValueSql("''")
                .HasColumnName("order_notes");
            entity.Property(e => e.Pickup).HasColumnName("pickup");
            entity.Property(e => e.StaffMemberId).HasColumnName("staff_member_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'ACTIVE'")
                .HasColumnType("enum('ACTIVE','STARTED','STAGED','DELIVERED')")
                .HasColumnName("status");
            entity.Property(e => e.TableNumber).HasColumnName("table_number");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
        });

        modelBuilder.Entity<KitchenPo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("kitchen_pos")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.KitchenId, "kitchen_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.KitchenId).HasColumnName("kitchen_id");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
        });

        modelBuilder.Entity<LadderMatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ladder_match");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChallengeAccepted)
                .HasDefaultValueSql("'0'")
                .HasColumnName("challenge_accepted");
            entity.Property(e => e.ChallengerId).HasColumnName("challenger_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.PlayerId).HasColumnName("player_id");
            entity.Property(e => e.Score)
                .HasMaxLength(200)
                .HasColumnName("score");
            entity.Property(e => e.Won).HasColumnName("won");
        });

        modelBuilder.Entity<LadderPlayer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ladder_player");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.Rank).HasColumnName("rank");
            entity.Property(e => e.Section).HasColumnName("section");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<LessonType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("lesson_types");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.CourtDescription)
                .HasColumnType("text")
                .HasColumnName("court_description");
            entity.Property(e => e.CourtDescriptionShort)
                .HasColumnType("text")
                .HasColumnName("court_description_short");
            entity.Property(e => e.EntityId)
                .HasColumnType("text")
                .HasColumnName("entity_id");
            entity.Property(e => e.LimitByRevenue)
                .HasColumnType("text")
                .HasColumnName("limit_by_revenue");
            entity.Property(e => e.Names)
                .HasColumnType("text")
                .HasColumnName("names");
            entity.Property(e => e.PackageRequired)
                .HasColumnType("text")
                .HasColumnName("package_required");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<LessonTypeOnlineBookingSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("lesson_type_online_booking_settings")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.OnlineBookingSettingsId, "fk_lesson_type_online_booking_settings");

            entity.HasIndex(e => e.ComponentId, "fk_lesson_type_online_booking_settings_component");

            entity.HasIndex(e => new { e.LessonTypeId, e.ComponentId, e.OnlineBookingSettingsId }, "lesson_type_component_online_booking_settings").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LessonTypeId).HasColumnName("lesson_type_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.OnlineBookingSettingsId).HasColumnName("online_booking_settings_id");

            entity.HasOne(d => d.Component).WithMany(p => p.LessonTypeOnlineBookingSettings)
                .HasForeignKey(d => d.ComponentId)
                .HasConstraintName("fk_lesson_type_online_booking_settings_component");

            entity.HasOne(d => d.LessonType).WithMany(p => p.LessonTypeOnlineBookingSettings)
                .HasForeignKey(d => d.LessonTypeId)
                .HasConstraintName("fk_lesson_type_online_booking_settings_lesson_type");

            entity.HasOne(d => d.OnlineBookingSettings).WithMany(p => p.LessonTypeOnlineBookingSettings)
                .HasForeignKey(d => d.OnlineBookingSettingsId)
                .HasConstraintName("fk_lesson_type_online_booking_settings");
        });

        modelBuilder.Entity<LessonTypeOnlineStaffAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("lesson_type_online_staff_assignment")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "fk_lesson_type_online_staff_assignment_component");

            entity.HasIndex(e => new { e.LessonTypeId, e.ComponentId, e.StaffId }, "online_staff_component_lesson_type").IsUnique();

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.IsAllowed).HasColumnName("is_allowed");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LessonTypeId).HasColumnName("lesson_type_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");

            entity.HasOne(d => d.Component).WithMany(p => p.LessonTypeOnlineStaffAssignments)
                .HasForeignKey(d => d.ComponentId)
                .HasConstraintName("fk_lesson_type_online_staff_assignment_component");

            entity.HasOne(d => d.LessonType).WithMany(p => p.LessonTypeOnlineStaffAssignments)
                .HasForeignKey(d => d.LessonTypeId)
                .HasConstraintName("fk_lesson_type_online_staff_assignment_lesson_type");
        });

        modelBuilder.Entity<LessonTypeStaffAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("lesson_type_staff_assignment")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "fk_lesson_type_staff_assignment_component");

            entity.HasIndex(e => new { e.LessonTypeId, e.ComponentId, e.StaffId }, "staff_component_lesson_type").IsUnique();

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.IsAllowed).HasColumnName("is_allowed");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LessonTypeId).HasColumnName("lesson_type_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");

            entity.HasOne(d => d.Component).WithMany(p => p.LessonTypeStaffAssignments)
                .HasForeignKey(d => d.ComponentId)
                .HasConstraintName("fk_lesson_type_staff_assignment_component");

            entity.HasOne(d => d.LessonType).WithMany(p => p.LessonTypeStaffAssignments)
                .HasForeignKey(d => d.LessonTypeId)
                .HasConstraintName("fk_lesson_type_staff_assignment_lesson_type");
        });

        modelBuilder.Entity<Letter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("letter")
                .UseCollation("latin1_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Body)
                .HasMaxLength(255)
                .HasColumnName("body");
            entity.Property(e => e.Head)
                .HasMaxLength(255)
                .HasColumnName("head");
            entity.Property(e => e.Main).HasColumnName("main");
            entity.Property(e => e.ThemeId).HasColumnName("theme_id");
        });

        modelBuilder.Entity<LocationArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("location_area")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.EntityId, e.Name }, "area_name_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.Classification)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("classification");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Name)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.Entity).WithMany(p => p.LocationAreas)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_location_area_entity_id");
        });

        modelBuilder.Entity<LocationRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("location_room")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AreaId, "fk_location_room_area_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.AllowStations).HasColumnName("allow_stations");
            entity.Property(e => e.AreaId).HasColumnName("area_id");
            entity.Property(e => e.Classification)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("classification");
            entity.Property(e => e.IsAvailable)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_available");
            entity.Property(e => e.MaxParticipants).HasColumnName("max_participants");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.NumStations).HasColumnName("num_stations");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.StationPrefix)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("station_prefix");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.Area).WithMany(p => p.LocationRooms)
                .HasForeignKey(d => d.AreaId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_location_room_area_id");
        });

        modelBuilder.Entity<LocationSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("location_schedule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.DateStart, e.DateEnd, e.Active }, "dates_active");

            entity.HasIndex(e => e.AreaId, "fk_location_schedule_area_id");

            entity.HasIndex(e => e.EntityId, "fk_location_schedule_entity_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.AreaId).HasColumnName("area_id");
            entity.Property(e => e.DateEnd).HasColumnName("date_end");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.TimeFromDefault)
                .HasColumnType("time")
                .HasColumnName("time_from_default");
            entity.Property(e => e.TimeToDefault)
                .HasColumnType("time")
                .HasColumnName("time_to_default");

            entity.HasOne(d => d.Area).WithMany(p => p.LocationSchedules)
                .HasForeignKey(d => d.AreaId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_location_schedule_area_id");

            entity.HasOne(d => d.Entity).WithMany(p => p.LocationSchedules)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_location_schedule_entity_id");
        });

        modelBuilder.Entity<LocationScheduleDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("location_schedule_day")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DayOfWeek, "day_of_week");

            entity.HasIndex(e => e.LocationScheduleId, "fk_location_schedule_day_location_schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DayOfWeek)
                .HasDefaultValueSql("'sunday'")
                .HasColumnType("enum('sunday','monday','tuesday','wednesday','thursday','friday','saturday')")
                .HasColumnName("day_of_week");
            entity.Property(e => e.LocationScheduleId).HasColumnName("location_schedule_id");
            entity.Property(e => e.TimeFrom)
                .HasColumnType("time")
                .HasColumnName("time_from");
            entity.Property(e => e.TimeTo)
                .HasColumnType("time")
                .HasColumnName("time_to");

            entity.HasOne(d => d.LocationSchedule).WithMany(p => p.LocationScheduleDays)
                .HasForeignKey(d => d.LocationScheduleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_location_schedule_day_location_schedule_id");
        });

        modelBuilder.Entity<LocationStation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("location_station")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.RoomId, "fk_location_station_room_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.RoomId).HasColumnName("room_id");

            entity.HasOne(d => d.Room).WithMany(p => p.LocationStations)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_location_station_room_id");
        });

        modelBuilder.Entity<LockerBillingType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("locker_billing_types")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Day)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("day");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("'Locker Rental. [month] [year]'")
                .HasColumnName("description");
            entity.Property(e => e.Month)
                .HasDefaultValueSql("'1'")
                .HasColumnName("month");
            entity.Property(e => e.MonthCnt)
                .HasDefaultValueSql("'1'")
                .HasColumnName("month_cnt");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<LockerSize>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("locker_size")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroup).HasColumnName("acc_group");
            entity.Property(e => e.EntityId)
                .HasComment("club id")
                .HasColumnName("entity_id");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("float(6,2)")
                .HasColumnName("price");
        });

        modelBuilder.Entity<LockerType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("locker_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("log");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Message)
                .HasColumnType("text")
                .HasColumnName("message");
            entity.Property(e => e.Priority)
                .HasMaxLength(50)
                .HasColumnName("priority");
            entity.Property(e => e.Username)
                .HasMaxLength(510)
                .HasColumnName("username");
        });

        modelBuilder.Entity<Mail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("mail");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.FromUser, "from_user");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.HasIndex(e => e.SendStatus, "send_status");

            entity.HasIndex(e => e.Uid, "uid").HasAnnotation("MySql:IndexPrefixLength", new[] { 16 });

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Body)
                .HasColumnType("text")
                .HasColumnName("body");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Flag)
                .HasDefaultValueSql("'normal'")
                .HasColumnType("enum('low','normal','high')")
                .HasColumnName("flag");
            entity.Property(e => e.From)
                .HasMaxLength(250)
                .HasColumnName("from");
            entity.Property(e => e.FromUser).HasColumnName("from_user");
            entity.Property(e => e.FullMessage).HasColumnName("full_message");
            entity.Property(e => e.HasAttachment)
                .HasDefaultValueSql("'false'")
                .HasColumnType("enum('false','true')")
                .HasColumnName("has_attachment");
            entity.Property(e => e.Headers)
                .HasColumnType("text")
                .HasColumnName("headers");
            entity.Property(e => e.LastUpdate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("last_update");
            entity.Property(e => e.MailToPrimary).HasColumnName("mail_to_primary");
            entity.Property(e => e.MessageType)
                .HasMaxLength(200)
                .HasDefaultValueSql("''")
                .HasColumnName("message_type");
            entity.Property(e => e.NotificationType)
                .HasDefaultValueSql("'20'")
                .HasColumnName("notification_type");
            entity.Property(e => e.Removed).HasColumnName("removed");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ScheduledTime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("scheduled_time");
            entity.Property(e => e.SendStatus)
                .HasDefaultValueSql("'1'")
                .HasColumnName("send_status");
            entity.Property(e => e.ShortBody)
                .HasMaxLength(100)
                .HasComment("short body for push notification lock screen")
                .HasColumnName("short_body");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'unread'")
                .HasColumnType("enum('read','unread')")
                .HasColumnName("status");
            entity.Property(e => e.Subject)
                .HasMaxLength(250)
                .HasColumnName("subject");
            entity.Property(e => e.To)
                .HasColumnType("mediumtext")
                .HasColumnName("to");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'inbox'")
                .HasColumnType("enum('inbox','outbox')")
                .HasColumnName("type");
            entity.Property(e => e.Uid)
                .HasMaxLength(32)
                .HasColumnName("uid");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MailAttachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("mail_attachment");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FileName)
                .HasMaxLength(1000)
                .HasDefaultValueSql("''")
                .HasColumnName("file_name")
                .UseCollation("utf8_bin")
                .HasCharSet("utf8");
            entity.Property(e => e.MailId).HasColumnName("mail_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name")
                .UseCollation("utf8_bin")
                .HasCharSet("utf8");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .HasColumnName("type")
                .UseCollation("utf8_bin")
                .HasCharSet("utf8");
        });

        modelBuilder.Entity<MailCustomgroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("mail_customgroup");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupParams)
                .HasColumnType("text")
                .HasColumnName("group_params");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<MailList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("mail_list")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EventList, "event_list");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description")
                .UseCollation("utf8_bin");
            entity.Property(e => e.EventList).HasColumnName("event_list");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasColumnName("name");
            entity.Property(e => e.Recipients)
                .HasColumnType("text")
                .HasColumnName("recipients")
                .UseCollation("utf8_bin");
            entity.Property(e => e.Temp).HasColumnName("temp");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Mailgroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("mailgroup");

            entity.HasIndex(e => e.OwnerId, "owner_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.OwnerId).HasColumnName("owner_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Password)
                .HasMaxLength(32)
                .HasColumnName("password");
            entity.Property(e => e.Type)
                .HasColumnType("enum('public','personal','mailinglist')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<MailingLetterVariable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("mailing_letter_variable");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.IsAvailableForMails).HasColumnName("is_available_for_mails");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'enabled'")
                .HasColumnType("enum('enabled','disabled')")
                .HasColumnName("status");
            entity.Property(e => e.Value)
                .HasColumnType("text")
                .HasColumnName("value");
        });

        modelBuilder.Entity<MailingNotice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("mailing_notice")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Descr)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("descr");
            entity.Property(e => e.Emails)
                .HasColumnType("text")
                .HasColumnName("emails");
            entity.Property(e => e.Enabled)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("enabled");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.Template).HasColumnName("template");
        });

        modelBuilder.Entity<MailingNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("mailing_notification")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Default).HasColumnName("default");
            entity.Property(e => e.Notification).HasColumnName("notification");
            entity.Property(e => e.Sender).HasColumnName("sender");
            entity.Property(e => e.Template).HasColumnName("template");
        });

        modelBuilder.Entity<MailingNotificationTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("mailing_notification_template", tb => tb.HasComment("Holds letter templates for notifications per component."))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.MailingNotificationId, e.ComponentId }, "mailing_notification_id_component_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.MailingNotificationId).HasColumnName("mailing_notification_id");
            entity.Property(e => e.MailingTemplateId).HasColumnName("mailing_template_id");
        });

        modelBuilder.Entity<MailingTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("mailing_template");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasColumnName("name");
            entity.Property(e => e.Recipients)
                .HasColumnType("text")
                .HasColumnName("recipients");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'enabled'")
                .HasColumnType("enum('enabled','disabled')")
                .HasColumnName("status");
            entity.Property(e => e.Subject)
                .HasMaxLength(255)
                .HasColumnName("subject");
            entity.Property(e => e.Text)
                .HasColumnType("mediumtext")
                .HasColumnName("text");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'email'")
                .HasColumnType("enum('email','print','invitation','label','sms','push notification')")
                .HasColumnName("type");
            entity.Property(e => e.Variables)
                .HasColumnType("text")
                .HasColumnName("variables");
        });

        modelBuilder.Entity<MailingTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("mailing_themes")
                .UseCollation("latin1_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");
        });

        modelBuilder.Entity<ManagerField>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");

            entity
                .ToTable("manager_fields")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasComment("User ID")
                .HasColumnName("user_id");
            entity.Property(e => e.Pin)
                .HasMaxLength(50)
                .HasComment("PIN")
                .HasColumnName("pin");
        });

        modelBuilder.Entity<ManualAchBatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("manual_ach_batch");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<ManualAchEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("manual_ach_entry");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("account_number");
            entity.Property(e => e.Amount)
                .HasColumnType("float(18,2)")
                .HasColumnName("amount");
            entity.Property(e => e.BankAccountType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("bank_account_type");
            entity.Property(e => e.BatchId).HasColumnName("batch_id");
            entity.Property(e => e.RoutingNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("routing_number");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("''")
                .HasColumnType("enum('','Paid','Uncollected')")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<ManualEftBulk>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("manual_eft_bulk")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.CreatedBy, "created_by");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BalanceDate).HasColumnName("balance_date");
            entity.Property(e => e.CreatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedByIntranetId).HasColumnName("created_by_intranet_id");
            entity.Property(e => e.NotificationEmail)
                .HasMaxLength(45)
                .HasColumnName("notification_email");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<ManualEftUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("manual_eft_user")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.BulkEftId, "bulk_eft_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BalanceDate).HasColumnName("balance_date");
            entity.Property(e => e.BulkEftId).HasColumnName("bulk_eft_id");
            entity.Property(e => e.EftResult)
                .HasColumnType("text")
                .HasColumnName("eft_result");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MartialartsStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("martialarts_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MassageStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("massage_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MassagebyroomStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("massagebyroom_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MemberCart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("member_cart")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AppliedPackageId, "applied_package_id");

            entity.HasIndex(e => e.AuthId, "auth_id");

            entity.HasIndex(e => e.ItemId, "item_id");

            entity.HasIndex(e => e.ItemType, "item_type");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllDiscountRates)
                .HasColumnType("text")
                .HasColumnName("all_discount_rates")
                .UseCollation("latin1_general_ci")
                .HasCharSet("latin1");
            entity.Property(e => e.Amount)
                .HasPrecision(9, 2)
                .HasColumnName("amount");
            entity.Property(e => e.AppliedPackageId).HasColumnName("applied_package_id");
            entity.Property(e => e.AuthId).HasColumnName("auth_id");
            entity.Property(e => e.CancelReason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("cancel_reason");
            entity.Property(e => e.CartType).HasColumnName("cart_type");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.DateAdded)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_added");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.DiscountAmount)
                .HasColumnType("float(9,2)")
                .HasColumnName("discount_amount");
            entity.Property(e => e.DiscountAppliedWithAsterisk).HasColumnName("discount_applied_with_asterisk");
            entity.Property(e => e.DiscountAppliedWithPackage).HasColumnName("discount_applied_with_package");
            entity.Property(e => e.DiscountRate)
                .HasPrecision(10, 3)
                .HasColumnName("discount_rate");
            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("item_id");
            entity.Property(e => e.ItemType).HasColumnName("item_type");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Params)
                .HasColumnType("mediumtext")
                .HasColumnName("params");
            entity.Property(e => e.PriceFinal)
                .HasColumnType("decimal(9,2) unsigned")
                .HasColumnName("price_final");
            entity.Property(e => e.PricePerUnit)
                .HasPrecision(9, 2)
                .HasColumnName("price_per_unit");
            entity.Property(e => e.ReallocatePackage)
                .HasDefaultValueSql("'0'")
                .HasColumnName("reallocate_package");
            entity.Property(e => e.Removable).HasColumnName("removable");
            entity.Property(e => e.ReserveExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("reserve_expiration_date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Tax)
                .HasColumnType("float(9,3)")
                .HasColumnName("tax");
            entity.Property(e => e.TaxRateId).HasColumnName("tax_rate_id");
            entity.Property(e => e.TimeAdded)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("time_added");
            entity.Property(e => e.TryReallocatePackage)
                .HasDefaultValueSql("'0'")
                .HasColumnName("try_reallocate_package");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Membership>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("membership");

            entity.HasIndex(e => e.DateFrom, "date_from");

            entity.HasIndex(e => e.DateTo, "date_to");

            entity.HasIndex(e => e.PrimaryId, "primary_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HoldDate).HasColumnName("hold_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ParentMembershipId).HasColumnName("parent_membership_id");
            entity.Property(e => e.Price)
                .HasColumnType("float(18,2)")
                .HasColumnName("price");
            entity.Property(e => e.PrimaryId).HasColumnName("primary_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'unpaid'")
                .HasColumnType("enum('unpaid','paid','canceled')")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MembershipBillingReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("membership_billing_report");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.Period, "period");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingDate)
                .HasComment("Charge Report Date or Payment Date Index")
                .HasColumnType("datetime")
                .HasColumnName("accounting_date");
            entity.Property(e => e.AddedBy)
                .HasComment("Added By User ID")
                .HasColumnName("added_by");
            entity.Property(e => e.BillDate)
                .HasComment("Charge Bill Date or Payment Date Index")
                .HasColumnType("datetime")
                .HasColumnName("bill_date");
            entity.Property(e => e.Billed)
                .HasComment("Whether the item was already billed till generated_date")
                .HasColumnName("billed");
            entity.Property(e => e.BilledBy)
                .HasComment("Billed By User ID")
                .HasColumnName("billed_by");
            entity.Property(e => e.CacheStatus)
                .IsRequired()
                .HasDefaultValueSql("'2'")
                .HasColumnName("cache_status");
            entity.Property(e => e.ChargeMode)
                .HasDefaultValueSql("'1'")
                .HasComment("Charge Mode")
                .HasColumnName("charge_mode");
            entity.Property(e => e.CurrentAmount)
                .HasPrecision(12, 2)
                .HasComment("Final Charge Price or Total Payment Amount")
                .HasColumnName("current_amount");
            entity.Property(e => e.FeeType)
                .HasMaxLength(64)
                .HasDefaultValueSql("''")
                .HasColumnName("fee_type");
            entity.Property(e => e.GeneratedDate)
                .HasComment("The date and time when the row was generated")
                .HasColumnType("datetime")
                .HasColumnName("generated_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.InvoiceDate)
                .HasComment("Charge Invoice Date or Payment Date Index")
                .HasColumnType("datetime")
                .HasColumnName("invoice_date");
            entity.Property(e => e.InvoiceId).HasColumnName("invoice_id");
            entity.Property(e => e.OriginalAmount)
                .HasPrecision(12, 2)
                .HasComment("Original Charge Price or Total Payment Amount")
                .HasColumnName("original_amount");
            entity.Property(e => e.Period)
                .HasMaxLength(10)
                .HasComment("Billing period (date)")
                .HasColumnName("period");
            entity.Property(e => e.Source)
                .HasComment("Data source")
                .HasColumnName("source");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MembershipCancellationReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("membership_cancellation_reasons");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasColumnName("reason");
        });

        modelBuilder.Entity<MembershipContractFeeInterval>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("membership_contract_fee_interval")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ContractId, "contract_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ContractId)
                .HasComment("membership_contract")
                .HasColumnName("contract_id");
            entity.Property(e => e.DependentType).HasColumnName("dependent_type");
            entity.Property(e => e.Discount)
                .HasPrecision(10, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("discount");
            entity.Property(e => e.EndAge)
                .HasColumnType("decimal(6,2) unsigned")
                .HasColumnName("end_age");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.MembershipFee)
                .HasPrecision(10, 2)
                .HasColumnName("membership_fee");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.RowType).HasColumnName("row_type");
            entity.Property(e => e.StartAge)
                .HasColumnType("decimal(6,2) unsigned")
                .HasColumnName("start_age");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MembershipContractFeeMonthly>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("membership_contract_fee_monthly")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ContractId, "contract_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Col).HasColumnName("col");
            entity.Property(e => e.ContractId)
                .HasComment("membership_contract")
                .HasColumnName("contract_id");
            entity.Property(e => e.Discount)
                .HasPrecision(10, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("discount");
            entity.Property(e => e.FullValue)
                .HasPrecision(9, 2)
                .HasColumnName("full_value");
            entity.Property(e => e.GridValue)
                .HasPrecision(12, 2)
                .HasColumnName("grid_value");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.IsHolded).HasColumnName("is_holded");
            entity.Property(e => e.Row).HasColumnName("row");
            entity.Property(e => e.RowType).HasColumnName("row_type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Value)
                .HasPrecision(10, 2)
                .HasColumnName("value");
        });

        modelBuilder.Entity<MembershipFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("membership_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EndAge)
                .HasColumnType("decimal(6,2) unsigned")
                .HasColumnName("end_age");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(10, 2)
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.MembershipFee1)
                .HasPrecision(10, 2)
                .HasColumnName("membership_fee");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.StartAge)
                .HasColumnType("decimal(6,2) unsigned")
                .HasColumnName("start_age");
            entity.Property(e => e.Type).HasColumnName("type");

            entity.HasOne(d => d.Group).WithMany(p => p.MembershipFees)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("membership_fee_ibfk_1");
        });

        modelBuilder.Entity<MembershipRejected>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("membership_rejected")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(10, 2)
                .HasColumnName("amount");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.MembershipId).HasColumnName("membership_id");
            entity.Property(e => e.PurchaseDate).HasColumnName("purchase_date");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<MembershipType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("membership_type")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Menu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("menu");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Icon)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("icon");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Ordering).HasColumnName("ordering");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .HasColumnName("type");
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .HasColumnName("url");
        });

        modelBuilder.Entity<MerchantRetailer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("merchant_retailer", tb => tb.HasComment("Merchant Account Retailer"));

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<MessageArchive>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("message_archive")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.MailId, e.UserToContact }, "mail_id_user_to_contact");

            entity.HasIndex(e => e.SentDate, "sent_date");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.Type, "type");

            entity.HasIndex(e => e.UniqueId, "unique_id");

            entity.HasIndex(e => e.UserToId, "user_to_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Body)
                .HasColumnType("text")
                .HasColumnName("body");
            entity.Property(e => e.ChangeStatusDate)
                .HasColumnType("datetime")
                .HasColumnName("change_status_date");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.MailId).HasColumnName("mail_id");
            entity.Property(e => e.NumSmsSegments).HasColumnName("num_SMS_segments");
            entity.Property(e => e.SentDate)
                .HasColumnType("datetime")
                .HasColumnName("sent_date");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.StatusMessage)
                .HasColumnType("text")
                .HasColumnName("status_message");
            entity.Property(e => e.Subject)
                .HasMaxLength(256)
                .HasColumnName("subject");
            entity.Property(e => e.Type)
                .HasColumnType("enum('Email','Sms','Push Notification')")
                .HasColumnName("type");
            entity.Property(e => e.UniqueId).HasColumnName("unique_id");
            entity.Property(e => e.UserCreateId).HasColumnName("user_create_id");
            entity.Property(e => e.UserFromContact)
                .HasMaxLength(256)
                .HasColumnName("user_from_contact")
                .UseCollation("latin1_swedish_ci")
                .HasCharSet("latin1");
            entity.Property(e => e.UserFromId).HasColumnName("user_from_id");
            entity.Property(e => e.UserToContact)
                .HasMaxLength(256)
                .HasColumnName("user_to_contact")
                .UseCollation("latin1_swedish_ci")
                .HasCharSet("latin1");
            entity.Property(e => e.UserToId).HasColumnName("user_to_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<Metric>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("metric")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InUse)
                .HasDefaultValueSql("'1'")
                .HasComment("is active")
                .HasColumnName("in_use");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.Type)
                .HasColumnType("enum('numeric','currency','text','list','date','length')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<MigrationVersion>(entity =>
        {
            entity.HasKey(e => e.Version).HasName("PRIMARY");

            entity
                .ToTable("migration_version")
                .HasCharSet("utf8")
                .UseCollation("utf8_unicode_ci");

            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<Module>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("module");

            entity.HasIndex(e => e.InstallationId, "installation_id");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InstallationId).HasColumnName("installation_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Ordering).HasColumnName("ordering");
            entity.Property(e => e.Parametrs)
                .HasColumnType("text")
                .HasColumnName("parametrs");
            entity.Property(e => e.Position)
                .HasMaxLength(100)
                .HasDefaultValueSql("'left'")
                .HasColumnName("position");
        });

        modelBuilder.Entity<ModuleInstalled>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("module_installed");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Area)
                .HasDefaultValueSql("'public'")
                .HasColumnType("enum('admin','public')")
                .HasColumnName("area");
            entity.Property(e => e.Author)
                .HasMaxLength(200)
                .HasColumnName("author");
            entity.Property(e => e.ClassName)
                .HasMaxLength(200)
                .HasColumnName("class_name");
            entity.Property(e => e.CreationDate)
                .HasMaxLength(200)
                .HasColumnName("creation_date");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.InstallationDate).HasColumnName("installation_date");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.ParametrsStructure)
                .HasColumnType("text")
                .HasColumnName("parametrs_structure");
            entity.Property(e => e.Status)
                .HasColumnType("enum('available','notavailable')")
                .HasColumnName("status");
            entity.Property(e => e.Version)
                .HasMaxLength(50)
                .HasColumnName("version");
        });

        modelBuilder.Entity<MotocrossStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("motocross_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Note>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("note");

            entity.HasIndex(e => new { e.Date, e.EventId }, "date");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.NoteSubjectId, "note_subject_id");

            entity.HasIndex(e => e.Private, "private");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.HasIndex(e => e.ShowAtCheckin, "show_at_checkin");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Dismissed).HasColumnName("dismissed");
            entity.Property(e => e.DismissedBy).HasColumnName("dismissed_by");
            entity.Property(e => e.Edited)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("edited");
            entity.Property(e => e.EditedBy).HasColumnName("edited_by");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpirationDateOnCheckin).HasColumnName("expiration_date_on_checkin");
            entity.Property(e => e.Note1)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.NoteSubjectId)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("note_subject_id");
            entity.Property(e => e.NoteSubjectText)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("note_subject_text");
            entity.Property(e => e.Private).HasColumnName("private");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ShowAtCheckin).HasColumnName("show_at_checkin");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'profile'")
                .HasColumnType("enum('profile','payrolls','event','schedule','checkin','special_needs','equipment','store_vendor','prospect','item_manufacturer')")
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<NoteSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("note_setting")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Enabled).HasColumnName("enabled");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
        });

        modelBuilder.Entity<NoteSubject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("note_subject")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
        });

        modelBuilder.Entity<NoteSubjectLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("note_subject_location")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.SubjectId, e.LocationId }, "combined");

            entity.Property(e => e.LocationId)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("location_id");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("notification");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.HasChildren).HasColumnName("has_children");
            entity.Property(e => e.IsHidden).HasColumnName("is_hidden");
            entity.Property(e => e.IsStaff).HasColumnName("is_staff");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PushSupport).HasColumnName("push_support");
            entity.Property(e => e.SmsSupport).HasColumnName("sms_support");
            entity.Property(e => e.Sort)
                .HasDefaultValueSql("'99999'")
                .HasColumnName("sort");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<NotificationList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("notification_list")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.SenderType).HasColumnName("sender_type");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Time)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("time");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<NutritionStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("nutrition_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<OauthAccessToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("oauth_access_token")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.RefreshToken, "oauth_access_token_uq_refresh_token").IsUnique();

            entity.HasIndex(e => e.PhpSession, "php_session");

            entity.HasIndex(e => e.SessionId, "session_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AlgorithmType)
                .HasDefaultValueSql("'hmac'")
                .HasColumnType("enum('hmac','rsa')")
                .HasColumnName("algorithm_type");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.ExpireTime)
                .HasColumnType("datetime")
                .HasColumnName("expire_time");
            entity.Property(e => e.IssuedBy)
                .HasDefaultValueSql("'zf1'")
                .HasColumnType("enum('zf1','ze')")
                .HasColumnName("issued_by");
            entity.Property(e => e.PhpSession)
                .HasMaxLength(45)
                .HasColumnName("php_session");
            entity.Property(e => e.RefreshToken).HasColumnName("refresh_token");
            entity.Property(e => e.Scopes)
                .HasColumnType("text")
                .HasColumnName("scopes");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.TokenSecret)
                .HasMaxLength(32)
                .HasColumnName("token_secret");
        });

        modelBuilder.Entity<OauthClient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("oauth_client")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("''")
                .HasColumnName("id");
            entity.Property(e => e.AlgorithmType)
                .HasDefaultValueSql("'hmac'")
                .HasColumnType("enum('hmac','rsa')")
                .HasColumnName("algorithm_type");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Name)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Secret)
                .HasColumnType("text")
                .HasColumnName("secret");
        });

        modelBuilder.Entity<OauthClientScope>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("oauth_client_scope")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ClientId, "oauth_client_scope_fk_oauth_client");

            entity.HasIndex(e => e.ScopeId, "oauth_client_scope_fk_oauth_scope");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClientId).HasColumnName("client_id");
            entity.Property(e => e.ScopeId).HasColumnName("scope_id");

            entity.HasOne(d => d.Client).WithMany(p => p.OauthClientScopes)
                .HasForeignKey(d => d.ClientId)
                .HasConstraintName("oauth_client_scope_fk_oauth_client");

            entity.HasOne(d => d.Scope).WithMany(p => p.OauthClientScopes)
                .HasForeignKey(d => d.ScopeId)
                .HasConstraintName("oauth_client_scope_fk_oauth_scope");
        });

        modelBuilder.Entity<OauthScope>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("oauth_scope")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllowUnauthenticatedUsers).HasColumnName("allow_unauthenticated_users");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("name");
        });

        modelBuilder.Entity<OauthSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("oauth_session")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.UserId, e.ClientId }, "user_id_client_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClientId).HasColumnName("client_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<OffsiteStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("offsite_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<OnlineBookingSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("online_booking_settings")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "fk_online_booking_settings_component");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Settings)
                .HasColumnType("text")
                .HasColumnName("settings");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.Component).WithMany(p => p.OnlineBookingSettings)
                .HasForeignKey(d => d.ComponentId)
                .HasConstraintName("fk_online_booking_settings_component");
        });

        modelBuilder.Entity<OnlineMemberCart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("online_member_cart")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GuestHashId, "guest_hash_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.GuestHashId).HasColumnName("guest_hash_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<OnlineMemberCartBundleItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("online_member_cart_bundle_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.BundleId, "bundle_id");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.OnlineCartId, "online_cart_id");

            entity.HasIndex(e => e.OnlineMemberCartItemId, "online_member_cart_item_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BundleId).HasColumnName("bundle_id");
            entity.Property(e => e.DependentUserIds)
                .HasColumnType("json")
                .HasColumnName("dependent_user_ids");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.NumberOfDependents).HasColumnName("number_of_dependents");
            entity.Property(e => e.OnlineCartId).HasColumnName("online_cart_id");
            entity.Property(e => e.OnlineMemberCartItemId).HasColumnName("online_member_cart_item_id");
            entity.Property(e => e.SecondaryUserId).HasColumnName("secondary_user_id");
        });

        modelBuilder.Entity<OnlineMemberCartGroupItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("online_member_cart_group_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.OnlineCartId, "online_cart_id");

            entity.HasIndex(e => e.OnlineMemberCartItemId, "online_member_cart_item_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DelayIntervalAmount).HasColumnName("delay_interval_amount");
            entity.Property(e => e.DelayIntervalBillType)
                .HasColumnType("enum('start_date','start_bill_date')")
                .HasColumnName("delay_interval_bill_type");
            entity.Property(e => e.DelayIntervalType)
                .HasColumnType("enum('day','week','month','date')")
                .HasColumnName("delay_interval_type");
            entity.Property(e => e.DependentUserIds)
                .HasColumnType("json")
                .HasColumnName("dependent_user_ids");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.NumberOfDependents).HasColumnName("number_of_dependents");
            entity.Property(e => e.OnlineCartId).HasColumnName("online_cart_id");
            entity.Property(e => e.OnlineMemberCartItemId).HasColumnName("online_member_cart_item_id");
            entity.Property(e => e.SecondaryUserId).HasColumnName("secondary_user_id");
            entity.Property(e => e.StartDay).HasColumnName("start_day");
            entity.Property(e => e.StartMonth).HasColumnName("start_month");
        });

        modelBuilder.Entity<OnlineMemberCartItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("online_member_cart_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.OnlineCartId, "online_cart_id");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => e.Role, "role");

            entity.HasIndex(e => e.Type, "type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.OnlineCartId).HasColumnName("online_cart_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Role)
                .HasDefaultValueSql("'primary'")
                .HasColumnType("enum('primary','dependent')")
                .HasColumnName("role");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'group'")
                .HasColumnType("enum('group','package','bundle')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<OnlineMemberCartPackageItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("online_member_cart_package_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.OnlineCartId, "online_cart_id");

            entity.HasIndex(e => e.OnlineMemberCartItemId, "online_member_cart_item_id");

            entity.HasIndex(e => new { e.PackageId, e.RateId }, "package_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.OnlineCartId).HasColumnName("online_cart_id");
            entity.Property(e => e.OnlineMemberCartItemId).HasColumnName("online_member_cart_item_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.RateId).HasColumnName("rate_id");
        });

        modelBuilder.Entity<OnlineRegistrationRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("online_registration_rules");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Group).HasColumnName("group");
            entity.Property(e => e.RestrictionDescr)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("restriction_descr");
            entity.Property(e => e.Season).HasColumnName("season");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("type");
        });

        modelBuilder.Entity<OnlineReservationMatrix>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("online_reservation_matrix");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArrayId).HasColumnName("array_id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.DaysAmount).HasColumnName("days_amount");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
        });

        modelBuilder.Entity<OverriddenRegistration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("overridden_registrations")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Class)
                .HasMaxLength(255)
                .HasColumnName("class");
            entity.Property(e => e.ClassName)
                .HasMaxLength(512)
                .HasColumnName("class_name");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.MemberId).HasColumnName("member_id");
            entity.Property(e => e.PostDate)
                .HasColumnType("datetime")
                .HasColumnName("post_date");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("package")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AddedBy, "added_by");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.ExpirationDate, "expiration_date");

            entity.HasIndex(e => e.Name, "name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("accounting_group_id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.AnyStaff).HasColumnName("any_staff");
            entity.Property(e => e.AutoRenew).HasColumnName("auto_renew");
            entity.Property(e => e.AutoRenewCount).HasColumnName("auto_renew_count");
            entity.Property(e => e.AutoRenewInterval).HasColumnName("auto_renew_interval");
            entity.Property(e => e.AutoRenewType)
                .HasColumnType("enum('expiration_and_usage','expiration_only','usage_only')")
                .HasColumnName("auto_renew_type");
            entity.Property(e => e.AutoRenewUnlimited).HasColumnName("auto_renew_unlimited");
            entity.Property(e => e.CanExpire).HasColumnName("can_expire");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ContractTermsId).HasColumnName("contract_terms_id");
            entity.Property(e => e.Count)
                .HasPrecision(8, 3)
                .HasColumnName("count");
            entity.Property(e => e.DayOfWeek)
                .IsRequired()
                .HasDefaultValueSql("'-1'")
                .HasColumnName("day_of_week");
            entity.Property(e => e.DefaultShareSetting)
                .HasComment("1 - yes, 0 - no")
                .HasColumnName("default_share_setting");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DescriptionMobile)
                .HasMaxLength(500)
                .HasColumnName("description_mobile");
            entity.Property(e => e.ExpirationDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("expiration_date");
            entity.Property(e => e.ExpirationDurationCount).HasColumnName("expiration_duration_count");
            entity.Property(e => e.ExpirationDurationType)
                .HasColumnType("enum('days','weeks','months')")
                .HasColumnName("expiration_duration_type");
            entity.Property(e => e.ExpirationType)
                .HasColumnType("enum('by_date','by_duration')")
                .HasColumnName("expiration_type");
            entity.Property(e => e.HasPaymentPlan).HasColumnName("has_payment_plan");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LessonType).HasColumnName("lesson_type");
            entity.Property(e => e.MaximumUses).HasColumnName("maximum_uses");
            entity.Property(e => e.MaximumUsesPeriod)
                .HasDefaultValueSql("'week'")
                .HasColumnType("enum('week','month')")
                .HasColumnName("maximum_uses_period");
            entity.Property(e => e.MobileHasPaymentPlan).HasColumnName("mobile_has_payment_plan");
            entity.Property(e => e.MobilePaymentPlan).HasColumnName("mobile_payment_plan");
            entity.Property(e => e.MobileRegRequirePayment)
                .HasDefaultValueSql("'1'")
                .HasColumnName("mobile_reg_require_payment");
            entity.Property(e => e.MobileSaleEnabled)
                .HasDefaultValueSql("'0'")
                .HasColumnName("mobile_sale_enabled");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.NameMobile)
                .HasMaxLength(250)
                .HasColumnName("name_mobile");
            entity.Property(e => e.NonmemberPrice)
                .HasPrecision(8, 2)
                .HasColumnName("nonmember_price");
            entity.Property(e => e.NotificationExpired).HasColumnName("notification_expired");
            entity.Property(e => e.NotificationRenewal).HasColumnName("notification_renewal");
            entity.Property(e => e.PackageType)
                .HasDefaultValueSql("'groupex'")
                .HasColumnType("enum('groupex','individual')")
                .HasColumnName("package_type");
            entity.Property(e => e.PaymentPlan).HasColumnName("payment_plan");
            entity.Property(e => e.PlayerOnCourt)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("player_on_court");
            entity.Property(e => e.PosSaleEnabled).HasColumnName("pos_sale_enabled");
            entity.Property(e => e.Price)
                .HasPrecision(8, 2)
                .HasColumnName("price");
            entity.Property(e => e.PriceType)
                .HasMaxLength(255)
                .HasDefaultValueSql("'60'")
                .HasColumnName("price_type");
            entity.Property(e => e.PrimaryActivityPackage).HasColumnName("primary_activity_package");
            entity.Property(e => e.ProfileSaleEnabled).HasColumnName("profile_sale_enabled");
            entity.Property(e => e.RenewalInterval).HasColumnName("renewal_interval");
            entity.Property(e => e.RenewalIntervalPeriod)
                .HasDefaultValueSql("'days'")
                .HasColumnType("enum('days','weeks','months')")
                .HasColumnName("renewal_interval_period");
            entity.Property(e => e.SendReminderDays).HasColumnName("send_reminder_days");
            entity.Property(e => e.SessionCarryOverEnabled).HasColumnName("session_carry_over_enabled");
            entity.Property(e => e.ShareWithLinked)
                .HasDefaultValueSql("'allowed'")
                .HasColumnType("enum('allowed','not_allowed')")
                .HasColumnName("share_with_linked");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<PackageCalendar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("package_calendar")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.PackageId, e.CalendarId }, "package_calendar_index").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CalendarId).HasColumnName("calendar_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
        });

        modelBuilder.Entity<PackageComponentAvailability>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("package_component_availability")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.IsEnabled, "is_enabled");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
        });

        modelBuilder.Entity<PackageDuration>(entity =>
        {
            entity.HasKey(e => new { e.PackageId, e.Duration })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("package_duration")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
        });

        modelBuilder.Entity<PackageEntity>(entity =>
        {
            entity.HasKey(e => new { e.PackageId, e.EntityId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("package_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
        });

        modelBuilder.Entity<PackageEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("package_event")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.PackageId, "package_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
        });

        modelBuilder.Entity<PackageGroup>(entity =>
        {
            entity.HasKey(e => new { e.PackageId, e.GroupId, e.GroupType })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity
                .ToTable("package_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GroupType).HasColumnName("group_type");
        });

        modelBuilder.Entity<PackageLessonType>(entity =>
        {
            entity.HasKey(e => new { e.PackageId, e.LessonType, e.ComponentId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity
                .ToTable("package_lesson_type")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.LessonType).HasColumnName("lesson_type");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
        });

        modelBuilder.Entity<PackageLocation>(entity =>
        {
            entity.HasKey(e => new { e.PackageId, e.LocationId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("package_location")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
        });

        modelBuilder.Entity<PackagePlayersCount>(entity =>
        {
            entity.HasKey(e => new { e.PackageId, e.Players })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("package_players_count")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.Players).HasColumnName("players");
        });

        modelBuilder.Entity<PackageRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("package_rates")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.PackageId, "package_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.Price)
                .HasPrecision(8, 2)
                .HasColumnName("price");
            entity.Property(e => e.Qnt).HasColumnName("qnt");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<PackageSaleEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("package_sale_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.PackageId, "package_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
        });

        modelBuilder.Entity<PackageStaff>(entity =>
        {
            entity.HasKey(e => new { e.PackageId, e.StaffId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("package_staff")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
        });

        modelBuilder.Entity<PaddletennisStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("paddletennis_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<PadelStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("padel_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("payment");

            entity.HasIndex(e => e.AccGroupId, "acc_group_id");

            entity.HasIndex(e => e.CcTransactionId, "cc_transaction_id");

            entity.HasIndex(e => e.CertificateId, "certificate_id");

            entity.HasIndex(e => e.ChargeId, "charge_id");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.DateIndex, "date_index");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => new { e.EntityId, e.IsPosted, e.DateIndex }, "entity_posted_date");

            entity.HasIndex(e => e.EventDate, "event_date");

            entity.HasIndex(e => e.EventStatus, "event_status");

            entity.HasIndex(e => e.ForeignId, "foreign_id");

            entity.HasIndex(e => e.IsAdjustment, "is_adjustment");

            entity.HasIndex(e => e.IsEft, "is_eft");

            entity.HasIndex(e => e.IsOnline, "is_online");

            entity.HasIndex(e => e.IsPosted, "is_posted");

            entity.HasIndex(e => e.ItemId, "item_id");

            entity.HasIndex(e => e.PEventId, "p_event_id");

            entity.HasIndex(e => e.PMode, "p_mode");

            entity.HasIndex(e => e.PResourceId, "p_resource_id");

            entity.HasIndex(e => e.PScheduleId, "p_schedule_id");

            entity.HasIndex(e => e.PayerId, "payer_id");

            entity.HasIndex(e => e.PfChargeId, "pf_charge_id");

            entity.HasIndex(e => new { e.PfId, e.PfAccGroup, e.PfTypeId }, "pf_id");

            entity.HasIndex(e => e.PosId, "pos_id");

            entity.HasIndex(e => e.PostedDate, "posted_date");

            entity.HasIndex(e => e.PrevId, "prev_id");

            entity.HasIndex(e => e.Pstatus, "pstatus");

            entity.HasIndex(e => e.PtransactionId, "ptransaction_id");

            entity.HasIndex(e => e.RefundId, "refund_id");

            entity.HasIndex(e => e.SellId, "sell_id");

            entity.HasIndex(e => e.ShiftId, "shift_id");

            entity.HasIndex(e => e.TransactionId, "transaction_id");

            entity.HasIndex(e => e.TypeId, "type_id");

            entity.HasIndex(e => e.UpackageId, "upackage_id");

            entity.HasIndex(e => e.UserFor, "user_for");

            entity.HasIndex(e => e.UserHomeClub, "user_home_club");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.HasIndex(e => e.VoidedDate, "voided_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.Amount)
                .HasPrecision(12, 2)
                .HasColumnName("amount");
            entity.Property(e => e.AmountReturned)
                .HasPrecision(12, 2)
                .HasColumnName("amount_returned");
            entity.Property(e => e.AmountTotal)
                .HasPrecision(12, 2)
                .HasColumnName("amount_total");
            entity.Property(e => e.CcTransactionId).HasColumnName("cc_transaction_id");
            entity.Property(e => e.CertificateId).HasColumnName("certificate_id");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.CheckId).HasColumnName("check_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.DateIndex).HasColumnName("date_index");
            entity.Property(e => e.DepositPayment).HasColumnName("deposit_payment");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Discount)
                .HasPrecision(12, 2)
                .HasColumnName("discount");
            entity.Property(e => e.EntityId)
                .HasComment("club id")
                .HasColumnName("entity_id");
            entity.Property(e => e.EventDate).HasColumnName("event_date");
            entity.Property(e => e.EventStatus).HasColumnName("event_status");
            entity.Property(e => e.ForeignId)
                .HasMaxLength(200)
                .HasDefaultValueSql("'0'")
                .HasColumnName("foreign_id");
            entity.Property(e => e.ForeignText)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("foreign_text");
            entity.Property(e => e.FromEntityId).HasColumnName("from_entity_id");
            entity.Property(e => e.Hide).HasColumnName("hide");
            entity.Property(e => e.IsAdjustment).HasColumnName("is_adjustment");
            entity.Property(e => e.IsEft).HasColumnName("is_eft");
            entity.Property(e => e.IsOnline).HasColumnName("is_online");
            entity.Property(e => e.IsPosted).HasColumnName("is_posted");
            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("item_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PEventId).HasColumnName("p_event_id");
            entity.Property(e => e.PMode)
                .HasDefaultValueSql("'1'")
                .HasColumnName("p_mode");
            entity.Property(e => e.PResourceId).HasColumnName("p_resource_id");
            entity.Property(e => e.PScheduleId).HasColumnName("p_schedule_id");
            entity.Property(e => e.PackageChId).HasColumnName("package_ch_id");
            entity.Property(e => e.PaidBefore)
                .HasPrecision(12, 2)
                .HasColumnName("paid_before");
            entity.Property(e => e.PaidToday)
                .HasPrecision(12, 2)
                .HasColumnName("paid_today");
            entity.Property(e => e.PayerId).HasColumnName("payer_id");
            entity.Property(e => e.PfAccGroup).HasColumnName("pf_acc_group");
            entity.Property(e => e.PfChargeId).HasColumnName("pf_charge_id");
            entity.Property(e => e.PfId).HasColumnName("pf_id");
            entity.Property(e => e.PfTypeId).HasColumnName("pf_type_id");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.PostedDate).HasColumnName("posted_date");
            entity.Property(e => e.PrevData)
                .HasColumnType("mediumtext")
                .HasColumnName("prev_data");
            entity.Property(e => e.PrevId).HasColumnName("prev_id");
            entity.Property(e => e.Pstatus)
                .HasDefaultValueSql("'1'")
                .HasColumnName("pstatus");
            entity.Property(e => e.PtransactionId).HasColumnName("ptransaction_id");
            entity.Property(e => e.RefundId).HasColumnName("refund_id");
            entity.Property(e => e.SellId).HasColumnName("sell_id");
            entity.Property(e => e.ShiftId).HasColumnName("shift_id");
            entity.Property(e => e.ShopCartId).HasColumnName("shop_cart_id");
            entity.Property(e => e.TaxAmount)
                .HasPrecision(12, 2)
                .HasColumnName("tax_amount");
            entity.Property(e => e.TaxReversed)
                .HasPrecision(12, 2)
                .HasColumnName("tax_reversed");
            entity.Property(e => e.TaxReversedId).HasColumnName("tax_reversed_id");
            entity.Property(e => e.TaxReversedRate)
                .HasPrecision(9, 4)
                .HasColumnName("tax_reversed_rate");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.Unreal).HasColumnName("unreal");
            entity.Property(e => e.UpackageId).HasColumnName("upackage_id");
            entity.Property(e => e.UserFor).HasColumnName("user_for");
            entity.Property(e => e.UserHomeClub)
                .HasComment("club id taken from user profile")
                .HasColumnName("user_home_club");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.VirtualCash).HasColumnName("virtual_cash");
            entity.Property(e => e.Voided).HasColumnName("voided");
            entity.Property(e => e.VoidedDate).HasColumnName("voided_date");
            entity.Property(e => e.VoidedTime)
                .HasColumnType("datetime")
                .HasColumnName("voided_time");
        });

        modelBuilder.Entity<PaymentRequestLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("payment_request_log")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ApiErrorCode)
                .HasMaxLength(255)
                .HasDefaultValueSql("'0000'")
                .HasColumnName("api_error_code");
            entity.Property(e => e.ApiErrorMessage)
                .HasMaxLength(255)
                .HasColumnName("api_error_message");
            entity.Property(e => e.ApiMethod)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("api_method")
                .UseCollation("latin1_swedish_ci")
                .HasCharSet("latin1");
            entity.Property(e => e.CallStack)
                .HasColumnType("text")
                .HasColumnName("call_stack");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Host)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("host");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.RequestData)
                .HasColumnType("text")
                .HasColumnName("request_data");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.ResponseData)
                .HasColumnType("text")
                .HasColumnName("response_data");
            entity.Property(e => e.SystemError)
                .HasMaxLength(255)
                .HasColumnName("system_error");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<PaymentTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("payment_transaction");

            entity.HasIndex(e => e.CcTransactionId, "cc_transaction_id");

            entity.HasIndex(e => e.CertificateId, "certificate_id");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.IsEft, "is_eft");

            entity.HasIndex(e => e.IsPosted, "is_posted");

            entity.HasIndex(e => e.PMode, "p_mode");

            entity.HasIndex(e => e.PayerId, "payer_id");

            entity.HasIndex(e => e.PosId, "pos_id");

            entity.HasIndex(e => e.PostedDate, "posted_date");

            entity.HasIndex(e => e.ShiftId, "shift_id");

            entity.HasIndex(e => e.TransactionId, "transaction_id");

            entity.HasIndex(e => e.TypeId, "type_id");

            entity.HasIndex(e => e.UpackageId, "upackage_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.Amount)
                .HasColumnType("float(18,2)")
                .HasColumnName("amount");
            entity.Property(e => e.CcTransactionId).HasColumnName("cc_transaction_id");
            entity.Property(e => e.CertificateId).HasColumnName("certificate_id");
            entity.Property(e => e.CheckId).HasColumnName("check_id");
            entity.Property(e => e.CreditAmount)
                .HasColumnType("float(18,2)")
                .HasColumnName("credit_amount");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.HasPrevId).HasColumnName("has_prev_id");
            entity.Property(e => e.IsEft).HasColumnName("is_eft");
            entity.Property(e => e.IsPosted).HasColumnName("is_posted");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.OriginalAmount)
                .HasColumnType("float(18,2)")
                .HasColumnName("original_amount");
            entity.Property(e => e.OriginalDescription)
                .HasColumnType("text")
                .HasColumnName("original_description");
            entity.Property(e => e.PMode)
                .HasDefaultValueSql("'1'")
                .HasColumnName("p_mode");
            entity.Property(e => e.PackageChId).HasColumnName("package_ch_id");
            entity.Property(e => e.PayerId).HasColumnName("payer_id");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.PostedDate).HasColumnName("posted_date");
            entity.Property(e => e.Pstatus)
                .HasDefaultValueSql("'1'")
                .HasColumnName("pstatus");
            entity.Property(e => e.ShiftId).HasColumnName("shift_id");
            entity.Property(e => e.Time)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("time");
            entity.Property(e => e.TransactionId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("transaction_id");
            entity.Property(e => e.TransactionType).HasColumnName("transaction_type");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.UpackageId).HasColumnName("upackage_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.VirtualCash).HasColumnName("virtual_cash");
        });

        modelBuilder.Entity<PaymentTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("payment_transfer")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.FromPaymentId, "from_payment_id");

            entity.HasIndex(e => e.FromUserId, "from_user_id");

            entity.HasIndex(e => e.ToPaymentId, "to_payment_id");

            entity.HasIndex(e => e.ToUserId, "to_user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasComment("date of the transfer")
                .HasColumnName("date");
            entity.Property(e => e.FromPaymentId)
                .HasComment("original payment")
                .HasColumnName("from_payment_id");
            entity.Property(e => e.FromUserId)
                .HasComment("user who paid")
                .HasColumnName("from_user_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ToPaymentId)
                .HasComment("applied credit")
                .HasColumnName("to_payment_id");
            entity.Property(e => e.ToUserId)
                .HasComment("user who had the charge")
                .HasColumnName("to_user_id");
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("payment_type");

            entity.HasIndex(e => e.Sort, "sort");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupName)
                .HasColumnType("text")
                .HasColumnName("acc_group_name");
            entity.Property(e => e.BatchEnabled).HasColumnName("batch_enabled");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.GlCode)
                .HasColumnType("text")
                .HasColumnName("gl_code");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.PosEnabled).HasColumnName("pos_enabled");
            entity.Property(e => e.QbExport).HasColumnName("qb_export");
            entity.Property(e => e.Sort).HasColumnName("sort");
            entity.Property(e => e.StatementEnabled).HasColumnName("statement_enabled");
            entity.Property(e => e.Status)
                .HasColumnType("enum('enabled','disabled')")
                .HasColumnName("status");
            entity.Property(e => e.System).HasColumnName("system");
        });

        modelBuilder.Entity<Payroll>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("payroll")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Blocked, "blocked");

            entity.HasIndex(e => e.BlockedDate, "blocked_date");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.DepartmentId, "department_id");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.HasIndex(e => new { e.StaffId, e.Date, e.EventId }, "staff_id_2");

            entity.HasIndex(e => e.Type, "type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.Amount)
                .HasColumnType("float(18,2)")
                .HasColumnName("amount");
            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.BlockedDate).HasColumnName("blocked_date");
            entity.Property(e => e.BlockedTime)
                .HasColumnType("datetime")
                .HasColumnName("blocked_time");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DateTime)
                .HasColumnType("datetime")
                .HasColumnName("date_time");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EntityId)
                .HasDefaultValueSql("'1'")
                .HasColumnName("entity_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'custom'")
                .HasColumnType("enum('custom','lesson','comission','training','repair','spa-service','by-hours','by-revenue')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<PayrollApproved>(entity =>
        {
            entity.HasKey(e => new { e.StaffId, e.DateFrom, e.DateTo })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("payroll_approved");

            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.DateFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_to");
        });

        modelBuilder.Entity<PayrollItemQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("payroll_item_question");

            entity.HasIndex(e => e.PayrollStaff, "payroll_staff");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.PayrollRowId).HasColumnName("payroll_row_id");
            entity.Property(e => e.PayrollStaff).HasColumnName("payroll_staff");
            entity.Property(e => e.Question)
                .HasColumnType("text")
                .HasColumnName("question");
            entity.Property(e => e.Type)
                .HasColumnType("enum('schedule')")
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<PayrollLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("payroll_log")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.PayrollType, "payroll_type");

            entity.HasIndex(e => e.RowType, "row_type");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.HasIndex(e => e.Type, "type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(9, 2)
                .HasColumnName("amount");
            entity.Property(e => e.AttendanceIncomplete).HasColumnName("attendance_incomplete");
            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.BlockedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("blocked_date");
            entity.Property(e => e.BlockedTime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("blocked_time");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Date)
                .HasComment("date to display on")
                .HasColumnName("date");
            entity.Property(e => e.DateTime)
                .HasColumnType("datetime")
                .HasColumnName("date_time");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventType).HasColumnName("event_type");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LastUrl)
                .HasMaxLength(255)
                .HasComment("no need to store all track, keep the url of last change")
                .HasColumnName("last_url");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.LogType)
                .HasComment("reason behind this change")
                .HasColumnName("log_type");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.PayrollType)
                .HasDefaultValueSql("'1'")
                .HasComment("regular/ history / unsettled ")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlayerIds)
                .HasColumnType("text")
                .HasColumnName("player_ids");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RowType)
                .HasComment("lesson charge / club fee / commission")
                .HasColumnName("row_type");
            entity.Property(e => e.ScheduleDate).HasColumnName("schedule_date");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.Subject)
                .HasComment("charge/payment/refund ids")
                .HasColumnType("text")
                .HasColumnName("subject");
            entity.Property(e => e.Type)
                .HasComment("initial / update")
                .HasColumnName("type");
            entity.Property(e => e.UserId)
                .HasComment("player id if needed")
                .HasColumnName("user_id");
        });

        modelBuilder.Entity<PayrollQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("payroll_question")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.Enabled, "enabled");

            entity.HasIndex(e => e.IsNew, "is_new");

            entity.HasIndex(e => e.PayrollStaff, "payroll_staff");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.HasIndex(e => new { e.UserId, e.PayrollStaff, e.Date }, "user_id_2").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Enabled)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("enabled");
            entity.Property(e => e.IsNew)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_new");
            entity.Property(e => e.PayrollStaff).HasColumnName("payroll_staff");
            entity.Property(e => e.Text)
                .HasColumnType("mediumtext")
                .HasColumnName("text");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<PayrollTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("payroll_template")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Settings)
                .HasColumnType("text")
                .HasColumnName("settings");
        });

        modelBuilder.Entity<Penalty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("penalties");

            entity.HasIndex(e => e.Title, "title").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Amount)
                .HasColumnType("float(9,2) unsigned")
                .HasColumnName("amount");
            entity.Property(e => e.Category)
                .HasDefaultValueSql("'1'")
                .HasColumnName("category");
            entity.Property(e => e.LinkedMemberships)
                .HasDefaultValueSql("'primary'")
                .HasColumnType("enum('individual','primary')")
                .HasColumnName("linked_memberships");
            entity.Property(e => e.Title)
                .HasDefaultValueSql("'no title'")
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasMaxLength(16)
                .HasDefaultValueSql("'static'")
                .HasColumnName("type");
        });

        modelBuilder.Entity<Phone>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("phone");

            entity.HasIndex(e => new { e.UserId, e.PhoneType }, "UserPhoneKey");

            entity.HasIndex(e => e.NumberDigits, "number_digits");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("email");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasMaxLength(255)
                .HasColumnName("number");
            entity.Property(e => e.NumberDigits)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("number_digits");
            entity.Property(e => e.PhoneType)
                .HasColumnType("enum('Home','Work','Cell','Other','Emergency')")
                .HasColumnName("phone_type");
            entity.Property(e => e.Primary).HasColumnName("primary");
            entity.Property(e => e.Relation)
                .HasMaxLength(255)
                .HasColumnName("relation");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<PhoneStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("phone_status")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.NumberDigits, "number_digits_UNIQUE").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LastOptinDate)
                .HasColumnType("datetime")
                .HasColumnName("last_optin_date");
            entity.Property(e => e.LastUpdatedAtUserId).HasColumnName("last_updated_at_user_id");
            entity.Property(e => e.LastUpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_updated_date");
            entity.Property(e => e.NumberDigits)
                .HasMaxLength(50)
                .HasColumnName("number_digits");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'-1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<PickleballStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pickleball_staff_fields")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<PilatesStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pilates_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<PncAchBatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("pnc_ach_batch");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<PncAchEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("pnc_ach_entry");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("account_number");
            entity.Property(e => e.Amount)
                .HasColumnType("float(18,2)")
                .HasColumnName("amount");
            entity.Property(e => e.BankAccountType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("bank_account_type");
            entity.Property(e => e.BatchId).HasColumnName("batch_id");
            entity.Property(e => e.RoutingNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("routing_number");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("''")
                .HasColumnType("enum('','Paid','Uncollected')")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<Po>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("pos")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AddressId, "address_id");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.Address2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("address2");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.Caption)
                .HasMaxLength(255)
                .HasColumnName("caption");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasDefaultValueSql("'US'")
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EmvTerminalId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("emv_terminal_id");
            entity.Property(e => e.EnablePin)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("enable_pin");
            entity.Property(e => e.EnableTips).HasColumnName("enable_tips");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.KitchenReceiptGrouping)
                .HasDefaultValueSql("'0'")
                .HasColumnName("kitchen_receipt_grouping");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("location");
            entity.Property(e => e.MultiplePrintjobs).HasColumnName("multiple_printjobs");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasColumnName("phone");
            entity.Property(e => e.PrintMerchantCopyWithEmail)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("print_merchant_copy_with_email");
            entity.Property(e => e.ShopShortcutMenuId).HasColumnName("shop_shortcut_menu_id");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasColumnName("state");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.TipsAccountingGroupId).HasColumnName("tips_accounting_group_id");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
            entity.Property(e => e.Zip)
                .HasMaxLength(255)
                .HasColumnName("zip");

            entity.HasOne(d => d.AddressNavigation).WithMany(p => p.Pos)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_address_id_pos");
        });

        modelBuilder.Entity<PointInTimeLateFee>(entity =>
        {
            entity.HasKey(e => e.AccountHolderId).HasName("PRIMARY");

            entity
                .ToTable("point_in_time_late_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AlreadyChargedFor, "already_charged_for");

            entity.Property(e => e.AccountHolderId)
                .ValueGeneratedNever()
                .HasColumnName("account_holder_id");
            entity.Property(e => e.AlreadyChargedFor).HasColumnName("already_charged_for");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("date_created");
        });

        modelBuilder.Entity<PosPaymentType>(entity =>
        {
            entity.HasKey(e => new { e.PosId, e.PaymentTypeId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("pos_payment_type");

            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.PaymentTypeId).HasColumnName("payment_type_id");
        });

        modelBuilder.Entity<Printjob>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("printjob")
                .HasCharSet("utf8")
                .UseCollation("utf8_bin");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.Datetime)
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.File)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("file");
            entity.Property(e => e.Name)
                .HasMaxLength(1000)
                .HasColumnName("name");
            entity.Property(e => e.NeedLabel)
                .HasDefaultValueSql("'1'")
                .HasColumnName("need_label");
            entity.Property(e => e.Removed).HasColumnName("removed");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .HasColumnType("enum('mail','report','label','payroll','statement')")
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<PrintjobParam>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("printjob_params");

            entity.Property(e => e.JsonParams)
                .HasColumnType("mediumtext")
                .HasColumnName("json_params");
            entity.Property(e => e.PrintjobId).HasColumnName("printjob_id");
            entity.Property(e => e.RecipientId).HasColumnName("recipient_id");
        });

        modelBuilder.Entity<Programm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("programm");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ApprovedList)
                .HasColumnType("text")
                .HasColumnName("approved_list");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasColumnName("name");
        });

        modelBuilder.Entity<ProspectNote>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("prospect_notes")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AssignedToId).HasColumnName("assigned_to_id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.ProspectId).HasColumnName("prospect_id");
            entity.Property(e => e.ShowAtCheckin).HasColumnName("show_at_checkin");
            entity.Property(e => e.Timestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<ProspectOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("prospect_options")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasMaxLength(32)
                .HasColumnName("type");
        });

        modelBuilder.Entity<ProspectTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("prospect_tasks")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("name");
            entity.Property(e => e.ShortName)
                .HasMaxLength(32)
                .HasColumnName("short_name");
        });

        modelBuilder.Entity<ProspectUserAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("prospect_user_assignment")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AssignedToId, "assigned_to_id");

            entity.HasIndex(e => e.AssignedToIdSecondary, "assigned_to_id_secondary");

            entity.HasIndex(e => e.ProspectUserId, "prospect_user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AssignedToId).HasColumnName("assigned_to_id");
            entity.Property(e => e.AssignedToIdSecondary).HasColumnName("assigned_to_id_secondary");
            entity.Property(e => e.ProspectUserId).HasColumnName("prospect_user_id");
        });

        modelBuilder.Entity<ProspectUserMembershipGoal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("prospect_user_membership_goals")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.MembershipGoalId).HasColumnName("membership_goal_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ProspectUserTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("prospect_user_tasks")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AssignedToId).HasColumnName("assigned_to_id");
            entity.Property(e => e.CompletedTime)
                .HasColumnType("datetime")
                .HasColumnName("completed_time");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Name)
                .HasColumnType("text")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.ProspectOptionId).HasColumnName("prospect_option_id");
            entity.Property(e => e.ProspectTaskId).HasColumnName("prospect_task_id");
            entity.Property(e => e.ProspectUserId).HasColumnName("prospect_user_id");
            entity.Property(e => e.Status)
                .HasMaxLength(16)
                .HasDefaultValueSql("'Open'")
                .HasColumnName("status");
            entity.Property(e => e.TimeEnd)
                .HasColumnType("time")
                .HasColumnName("time_end");
            entity.Property(e => e.TimeStart)
                .HasColumnType("time")
                .HasColumnName("time_start");
        });

        modelBuilder.Entity<QbAccount>(entity =>
        {
            entity.HasKey(e => e.ListId).HasName("PRIMARY");

            entity.ToTable("qb_account");

            entity.HasIndex(e => e.Type, "type");

            entity.Property(e => e.ListId)
                .HasMaxLength(50)
                .HasColumnName("listID");
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .HasColumnName("fullName");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .HasColumnName("type");
        });

        modelBuilder.Entity<QbAccountMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("qb_account_mapping");

            entity.HasIndex(e => e.AccGroupId, "acc_group_id");

            entity.HasIndex(e => e.QbId, "qb_id");

            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.QbId)
                .HasMaxLength(50)
                .HasColumnName("qb_id");
        });

        modelBuilder.Entity<QbRequestLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("qb_request_log", tb => tb.HasComment("QB request dates"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Date, "date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Ip)
                .HasMaxLength(20)
                .HasColumnName("ip");
            entity.Property(e => e.RequestDate).HasColumnName("request_date");
            entity.Property(e => e.RequestTime)
                .HasColumnType("datetime")
                .HasColumnName("request_time");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<QbSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("qb_settings");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BankAccount)
                .HasMaxLength(200)
                .HasColumnName("bank_account");
            entity.Property(e => e.User)
                .HasMaxLength(200)
                .HasColumnName("user");
        });

        modelBuilder.Entity<QuickbooksConfig>(entity =>
        {
            entity.HasKey(e => e.QuickbooksConfigId).HasName("PRIMARY");

            entity.ToTable("quickbooks_config");

            entity.Property(e => e.QuickbooksConfigId).HasColumnName("quickbooks_config_id");
            entity.Property(e => e.Cfgkey)
                .HasMaxLength(40)
                .HasColumnName("cfgkey");
            entity.Property(e => e.Cfgopts)
                .HasColumnType("text")
                .HasColumnName("cfgopts");
            entity.Property(e => e.Cfgtype)
                .HasMaxLength(40)
                .HasColumnName("cfgtype");
            entity.Property(e => e.Cfgval)
                .HasMaxLength(40)
                .HasColumnName("cfgval");
            entity.Property(e => e.ModDatetime)
                .HasColumnType("datetime")
                .HasColumnName("mod_datetime");
            entity.Property(e => e.Module)
                .HasMaxLength(40)
                .HasColumnName("module");
            entity.Property(e => e.QbUsername)
                .HasMaxLength(40)
                .HasColumnName("qb_username");
            entity.Property(e => e.WriteDatetime)
                .HasColumnType("datetime")
                .HasColumnName("write_datetime");
        });

        modelBuilder.Entity<QuickbooksExportMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("quickbooks_export_mapping")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AccGroupCode, "acc_group_code");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupCode).HasColumnName("acc_group_code");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.QbAccountName)
                .HasMaxLength(255)
                .HasColumnName("qb_account_name");
            entity.Property(e => e.QbMemo)
                .HasMaxLength(255)
                .HasColumnName("qb_memo");
            entity.Property(e => e.QbName)
                .HasMaxLength(255)
                .HasColumnName("qb_name");
        });

        modelBuilder.Entity<QuickbooksIdent>(entity =>
        {
            entity.HasKey(e => e.QuickbooksIdentId).HasName("PRIMARY");

            entity.ToTable("quickbooks_ident");

            entity.Property(e => e.QuickbooksIdentId).HasColumnName("quickbooks_ident_id");
            entity.Property(e => e.Editsequence)
                .HasMaxLength(40)
                .HasColumnName("editsequence");
            entity.Property(e => e.Extra)
                .HasColumnType("text")
                .HasColumnName("extra");
            entity.Property(e => e.MapDatetime)
                .HasColumnType("datetime")
                .HasColumnName("map_datetime");
            entity.Property(e => e.QbIdent)
                .HasMaxLength(40)
                .HasColumnName("qb_ident");
            entity.Property(e => e.QbObject)
                .HasMaxLength(40)
                .HasColumnName("qb_object");
            entity.Property(e => e.QbUsername)
                .HasMaxLength(40)
                .HasColumnName("qb_username");
            entity.Property(e => e.UniqueId)
                .HasMaxLength(40)
                .HasColumnName("unique_id");
        });

        modelBuilder.Entity<QuickbooksLog>(entity =>
        {
            entity.HasKey(e => e.QuickbooksLogId).HasName("PRIMARY");

            entity.ToTable("quickbooks_log");

            entity.HasIndex(e => e.QuickbooksTicketId, "quickbooks_ticket_id");

            entity.Property(e => e.QuickbooksLogId).HasColumnName("quickbooks_log_id");
            entity.Property(e => e.Batch).HasColumnName("batch");
            entity.Property(e => e.LogDatetime)
                .HasColumnType("datetime")
                .HasColumnName("log_datetime");
            entity.Property(e => e.Msg)
                .HasColumnType("text")
                .HasColumnName("msg");
            entity.Property(e => e.QuickbooksTicketId).HasColumnName("quickbooks_ticket_id");
        });

        modelBuilder.Entity<QuickbooksQueue>(entity =>
        {
            entity.HasKey(e => e.QuickbooksQueueId).HasName("PRIMARY");

            entity.ToTable("quickbooks_queue");

            entity.HasIndex(e => e.Priority, "priority");

            entity.HasIndex(e => new { e.QbUsername, e.QbAction, e.Ident }, "qb_username");

            entity.HasIndex(e => e.QuickbooksTicketId, "quickbooks_ticket_id");

            entity.Property(e => e.QuickbooksQueueId).HasColumnName("quickbooks_queue_id");
            entity.Property(e => e.DequeueDatetime)
                .HasColumnType("datetime")
                .HasColumnName("dequeue_datetime");
            entity.Property(e => e.EnqueueDatetime)
                .HasColumnType("datetime")
                .HasColumnName("enqueue_datetime");
            entity.Property(e => e.Extra)
                .HasColumnType("text")
                .HasColumnName("extra");
            entity.Property(e => e.Ident)
                .HasMaxLength(40)
                .HasColumnName("ident");
            entity.Property(e => e.Msg)
                .HasColumnType("text")
                .HasColumnName("msg");
            entity.Property(e => e.Priority)
                .HasDefaultValueSql("'0'")
                .HasColumnName("priority");
            entity.Property(e => e.QbAction)
                .HasMaxLength(32)
                .HasColumnName("qb_action");
            entity.Property(e => e.QbStatus)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("qb_status");
            entity.Property(e => e.QbUsername)
                .HasMaxLength(40)
                .HasColumnName("qb_username");
            entity.Property(e => e.Qbxml)
                .HasColumnType("text")
                .HasColumnName("qbxml");
            entity.Property(e => e.QuickbooksTicketId).HasColumnName("quickbooks_ticket_id");
        });

        modelBuilder.Entity<QuickbooksRecur>(entity =>
        {
            entity.HasKey(e => e.QuickbooksRecurId).HasName("PRIMARY");

            entity.ToTable("quickbooks_recur");

            entity.HasIndex(e => e.Priority, "priority");

            entity.HasIndex(e => new { e.QbUsername, e.QbAction, e.Ident }, "qb_username");

            entity.Property(e => e.QuickbooksRecurId).HasColumnName("quickbooks_recur_id");
            entity.Property(e => e.EnqueueDatetime)
                .HasColumnType("datetime")
                .HasColumnName("enqueue_datetime");
            entity.Property(e => e.Extra)
                .HasColumnType("text")
                .HasColumnName("extra");
            entity.Property(e => e.Ident)
                .HasMaxLength(40)
                .HasColumnName("ident");
            entity.Property(e => e.Priority)
                .HasDefaultValueSql("'0'")
                .HasColumnName("priority");
            entity.Property(e => e.QbAction)
                .HasMaxLength(32)
                .HasColumnName("qb_action");
            entity.Property(e => e.QbUsername)
                .HasMaxLength(40)
                .HasColumnName("qb_username");
            entity.Property(e => e.Qbxml)
                .HasColumnType("text")
                .HasColumnName("qbxml");
            entity.Property(e => e.RecurLasttime).HasColumnName("recur_lasttime");
            entity.Property(e => e.RunEvery).HasColumnName("run_every");
        });

        modelBuilder.Entity<QuickbooksTicket>(entity =>
        {
            entity.HasKey(e => e.QuickbooksTicketId).HasName("PRIMARY");

            entity.ToTable("quickbooks_ticket");

            entity.HasIndex(e => e.Ticket, "ticket");

            entity.Property(e => e.QuickbooksTicketId).HasColumnName("quickbooks_ticket_id");
            entity.Property(e => e.Ipaddr)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("ipaddr");
            entity.Property(e => e.LasterrorMsg)
                .HasMaxLength(255)
                .HasColumnName("lasterror_msg");
            entity.Property(e => e.LasterrorNum)
                .HasMaxLength(32)
                .HasColumnName("lasterror_num");
            entity.Property(e => e.Processed)
                .HasDefaultValueSql("'0'")
                .HasColumnName("processed");
            entity.Property(e => e.QbUsername)
                .HasMaxLength(40)
                .HasColumnName("qb_username");
            entity.Property(e => e.Ticket)
                .HasMaxLength(32)
                .IsFixedLength()
                .HasColumnName("ticket");
            entity.Property(e => e.TouchDatetime)
                .HasColumnType("datetime")
                .HasColumnName("touch_datetime");
            entity.Property(e => e.WriteDatetime)
                .HasColumnType("datetime")
                .HasColumnName("write_datetime");
        });

        modelBuilder.Entity<QuickbooksUser>(entity =>
        {
            entity.HasKey(e => e.QbUsername).HasName("PRIMARY");

            entity.ToTable("quickbooks_user");

            entity.Property(e => e.QbUsername)
                .HasMaxLength(40)
                .HasColumnName("qb_username");
            entity.Property(e => e.QbCompanyFile)
                .HasMaxLength(255)
                .HasColumnName("qb_company_file");
            entity.Property(e => e.QbPassword)
                .HasMaxLength(255)
                .HasColumnName("qb_password");
            entity.Property(e => e.QbwcMinRunEveryNSeconds)
                .HasDefaultValueSql("'0'")
                .HasColumnName("qbwc_min_run_every_n_seconds");
            entity.Property(e => e.QbwcWaitBeforeNextUpdate)
                .HasDefaultValueSql("'0'")
                .HasColumnName("qbwc_wait_before_next_update");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TouchDatetime)
                .HasColumnType("datetime")
                .HasColumnName("touch_datetime");
            entity.Property(e => e.WriteDatetime)
                .HasColumnType("datetime")
                .HasColumnName("write_datetime");
        });

        modelBuilder.Entity<RacquetballStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("racquetball_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<RangeStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("range_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Receipt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("receipt")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.CreatedAt, "created_at");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ParamsJson).HasColumnName("paramsJson");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.Type)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("type");
        });

        modelBuilder.Entity<RecorderRecordGolfcartfee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("recorder_record_golfcartfee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Data)
                .HasComment("touched shop items Ids")
                .HasColumnType("mediumtext")
                .HasColumnName("data");
        });

        modelBuilder.Entity<RecorderRecordGreenfee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("recorder_record_greenfee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Data)
                .HasComment("json-encoded params")
                .HasColumnType("mediumtext")
                .HasColumnName("data");
        });

        modelBuilder.Entity<Recurrence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("recurrence")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EndAfterOccurence).HasColumnName("end_after_occurence");
            entity.Property(e => e.EndByDate).HasColumnName("end_by_date");
            entity.Property(e => e.IsEndAfter).HasColumnName("is_end_after");
            entity.Property(e => e.IsEndBy).HasColumnName("is_end_by");
            entity.Property(e => e.IsPermanently)
                .HasComment("No end date")
                .HasColumnName("is_permanently");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.Rule)
                .HasMaxLength(255)
                .HasColumnName("rule");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'daily'")
                .HasColumnType("enum('monthly','weekly','daily')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<RecurringChargesList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("recurring_charges_list")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DateFrom, "date_from");

            entity.HasIndex(e => e.DateTo, "date_to");

            entity.HasIndex(e => new { e.EventId, e.ScheduleId, e.ResourceId }, "event_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.Type, "type");

            entity.HasIndex(e => e.UserFor, "user_for");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_to");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HoldDate).HasColumnName("hold_date");
            entity.Property(e => e.LastBillDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("last_bill_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Price)
                .HasColumnType("float(18,2)")
                .HasColumnName("price");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserFor).HasColumnName("user_for");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<RecurringTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("recurring_transactions")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AccGroupId, "acc_group_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Billing)
                .HasColumnType("text")
                .HasColumnName("billing");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.MonthFrom).HasColumnName("month_from");
            entity.Property(e => e.MonthTo).HasColumnName("month_to");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Refund>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("refund");

            entity.HasIndex(e => e.AddedBy, "added_by");

            entity.HasIndex(e => e.ChargeId, "charge_id");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.DateIndex, "date_index");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => new { e.EntityId, e.IsPosted, e.Date }, "entity_posted_date");

            entity.HasIndex(e => e.IsPosted, "is_posted");

            entity.HasIndex(e => e.PaymentId, "payment_id");

            entity.HasIndex(e => e.PosId, "pos_id");

            entity.HasIndex(e => e.PostedDate, "posted_date");

            entity.HasIndex(e => e.RefundReceiptId, "refund_receipt_id");

            entity.HasIndex(e => e.ShiftId, "shift_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.Amount)
                .HasColumnType("float(18,2)")
                .HasColumnName("amount");
            entity.Property(e => e.CcNumber)
                .HasMaxLength(20)
                .HasColumnName("cc_number");
            entity.Property(e => e.CertificateId).HasColumnName("certificate_id");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.CheckId).HasColumnName("check_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.DateIndex).HasColumnName("date_index");
            entity.Property(e => e.EntityId)
                .HasComment("club id")
                .HasColumnName("entity_id");
            entity.Property(e => e.ExportToQb)
                .HasComment("export to qb even if charge.export_to_qb=0")
                .HasColumnName("export_to_qb");
            entity.Property(e => e.IsCustom).HasColumnName("is_custom");
            entity.Property(e => e.IsPosted).HasColumnName("is_posted");
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.PaymentType).HasColumnName("payment_type");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.PostedDate).HasColumnName("posted_date");
            entity.Property(e => e.RefundReceiptId).HasColumnName("refund_receipt_id");
            entity.Property(e => e.ShiftId).HasColumnName("shift_id");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("float(18,2)")
                .HasColumnName("total_amount");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'refund'")
                .HasColumnType("enum('refund','void')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<RefundCustomRefundType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("refund_custom_refund_types", tb => tb.HasComment("List of availible paiment types for custom refund"));

            entity.HasIndex(e => e.PaymenttypeId, "paymenttype_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Comment)
                .HasMaxLength(255)
                .HasColumnName("comment");
            entity.Property(e => e.PaymenttypeId).HasColumnName("paymenttype_id");
            entity.Property(e => e.RefundNotificationEmails)
                .HasColumnType("text")
                .HasColumnName("refund_notification_emails");
            entity.Property(e => e.RefundThreshold)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'50.00'")
                .HasColumnName("refund_threshold");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Paymenttype).WithMany(p => p.RefundCustomRefundTypes)
                .HasForeignKey(d => d.PaymenttypeId)
                .HasConstraintName("refund_custom_refund_types_ibfk_1");
        });

        modelBuilder.Entity<RefundReceipt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("refund_receipt")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id)
                .HasComment("Refunding Receipt ID")
                .HasColumnName("id");
            entity.Property(e => e.Date)
                .HasComment("Refunding receipt date")
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ReceiptIds)
                .HasComment("receipt.ids json")
                .HasColumnType("text")
                .HasColumnName("receipt_ids");
        });

        modelBuilder.Entity<ReleaseNote>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("release_notes");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Author)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("author");
            entity.Property(e => e.Link)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("link");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.PostId).HasColumnName("post_id");
            entity.Property(e => e.Text)
                .HasColumnType("mediumtext")
                .HasColumnName("text");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
        });

        modelBuilder.Entity<RepairStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("repair_staff_fields")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.PayrollRate)
                .HasColumnType("text")
                .HasColumnName("payroll_rate");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("reports");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessLevel)
                .HasDefaultValueSql("'1'")
                .HasColumnName("access_level");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Fields)
                .HasColumnType("mediumtext")
                .HasColumnName("fields");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.RecordType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("record_type");
            entity.Property(e => e.Template).HasColumnName("template");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
        });

        modelBuilder.Entity<ReportsShopInventoryHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("reports_shop_inventory_history")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ReportsId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("reports_id");
            entity.Property(e => e.ShopInventoryHistoryId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("shop_inventory_history_id");
        });

        modelBuilder.Entity<ReservationStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("reservation_status")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.EventId, e.ScheduleId }, "event_schedule").IsUnique();

            entity.HasIndex(e => e.ScheduleId, "fk_reservation_status_schedule");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'pending'")
                .HasColumnType("enum('pending','approved','canceled')")
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Schedule).WithMany(p => p.ReservationStatuses)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("fk_reservation_status_schedule");
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("resource");

            entity.HasIndex(e => e.ResourceInfoId, "resource_info_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BallMachine)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("ball_machine");
            entity.Property(e => e.CanBeReserved)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("can_be_reserved");
            entity.Property(e => e.CourtLocationId).HasColumnName("court_location_id");
            entity.Property(e => e.CourtTypeId).HasColumnName("court_type_id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.ExternalResource).HasColumnName("external_resource");
            entity.Property(e => e.Fee)
                .HasPrecision(9, 2)
                .HasColumnName("fee");
            entity.Property(e => e.MaxAttendCnt)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("max_attend_cnt");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ResourceInfoId).HasColumnName("resource_info_id");
            entity.Property(e => e.ResourceTypeId)
                .HasDefaultValueSql("'1'")
                .HasColumnName("resource_type_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.Visible)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("visible");
        });

        modelBuilder.Entity<ResourceSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("resource_schedule");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.InfoId, "info_id");

            entity.HasIndex(e => e.ResourceId, "resource");

            entity.HasIndex(e => new { e.Date, e.ResourceId }, "resource_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.EndTime)
                .HasColumnType("time")
                .HasColumnName("end_time");
            entity.Property(e => e.InfoId).HasColumnName("info_id");
            entity.Property(e => e.RecurrenceId).HasColumnName("recurrence_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.StartTime)
                .HasColumnType("time")
                .HasColumnName("start_time");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'available'")
                .HasColumnType("enum('available','block')")
                .HasColumnName("type")
                .UseCollation("utf8_unicode_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<ResourceScheduleInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("resource_schedule_info");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description")
                .UseCollation("utf8_unicode_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
        });

        modelBuilder.Entity<ResourceStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("resource_status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .HasColumnName("status");
        });

        modelBuilder.Entity<ResourceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("resource_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.TypeName)
                .HasMaxLength(255)
                .HasColumnName("type_name");
        });

        modelBuilder.Entity<ResourceWaitlist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("resource_waitlist")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.CourtId, "court_id");

            entity.HasIndex(e => e.CourtTypeId, "court_type_id");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.Duration, "duration");

            entity.HasIndex(e => e.EndTime, "end_time");

            entity.HasIndex(e => e.LocationId, "location_id");

            entity.HasIndex(e => e.StartTime, "start_time");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.CourtId).HasColumnName("court_id");
            entity.Property(e => e.CourtTypeId).HasColumnName("court_type_id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EndTime)
                .HasColumnType("time")
                .HasColumnName("end_time");
            entity.Property(e => e.IsBallMachine).HasColumnName("is_ball_machine");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.StartTime)
                .HasColumnType("time")
                .HasColumnName("start_time");
            entity.Property(e => e.Status)
                .HasComment("Added / Notified / Unsubscribed / Expired")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ResourceWaitlistParticipant>(entity =>
        {
            entity.HasKey(e => new { e.ResourceWaitlistId, e.ParticipantId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("resource_waitlist_participants")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.ResourceWaitlistId, e.ParticipantId }, "resource_waitlist_id_participant");

            entity.Property(e => e.ResourceWaitlistId)
                .HasComment("resource waitlist id")
                .HasColumnName("resource_waitlist_id");
            entity.Property(e => e.ParticipantId)
                .HasComment("participant id")
                .HasColumnName("participant_id");
            entity.Property(e => e.SortOrder)
                .HasComment("order of participants in waitlist")
                .HasColumnName("sort_order");
        });

        modelBuilder.Entity<RevenueGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("revenue_group");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.Dates)
                .HasColumnType("text")
                .HasColumnName("dates");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.FromGroup).HasColumnName("from_group");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GroupType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("group_type");
            entity.Property(e => e.Period)
                .HasMaxLength(45)
                .HasColumnName("period");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.ToGroup).HasColumnName("to_group");
            entity.Property(e => e.TotalAmount)
                .HasPrecision(10, 2)
                .HasColumnName("total_amount");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<RevenueRecognition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("revenue_recognition");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.RevenueGroupId, "revenue_group_id_fk");

            entity.HasIndex(e => new { e.SubjectType, e.SubjectId }, "subject");

            entity.HasIndex(e => e.SupposedDate, "supposed_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasColumnType("float(18,2)")
                .HasColumnName("amount");
            entity.Property(e => e.AmountPerDay)
                .HasPrecision(18, 8)
                .HasColumnName("amount_per_day");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.FromGroup).HasColumnName("from_group");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.RevenueGroupId).HasColumnName("revenue_group_id");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.SubjectType).HasColumnName("subject_type");
            entity.Property(e => e.SupposedDate).HasColumnName("supposed_date");
            entity.Property(e => e.Time)
                .HasColumnType("datetime")
                .HasColumnName("time");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.ToGroup).HasColumnName("to_group");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.RevenueGroup).WithMany(p => p.RevenueRecognitions)
                .HasForeignKey(d => d.RevenueGroupId)
                .HasConstraintName("revenue_group_id_fk");
        });

        modelBuilder.Entity<RewardPointsHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("reward_points_history");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.ExpiredDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("expired_date");
            entity.Property(e => e.IssuedBy).HasColumnName("issued_by");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Points)
                .HasPrecision(18, 2)
                .HasColumnName("points");
            entity.Property(e => e.PointsLeft)
                .HasPrecision(18, 2)
                .HasColumnName("points_left");
            entity.Property(e => e.Removed).HasColumnName("removed");
            entity.Property(e => e.RuleId).HasColumnName("rule_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'earned'")
                .HasColumnType("enum('issued','earned','expired','used','pending')")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<RewardPointsUsage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("reward_points_usage");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.HistoryId).HasColumnName("history_id");
            entity.Property(e => e.Points)
                .HasPrecision(18, 2)
                .HasColumnName("points");
            entity.Property(e => e.ProcessedBy).HasColumnName("processed_by");
            entity.Property(e => e.PtransactionId).HasColumnName("ptransaction_id");
            entity.Property(e => e.Ratio)
                .HasPrecision(10, 2)
                .HasColumnName("ratio");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<RewardRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("reward_rules");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("created_date");
            entity.Property(e => e.Frequency)
                .HasDefaultValueSql("'1'")
                .HasColumnName("frequency");
            entity.Property(e => e.FrequencyType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("frequency_type");
            entity.Property(e => e.LastIssueDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("last_issue_date");
            entity.Property(e => e.Memberships)
                .HasColumnType("text")
                .HasColumnName("memberships");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.NextIssueDate).HasColumnName("next_issue_date");
            entity.Property(e => e.Points)
                .HasColumnType("float(18,2)")
                .HasColumnName("points");
            entity.Property(e => e.Receiver)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("receiver");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<RewardSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("reward_settings");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Expire).HasColumnName("expire");
            entity.Property(e => e.ExpireType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("expire_type");
            entity.Property(e => e.Liability).HasColumnName("liability");
            entity.Property(e => e.Ratio)
                .HasPrecision(10, 2)
                .HasColumnName("ratio");
            entity.Property(e => e.Restrictions)
                .HasColumnType("text")
                .HasColumnName("restrictions");
        });

        modelBuilder.Entity<RinkStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("rink_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<RsoCheck>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("rso_check");

            entity.HasIndex(e => e.Date, "date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasComment("Start time of check of user")
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("error_message");
            entity.Property(e => e.Status)
                .HasColumnType("enum('error','done')")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<RsoRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("rso_record");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateReviewed)
                .HasColumnType("datetime")
                .HasColumnName("date_reviewed");
            entity.Property(e => e.ReviewerId).HasColumnName("reviewer_id");
            entity.Property(e => e.RsoAliases)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("rso_aliases");
            entity.Property(e => e.RsoBirthDate)
                .HasMaxLength(30)
                .HasColumnName("rso_birth_date");
            entity.Property(e => e.RsoCheckId).HasColumnName("rso_check_id");
            entity.Property(e => e.RsoDesignation)
                .HasMaxLength(255)
                .HasColumnName("rso_designation");
            entity.Property(e => e.RsoHairColor)
                .HasMaxLength(30)
                .HasColumnName("rso_hair_color");
            entity.Property(e => e.RsoId)
                .HasMaxLength(30)
                .HasColumnName("rso_id");
            entity.Property(e => e.RsoImage)
                .HasMaxLength(255)
                .HasColumnName("rso_image");
            entity.Property(e => e.RsoName)
                .HasMaxLength(255)
                .HasColumnName("rso_name");
            entity.Property(e => e.RsoRace)
                .HasMaxLength(30)
                .HasColumnName("rso_race");
            entity.Property(e => e.RsoScars)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("rso_scars");
            entity.Property(e => e.RsoSex)
                .HasMaxLength(30)
                .HasColumnName("rso_sex");
            entity.Property(e => e.RsoState)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .HasColumnName("rso_state");
            entity.Property(e => e.RsoStatus)
                .HasMaxLength(255)
                .HasColumnName("rso_status");
            entity.Property(e => e.RsoStreet)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("rso_street");
            entity.Property(e => e.RsoUrl)
                .HasMaxLength(255)
                .HasColumnName("rso_url");
            entity.Property(e => e.RsoWeight)
                .HasMaxLength(30)
                .HasDefaultValueSql("''")
                .HasColumnName("rso_weight");
            entity.Property(e => e.RsoZip)
                .HasMaxLength(30)
                .HasDefaultValueSql("''")
                .HasColumnName("rso_zip");
            entity.Property(e => e.Source)
                .HasMaxLength(30)
                .HasColumnName("source");
            entity.Property(e => e.Status)
                .HasColumnType("enum('pending','not a match','confirmed')")
                .HasColumnName("status");
        });

        modelBuilder.Entity<SalesStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sales_staff_fields")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(12,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("schedule");

            entity.HasIndex(e => e.AttendSaved, "attend_saved");

            entity.HasIndex(e => e.BillGuestFee, "bill_guest_fee");

            entity.HasIndex(e => e.Blocked, "blocked");

            entity.HasIndex(e => e.BlockedDate, "blocked_date");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.DirectorId, "director_id");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.ExpiredDate, "expired_date");

            entity.HasIndex(e => e.AreaId, "fk_schedule_location_area");

            entity.HasIndex(e => new { e.ForSale, e.PayrollDate, e.Id, e.EventId }, "for_sale");

            entity.HasIndex(e => e.IsOnline, "is_online");

            entity.HasIndex(e => e.IsPaidOff, "is_paid_off");

            entity.HasIndex(e => e.LocationId, "location_id");

            entity.HasIndex(e => e.PayrollDate, "payroll_date");

            entity.HasIndex(e => e.RecurrenceId, "recurrence_id");

            entity.HasIndex(e => e.SoldForFree, "sold_for_free");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.TeeTimeId, "tee_time_id");

            entity.HasIndex(e => e.TimeBegin, "time_begin");

            entity.HasIndex(e => e.TimeEnd, "time_end");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AreaId).HasColumnName("area_id");
            entity.Property(e => e.AttendSaved).HasColumnName("attend_saved");
            entity.Property(e => e.BallMachine).HasColumnName("ball_machine");
            entity.Property(e => e.BallMachineAmount)
                .HasDefaultValueSql("'0.00'")
                .HasColumnType("float(18,2)")
                .HasColumnName("ball_machine_amount");
            entity.Property(e => e.BillGuestFee)
                .HasDefaultValueSql("'1'")
                .HasColumnName("bill_guest_fee");
            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.BlockedDate).HasColumnName("blocked_date");
            entity.Property(e => e.BlockedTime)
                .HasColumnType("datetime")
                .HasColumnName("blocked_time");
            entity.Property(e => e.ChargeMember).HasColumnName("charge_member");
            entity.Property(e => e.ChargeSold).HasColumnName("charge_sold");
            entity.Property(e => e.CleanupTimeIncluded).HasColumnName("cleanup_time_included");
            entity.Property(e => e.ComissionRate)
                .HasPrecision(9, 2)
                .HasColumnName("comission_rate");
            entity.Property(e => e.Comment)
                .HasMaxLength(255)
                .HasColumnName("comment");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Confirmed)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("confirmed");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DirectorId).HasColumnName("director_id");
            entity.Property(e => e.DoNotCharge).HasColumnName("do_not_charge");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpiredDate).HasColumnName("expired_date");
            entity.Property(e => e.ForSale).HasColumnName("for_sale");
            entity.Property(e => e.IsOnline)
                .HasComment("Whether the game was scheduled online.")
                .HasColumnName("is_online");
            entity.Property(e => e.IsPaidOff).HasColumnName("is_paid_off");
            entity.Property(e => e.IsSeria).HasColumnName("is_seria");
            entity.Property(e => e.IsUsed).HasColumnName("is_used");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.LessonType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("lesson_type");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.OffsiteAddress)
                .HasColumnType("tinytext")
                .HasColumnName("offsite_address");
            entity.Property(e => e.PaymentStatus)
                .HasDefaultValueSql("'no_invoice'")
                .HasColumnType("enum('unpaid','paid','no_invoice')")
                .HasColumnName("payment_status");
            entity.Property(e => e.PayrollDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("payroll_date");
            entity.Property(e => e.RecurrenceId).HasColumnName("recurrence_id");
            entity.Property(e => e.SParams)
                .HasColumnType("text")
                .HasColumnName("s_params");
            entity.Property(e => e.SelectedPro).HasColumnName("selected_pro");
            entity.Property(e => e.SetupTimeIncluded).HasColumnName("setup_time_included");
            entity.Property(e => e.SoldForFree).HasColumnName("sold_for_free");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'active'")
                .HasColumnType("enum('active','canceled','disabled','sold')")
                .HasColumnName("status");
            entity.Property(e => e.TeeTimeId).HasColumnName("tee_time_id");
            entity.Property(e => e.TimeBegin)
                .HasColumnType("time")
                .HasColumnName("time_begin");
            entity.Property(e => e.TimeEnd)
                .HasColumnType("time")
                .HasColumnName("time_end");
            entity.Property(e => e.Unavailable).HasColumnName("unavailable");

            entity.HasOne(d => d.Area).WithMany(p => p.Schedules)
                .HasForeignKey(d => d.AreaId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_schedule_location_area");
        });

        modelBuilder.Entity<ScheduleAddon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("schedule_addon");

            entity.HasIndex(e => new { e.ScheduleId, e.UserId }, "schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.Count)
                .HasPrecision(9, 2)
                .HasColumnName("count");
            entity.Property(e => e.IsDefault)
                .HasDefaultValueSql("'1'")
                .HasComment("has default value been selected")
                .HasColumnName("is_default");
            entity.Property(e => e.PaymentStatus)
                .IsRequired()
                .HasDefaultValueSql("'2'")
                .HasComment("payment status; values: 0 - free, 1 - paid, 2 - unpaid")
                .HasColumnName("payment_status");
            entity.Property(e => e.Price)
                .HasPrecision(9, 2)
                .HasColumnName("price");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ScheduleCopy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("schedule_copy");

            entity.HasIndex(e => e.ScheduleCopy1, "schedule_copy");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ResourceCopy).HasColumnName("resource_copy");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ScheduleCopy1).HasColumnName("schedule_copy");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
        });

        modelBuilder.Entity<ScheduleFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("schedule_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.HasHouseCharge, "has_house_charge");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.HasIndex(e => e.RowType, "row_type");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.HasIndex(e => e.TotalPaidDate, "total_paid_date");

            entity.HasIndex(e => e.TotalReturnedDate, "total_returned_date");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.HasIndex(e => e.WasFree, "was_free");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChargeIds)
                .HasColumnType("text")
                .HasColumnName("charge_ids");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.DateAdded)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_added");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.Duration)
                .HasColumnType("float(9,3)")
                .HasColumnName("duration");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FeesArray)
                .HasColumnType("mediumtext")
                .HasColumnName("fees_array");
            entity.Property(e => e.HasHouseCharge).HasColumnName("has_house_charge");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.PaidBeforeBlocked)
                .HasColumnType("float(18,2)")
                .HasColumnName("paid_before_blocked");
            entity.Property(e => e.PaidBeforeBlockedNotax)
                .HasPrecision(18, 2)
                .HasColumnName("paid_before_blocked_notax");
            entity.Property(e => e.PriceBeforeBlocked)
                .HasColumnType("float(9,2)")
                .HasColumnName("price_before_blocked");
            entity.Property(e => e.PriceBeforeBlockedNotax)
                .HasPrecision(18, 2)
                .HasColumnName("price_before_blocked_notax");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ReturnedBeforeBlocked)
                .HasColumnType("float(18,2)")
                .HasColumnName("returned_before_blocked");
            entity.Property(e => e.ReturnedBeforeBlockedNotax)
                .HasPrecision(18, 2)
                .HasColumnName("returned_before_blocked_notax");
            entity.Property(e => e.RowStatus)
                .HasDefaultValueSql("'1'")
                .HasColumnName("row_status");
            entity.Property(e => e.RowType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("row_type");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.TimeAdded)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("time_added");
            entity.Property(e => e.TotalPaid)
                .HasColumnType("float(18,2)")
                .HasColumnName("total_paid");
            entity.Property(e => e.TotalPaidDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("total_paid_date");
            entity.Property(e => e.TotalPaidNotax)
                .HasPrecision(18, 2)
                .HasColumnName("total_paid_notax");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("float(18,2)")
                .HasColumnName("total_price");
            entity.Property(e => e.TotalPriceNotax)
                .HasPrecision(18, 2)
                .HasColumnName("total_price_notax");
            entity.Property(e => e.TotalReturned)
                .HasColumnType("float(18,2)")
                .HasColumnName("total_returned");
            entity.Property(e => e.TotalReturnedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("total_returned_date");
            entity.Property(e => e.TotalReturnedNotax)
                .HasPrecision(18, 2)
                .HasColumnName("total_returned_notax");
            entity.Property(e => e.UserCnt).HasColumnName("user_cnt");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.WasFree).HasColumnName("was_free");
        });

        modelBuilder.Entity<ScheduleReserve>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("schedule_reserve");

            entity.HasIndex(e => e.ResourceId, "fk_schedule_reserve_resource");

            entity.HasIndex(e => e.ResourceTypeId, "fk_schedule_reserve_resource_type");

            entity.HasIndex(e => e.ScheduleId, "fk_schedule_reserve_schedule");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ResourceTypeId).HasColumnName("resource_type_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<ScheduleResource>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("schedule_resource");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
        });

        modelBuilder.Entity<ScheduleRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("schedule_room")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.RoomId, "fk_sr_location_room");

            entity.HasIndex(e => e.ScheduleId, "fk_sr_schedule");

            entity.HasIndex(e => e.ModifiedDate, "modified_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.Room).WithMany(p => p.ScheduleRooms)
                .HasForeignKey(d => d.RoomId)
                .HasConstraintName("fk_sr_location_room");

            entity.HasOne(d => d.Schedule).WithMany(p => p.ScheduleRooms)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("fk_sr_schedule");
        });

        modelBuilder.Entity<ScheduleServiceCommission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("schedule_service_commission")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EventId, "fk_ssc_event");

            entity.HasIndex(e => e.ScheduleId, "fk_ssc_schedule");

            entity.HasIndex(e => e.ModifiedDate, "modified_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CommissionBasis)
                .HasDefaultValueSql("'hourly'")
                .HasColumnType("enum('hourly','per_service','percent_of_fee','net_of_club')")
                .HasColumnName("commission_basis");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LimitCommissionByRevenue).HasColumnName("limit_commission_by_revenue");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Rate)
                .HasPrecision(9, 2)
                .HasColumnName("rate");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.WhoPaysDiscount)
                .HasDefaultValueSql("'pro'")
                .HasColumnType("enum('pro','club','fifty_fifty')")
                .HasColumnName("who_pays_discount");

            entity.HasOne(d => d.Event).WithMany(p => p.ScheduleServiceCommissions)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("fk_ssc_event");

            entity.HasOne(d => d.Schedule).WithMany(p => p.ScheduleServiceCommissions)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("fk_ssc_schedule");
        });

        modelBuilder.Entity<ScheduleStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("schedule_status");

            entity.HasIndex(e => e.ScheduleId, "event_id");

            entity.HasIndex(e => new { e.ScheduleId, e.Status }, "event_id-status");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.Status)
                .HasColumnType("enum('reminded','checked_in')")
                .HasColumnName("status");
        });

        modelBuilder.Entity<ScheduleUserPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("schedule_user_package")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ScheduleId, "schedule_index");

            entity.HasIndex(e => e.UserPackageId, "user_package_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserPackageId).HasColumnName("user_package_id");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_service_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.CleanupTime).HasColumnName("cleanup_time");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.ServiceTime).HasColumnName("service_time");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");
            entity.Property(e => e.SetupTime).HasColumnName("setup_time");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.Services)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_service_type_id");
        });

        modelBuilder.Entity<ServiceAccountingGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_accounting_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AccgroupId, "fk_service_accounting_group_accgroup_id");

            entity.HasIndex(e => e.EntityId, "fk_service_accounting_group_entity_id");

            entity.HasIndex(e => new { e.ServiceTypeId, e.EntityId }, "unique_servicetype_entity").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccgroupId).HasColumnName("accgroup_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

            entity.HasOne(d => d.Accgroup).WithMany(p => p.ServiceAccountingGroups)
                .HasForeignKey(d => d.AccgroupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_accounting_group_accgroup_id");

            entity.HasOne(d => d.Entity).WithMany(p => p.ServiceAccountingGroups)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_accounting_group_entity_id");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceAccountingGroups)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_accounting_group_service_type_id");
        });

        modelBuilder.Entity<ServiceAlternateFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_alternate_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "fk_service_alternate_fee_entity_id");

            entity.HasIndex(e => e.FeeAccGroupId, "fk_service_alternate_fee_fee_acc_group_id");

            entity.HasIndex(e => e.ServiceId, "fk_service_alternate_fee_service_id");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_alternate_fee_service_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.Fee)
                .HasPrecision(9, 2)
                .HasColumnName("fee");
            entity.Property(e => e.FeeAccGroupId).HasColumnName("fee_acc_group_id");
            entity.Property(e => e.FeeType)
                .HasDefaultValueSql("'cancellation_fee'")
                .HasColumnType("enum('cancellation_fee','no_show')")
                .HasColumnName("fee_type");
            entity.Property(e => e.IsFullCharge).HasColumnName("is_full_charge");
            entity.Property(e => e.IsPercentageServiceFee).HasColumnName("is_percentage_service_fee");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

            entity.HasOne(d => d.Entity).WithMany(p => p.ServiceAlternateFees)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_alternate_fee_entity_id");

            entity.HasOne(d => d.FeeAccGroup).WithMany(p => p.ServiceAlternateFees)
                .HasForeignKey(d => d.FeeAccGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_alternate_fee_fee_acc_group_id");

            entity.HasOne(d => d.Service).WithMany(p => p.ServiceAlternateFees)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_alternate_fee_service_id");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceAlternateFees)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_alternate_fee_service_type_id");
        });

        modelBuilder.Entity<ServiceCommission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_commission")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "fk_service_commission_entity_id");

            entity.HasIndex(e => e.ServiceId, "fk_service_commission_service_id");

            entity.HasIndex(e => e.StaffLevelId, "fk_service_commission_staff_level");

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CommissionBasis)
                .HasColumnType("enum('hourly','per_service','percent_of_fee','net_of_club')")
                .HasColumnName("commission_basis");
            entity.Property(e => e.CommissionType)
                .HasDefaultValueSql("'prime'")
                .HasColumnType("enum('prime','base')")
                .HasColumnName("commission_type");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.NumParticipants).HasColumnName("num_participants");
            entity.Property(e => e.Rate)
                .HasPrecision(9, 2)
                .HasColumnName("rate");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.StaffLevelId).HasColumnName("staff_level_id");

            entity.HasOne(d => d.Entity).WithMany(p => p.ServiceCommissions)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_commission_entity_id");

            entity.HasOne(d => d.Service).WithMany(p => p.ServiceCommissions)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_commission_service_id");

            entity.HasOne(d => d.StaffLevel).WithMany(p => p.ServiceCommissions)
                .HasForeignKey(d => d.StaffLevelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_commission_staff_level");
        });

        modelBuilder.Entity<ServiceFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EntityId, "fk_service_fee_entity_id");

            entity.HasIndex(e => e.ServiceId, "fk_service_fee_service_id");

            entity.HasIndex(e => e.StaffLevelId, "fk_service_fee_staff_level");

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EmployeeFee)
                .HasPrecision(9, 2)
                .HasColumnName("employee_fee");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.FeeType)
                .HasDefaultValueSql("'prime'")
                .HasColumnType("enum('prime','base','discount')")
                .HasColumnName("fee_type");
            entity.Property(e => e.GuestFee)
                .HasPrecision(9, 2)
                .HasColumnName("guest_fee");
            entity.Property(e => e.MemberFee)
                .HasPrecision(9, 2)
                .HasColumnName("member_fee");
            entity.Property(e => e.NumParticipants).HasColumnName("num_participants");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.StaffLevelId).HasColumnName("staff_level_id");

            entity.HasOne(d => d.Entity).WithMany(p => p.ServiceFees)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_fee_entity_id");

            entity.HasOne(d => d.Service).WithMany(p => p.ServiceFees)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_fee_service_id");

            entity.HasOne(d => d.StaffLevel).WithMany(p => p.ServiceFees)
                .HasForeignKey(d => d.StaffLevelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_fee_staff_level");
        });

        modelBuilder.Entity<ServiceFeeRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_fee_rules")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_fee_rules_service_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CommissionBasis)
                .HasDefaultValueSql("'hourly'")
                .HasColumnType("enum('hourly','per_service','percent_of_fee','net_of_club')")
                .HasColumnName("commission_basis");
            entity.Property(e => e.LimitCommissionByRevenue).HasColumnName("limit_commission_by_revenue");
            entity.Property(e => e.SeparateCommissionByLocation).HasColumnName("separate_commission_by_location");
            entity.Property(e => e.SeparateCommissionByParticipants).HasColumnName("separate_commission_by_participants");
            entity.Property(e => e.SeparateCommissionByStaffLevel).HasColumnName("separate_commission_by_staff_level");
            entity.Property(e => e.SeparateFeeByLocation).HasColumnName("separate_fee_by_location");
            entity.Property(e => e.SeparateFeeByParticipants).HasColumnName("separate_fee_by_participants");
            entity.Property(e => e.SeparateFeeByStaffLevel).HasColumnName("separate_fee_by_staff_level");
            entity.Property(e => e.SeparateFeeEmployee).HasColumnName("separate_fee_employee");
            entity.Property(e => e.SeparateFeeGuest).HasColumnName("separate_fee_guest");
            entity.Property(e => e.SeparateFeeMaxParticipants).HasColumnName("separate_fee_max_participants");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");
            entity.Property(e => e.UseCommissionCategoryDefaults).HasColumnName("use_commission_category_defaults");
            entity.Property(e => e.UseFeeCategoryDefaults).HasColumnName("use_fee_category_defaults");
            entity.Property(e => e.WhoPaysDiscount)
                .HasDefaultValueSql("'pro'")
                .HasColumnType("enum('pro','club','fifty_fifty')")
                .HasColumnName("who_pays_discount");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceFeeRules)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_fee_rules_service_type_id");
        });

        modelBuilder.Entity<ServiceLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_location")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.LocationAreaId, "fk_service_location_location_area_id");

            entity.HasIndex(e => e.LocationRoomId, "fk_service_location_location_room_id");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_location_service_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LocationAreaId).HasColumnName("location_area_id");
            entity.Property(e => e.LocationRoomId).HasColumnName("location_room_id");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

            entity.HasOne(d => d.LocationArea).WithMany(p => p.ServiceLocations)
                .HasForeignKey(d => d.LocationAreaId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_location_location_area_id");

            entity.HasOne(d => d.LocationRoom).WithMany(p => p.ServiceLocations)
                .HasForeignKey(d => d.LocationRoomId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_location_location_room_id");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceLocations)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_location_service_type_id");
        });

        modelBuilder.Entity<ServiceOnlineBookingRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_online_booking_rules")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_online_booking_rules_service_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BookingIntervalMinutes)
                .HasDefaultValueSql("'60'")
                .HasColumnName("booking_interval_minutes");
            entity.Property(e => e.CanBeBookedOnline).HasColumnName("can_be_booked_online");
            entity.Property(e => e.MaxBookingLeadTime).HasColumnName("max_booking_lead_time");
            entity.Property(e => e.MaxBookingLeadTimeType)
                .HasDefaultValueSql("'minute'")
                .HasColumnType("enum('minute','hour','day','week','month')")
                .HasColumnName("max_booking_lead_time_type");
            entity.Property(e => e.MinBookingLeadTime).HasColumnName("min_booking_lead_time");
            entity.Property(e => e.MinBookingLeadTimeType)
                .HasDefaultValueSql("'minute'")
                .HasColumnType("enum('minute','hour','day','week','month')")
                .HasColumnName("min_booking_lead_time_type");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");
            entity.Property(e => e.UseCategoryDefaults).HasColumnName("use_category_defaults");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceOnlineBookingRules)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_online_booking_rules_service_type_id");
        });

        modelBuilder.Entity<ServiceParticipationRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_participation_rules")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_participation_rules_service_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.MaxAge).HasColumnName("max_age");
            entity.Property(e => e.MaxParticipants).HasColumnName("max_participants");
            entity.Property(e => e.MaxStaff).HasColumnName("max_staff");
            entity.Property(e => e.MinAge).HasColumnName("min_age");
            entity.Property(e => e.MinParticipants).HasColumnName("min_participants");
            entity.Property(e => e.MinStaff).HasColumnName("min_staff");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceParticipationRules)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_participation_rules_service_type_id");
        });

        modelBuilder.Entity<ServicePricingGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_pricing_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "fk_service_pricing_group_component");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.GroupName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("group_name");

            entity.HasOne(d => d.Component).WithMany(p => p.ServicePricingGroups)
                .HasForeignKey(d => d.ComponentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_pricing_group_component");
        });

        modelBuilder.Entity<ServicePricingGroupServiceFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_pricing_group_service_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceFeeId, "fk_service_pricing_group_service_fee_service_fee");

            entity.HasIndex(e => new { e.ServicePricingGroupId, e.ServiceFeeId }, "service_pricing_group_service_fee_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Fee)
                .HasPrecision(9, 2)
                .HasColumnName("fee");
            entity.Property(e => e.ServiceFeeId).HasColumnName("service_fee_id");
            entity.Property(e => e.ServicePricingGroupId).HasColumnName("service_pricing_group_id");

            entity.HasOne(d => d.ServiceFee).WithMany(p => p.ServicePricingGroupServiceFees)
                .HasForeignKey(d => d.ServiceFeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_pricing_group_service_fee_service_fee");

            entity.HasOne(d => d.ServicePricingGroup).WithMany(p => p.ServicePricingGroupServiceFees)
                .HasForeignKey(d => d.ServicePricingGroupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_pricing_group_service_fee_service_pricing_group");
        });

        modelBuilder.Entity<ServicePricingGroupServiceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_pricing_group_service_type")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_pricing_group_service_type_service_type");

            entity.HasIndex(e => new { e.ServicePricingGroupId, e.ServiceTypeId }, "service_pricing_group_service_type_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ServicePricingGroupId).HasColumnName("service_pricing_group_id");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

            entity.HasOne(d => d.ServicePricingGroup).WithMany(p => p.ServicePricingGroupServiceTypes)
                .HasForeignKey(d => d.ServicePricingGroupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_pricing_group_service_type_service_pricing_group");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServicePricingGroupServiceTypes)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_pricing_group_service_type_service_type");
        });

        modelBuilder.Entity<ServicePricingGroupUserGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_pricing_group_user_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupId, "fk_service_pricing_group_user_group_group");

            entity.HasIndex(e => new { e.ServicePricingGroupId, e.GroupId }, "service_pricing_group_user_group_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.ServicePricingGroupId).HasColumnName("service_pricing_group_id");

            entity.HasOne(d => d.Group).WithMany(p => p.ServicePricingGroupUserGroups)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_pricing_group_user_group_group");

            entity.HasOne(d => d.ServicePricingGroup).WithMany(p => p.ServicePricingGroupUserGroups)
                .HasForeignKey(d => d.ServicePricingGroupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_pricing_group_user_group_service_pricing_group");
        });

        modelBuilder.Entity<ServiceSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_schedule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Active, "active");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_schedule_service_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.DateEnd).HasColumnName("date_end");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.ScheduleType)
                .HasDefaultValueSql("'prime'")
                .HasColumnType("enum('prime','discount')")
                .HasColumnName("schedule_type");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");
            entity.Property(e => e.TimeFromDefault)
                .HasColumnType("time")
                .HasColumnName("time_from_default");
            entity.Property(e => e.TimeToDefault)
                .HasColumnType("time")
                .HasColumnName("time_to_default");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceSchedules)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_schedule_service_type_id");
        });

        modelBuilder.Entity<ServiceScheduleDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_schedule_day")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceScheduleId, "fk_service_schedule_day_service_schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DayOfWeek)
                .HasDefaultValueSql("'sunday'")
                .HasColumnType("enum('sunday','monday','tuesday','wednesday','thursday','friday','saturday')")
                .HasColumnName("day_of_week");
            entity.Property(e => e.ServiceScheduleId).HasColumnName("service_schedule_id");
            entity.Property(e => e.TimeFrom)
                .HasColumnType("time")
                .HasColumnName("time_from");
            entity.Property(e => e.TimeTo)
                .HasColumnType("time")
                .HasColumnName("time_to");

            entity.HasOne(d => d.ServiceSchedule).WithMany(p => p.ServiceScheduleDays)
                .HasForeignKey(d => d.ServiceScheduleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_schedule_day_service_schedule_id");
        });

        modelBuilder.Entity<ServiceStaff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_staff")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupId, "fk_service_staff_group_id");

            entity.HasIndex(e => e.ServiceTypeId, "fk_service_staff_service_type_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Group).WithMany(p => p.ServiceStaffs)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_staff_group_id");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceStaffs)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_service_staff_service_type_id");
        });

        modelBuilder.Entity<ServiceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("service_type")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "fk_service_type_component_id");

            entity.HasIndex(e => e.EventTypeId, "fk_service_type_event_type_id");

            entity.HasIndex(e => e.ParentId, "fk_service_type_parent_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Abbreviation)
                .HasMaxLength(16)
                .HasDefaultValueSql("''")
                .HasColumnName("abbreviation");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.AnyComponent).HasColumnName("any_component");
            entity.Property(e => e.AnyDuration).HasColumnName("any_duration");
            entity.Property(e => e.AnyLocation).HasColumnName("any_location");
            entity.Property(e => e.AnyStaff).HasColumnName("any_staff");
            entity.Property(e => e.CancellationFee).HasColumnName("cancellation_fee");
            entity.Property(e => e.CancellationFeeWindow).HasColumnName("cancellation_fee_window");
            entity.Property(e => e.ColorCode)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("color_code");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("description");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.HasCommissions)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("has_commissions");
            entity.Property(e => e.HasFees)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("has_fees");
            entity.Property(e => e.IsSystem).HasColumnName("is_system");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.NoShowFee).HasColumnName("no_show_fee");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.Component).WithMany(p => p.ServiceTypes)
                .HasForeignKey(d => d.ComponentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_type_component_id");

            entity.HasOne(d => d.EventType).WithMany(p => p.ServiceTypes)
                .HasForeignKey(d => d.EventTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_type_event_type_id");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_service_type_parent_id");
        });

        modelBuilder.Entity<Session>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("session");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Expired)
                .HasColumnType("datetime")
                .HasColumnName("expired");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .HasColumnName("name");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<SettingClub>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("setting_club");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.IntValue, "int_value");

            entity.HasIndex(e => e.Name, "name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.HasIndex(e => e.StringValue, "string_value");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArrayValue)
                .HasColumnType("mediumtext")
                .HasColumnName("array_value");
            entity.Property(e => e.EntityId)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("entity_id");
            entity.Property(e => e.FloatValue).HasColumnName("float_value");
            entity.Property(e => e.IntValue).HasColumnName("int_value");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.StringValue)
                .HasDefaultValueSql("''")
                .HasColumnName("string_value");
            entity.Property(e => e.TextValue)
                .HasColumnType("text")
                .HasColumnName("text_value");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .HasColumnName("type");
        });

        modelBuilder.Entity<SettingEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("setting_event");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.IntValue, "int_value");

            entity.HasIndex(e => e.Name, "name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.HasIndex(e => e.StringValue, "string_value");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArrayValue)
                .HasColumnType("mediumtext")
                .HasColumnName("array_value");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FloatValue).HasColumnName("float_value");
            entity.Property(e => e.IntValue).HasColumnName("int_value");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.StringValue)
                .HasDefaultValueSql("''")
                .HasColumnName("string_value");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .HasColumnName("type");
        });

        modelBuilder.Entity<ShopCart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_cart")
                .UseCollation("latin1_general_ci");

            entity.HasIndex(e => e.ChargeId, "charge_id");

            entity.HasIndex(e => e.Order, "order");

            entity.HasIndex(e => e.PosId, "pos_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllDiscountRates)
                .HasColumnType("text")
                .HasColumnName("all_discount_rates");
            entity.Property(e => e.Amount)
                .HasDefaultValueSql("'1.000'")
                .HasColumnType("decimal(10,3) unsigned")
                .HasColumnName("amount");
            entity.Property(e => e.Barcode)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("barcode");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.DiscountRate)
                .HasPrecision(10, 4)
                .HasDefaultValueSql("'-1.0000'")
                .HasColumnName("discount_rate");
            entity.Property(e => e.Item).HasColumnName("item");
            entity.Property(e => e.ItemType)
                .HasDefaultValueSql("'shop_item'")
                .HasColumnType("enum('shop_item','accounting_group_item','gift_certificate','membership','enrollment','shop_shortcut_item','deposit','additional_charge')")
                .HasColumnName("item_type");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.SoldBy).HasColumnName("sold_by");
        });

        modelBuilder.Entity<ShopCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_categories")
                .UseCollation("latin1_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllStores)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("all_stores");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PrintKitchenReceipt).HasColumnName("print_kitchen_receipt");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<ShopCategoryStore>(entity =>
        {
            entity.HasKey(e => new { e.ShopCategoryId, e.ShopStoreId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("shop_category_store")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.ShopCategoryId).HasColumnName("shop_category_id");
            entity.Property(e => e.ShopStoreId).HasColumnName("shop_store_id");
            entity.Property(e => e.DefaultAccountingGroupId).HasColumnName("default_accounting_group_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'active'")
                .HasColumnType("enum('active','inherit','removed')")
                .HasColumnName("status");
        });

        modelBuilder.Entity<ShopInventoryHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_inventory_history", tb => tb.HasComment("Shop Inventory History"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.ShopItemsId, "shop_items_id");

            entity.HasIndex(e => e.ShopStoreId, "shop_store_id");

            entity.HasIndex(e => e.ShopVendorId, "shop_vendor_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.Cost)
                .HasPrecision(9, 2)
                .HasColumnName("cost");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Datetime)
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.InventoryTransferId).HasColumnName("inventory_transfer_id");
            entity.Property(e => e.NewAmount)
                .HasPrecision(12, 4)
                .HasColumnName("new_amount");
            entity.Property(e => e.OldAmount)
                .HasPrecision(12, 4)
                .HasColumnName("old_amount");
            entity.Property(e => e.ReasonCode).HasColumnName("reason_code");
            entity.Property(e => e.ShopItemsId).HasColumnName("shop_items_id");
            entity.Property(e => e.ShopStoreId).HasColumnName("shop_store_id");
            entity.Property(e => e.ShopVendorId).HasColumnName("shop_vendor_id");
        });

        modelBuilder.Entity<ShopInventoryTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_inventory_transfer")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.OriginStoreId, e.DestinationStoreId }, "origin_store_id_destination_store_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.DestinationStoreId).HasColumnName("destination_store_id");
            entity.Property(e => e.OriginStoreId).HasColumnName("origin_store_id");
            entity.Property(e => e.ReceivedBy).HasColumnName("received_by");
            entity.Property(e => e.ReceivedDate).HasColumnName("received_date");
            entity.Property(e => e.ReceiverComment)
                .HasColumnType("text")
                .HasColumnName("receiver_comment");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TotalCost)
                .HasPrecision(9, 2)
                .HasColumnName("total_cost");
            entity.Property(e => e.TotalItem).HasColumnName("total_item");
            entity.Property(e => e.TotalQuantity)
                .HasPrecision(12, 4)
                .HasColumnName("total_quantity");
            entity.Property(e => e.TransferComment)
                .HasColumnType("text")
                .HasColumnName("transfer_comment");
            entity.Property(e => e.TransferDate).HasColumnName("transfer_date");
            entity.Property(e => e.TransferredBy).HasColumnName("transferred_by");
        });

        modelBuilder.Entity<ShopItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_items")
                .UseCollation("latin1_general_ci");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.ItemNumber, "item_number");

            entity.HasIndex(e => e.TaxRateId, "tax_rate_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.Amount)
                .HasPrecision(12, 4)
                .HasColumnName("amount");
            entity.Property(e => e.AvgCost)
                .HasColumnType("float(18,2)")
                .HasColumnName("avg_cost");
            entity.Property(e => e.Category).HasColumnName("category");
            entity.Property(e => e.Color)
                .HasMaxLength(64)
                .HasColumnName("color");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Cost)
                .HasColumnType("float(18,2)")
                .HasColumnName("cost");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("date_created");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(250)
                .HasColumnName("item_number");
            entity.Property(e => e.Label)
                .HasMaxLength(16)
                .HasDefaultValueSql("''")
                .HasComment("label for schedule grid")
                .HasColumnName("label");
            entity.Property(e => e.ManufacturerId).HasColumnName("manufacturer_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Payroll)
                .HasColumnType("float(18,2)")
                .HasColumnName("payroll");
            entity.Property(e => e.Price)
                .HasColumnType("float(18,2)")
                .HasColumnName("price");
            entity.Property(e => e.PriceRules)
                .HasComment("JSON-encoded rules to calculate price.")
                .HasColumnType("text")
                .HasColumnName("price_rules");
            entity.Property(e => e.Size)
                .HasMaxLength(16)
                .HasColumnName("size");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Tax)
                .HasColumnType("float(18,2)")
                .HasColumnName("tax");
            entity.Property(e => e.TaxRateId).HasColumnName("tax_rate_id");
            entity.Property(e => e.Taxable)
                .HasDefaultValueSql("'1'")
                .HasColumnName("taxable");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<ShopItemAdjustmentReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_item_adjustment_reason")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.Default).HasColumnName("default");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.System)
                .HasDefaultValueSql("'0'")
                .HasColumnName("system");
        });

        modelBuilder.Entity<ShopItemBarcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_item_barcodes", tb => tb.HasComment("Table to store barcodes of shop items"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ItemId, "item_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Barcode)
                .HasMaxLength(255)
                .HasColumnName("barcode");
            entity.Property(e => e.ItemId).HasColumnName("item_id");
        });

        modelBuilder.Entity<ShopItemCourtLocation>(entity =>
        {
            entity.HasKey(e => new { e.ShopItemId, e.CourtLocationId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("shop_item_court_location")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ShopItemId, "shop_item");

            entity.Property(e => e.ShopItemId).HasColumnName("shop_item_id");
            entity.Property(e => e.CourtLocationId).HasColumnName("court_location_id");
        });

        modelBuilder.Entity<ShopItemManufacturer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("shop_item_manufacturer");

            entity.HasIndex(e => e.AddressId, "address_id");

            entity.HasIndex(e => e.VendorId, "vendor_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.AllStores)
                .HasDefaultValueSql("'1'")
                .HasColumnName("all_stores");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("city");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .HasDefaultValueSql("'US'")
                .IsFixedLength()
                .HasColumnName("country_code");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("email");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Phone)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("phone");
            entity.Property(e => e.State)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("state");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.StreetAddress)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("street_address");
            entity.Property(e => e.StreetAddress2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("street_address2");
            entity.Property(e => e.TimeCreated)
                .HasColumnType("datetime")
                .HasColumnName("time_created");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title")
                .UseCollation("latin1_general_ci");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.VendorId).HasColumnName("vendor_id");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .HasDefaultValueSql("''")
                .HasColumnName("zip");

            entity.HasOne(d => d.Address).WithMany(p => p.ShopItemManufacturers)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_address_id");
        });

        modelBuilder.Entity<ShopItemManufacturerStore>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_item_manufacturer_store")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ShopItemManufacturerId, "shop_item_manufacturer_id");

            entity.HasIndex(e => e.ShopStoreId, "shop_store_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("account_number");
            entity.Property(e => e.Active)
                .HasDefaultValueSql("'1'")
                .HasColumnName("active");
            entity.Property(e => e.CreditLimit)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("credit_limit");
            entity.Property(e => e.PaymentTerms)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("payment_terms");
            entity.Property(e => e.ShopItemManufacturerId).HasColumnName("shop_item_manufacturer_id");
            entity.Property(e => e.ShopStoreId).HasColumnName("shop_store_id");
        });

        modelBuilder.Entity<ShopItemStore>(entity =>
        {
            entity.HasKey(e => new { e.ShopItemsId, e.ShopStoreId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("shop_item_store", tb => tb.HasComment("Shop Item Store"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AccountingGroupId, "accounting_group_id");

            entity.Property(e => e.ShopItemsId).HasColumnName("shop_items_id");
            entity.Property(e => e.ShopStoreId).HasColumnName("shop_store_id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Amount)
                .HasPrecision(12, 4)
                .HasColumnName("amount");
            entity.Property(e => e.Available)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("available");
            entity.Property(e => e.AverageCost)
                .HasPrecision(9, 3)
                .HasColumnName("average_cost");
        });

        modelBuilder.Entity<ShopOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_order")
                .UseCollation("latin1_general_ci");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.User, "user");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'pending'")
                .HasColumnType("enum('pending','payed','cancelled')")
                .HasColumnName("status");
            entity.Property(e => e.Total)
                .HasDefaultValueSql("'1'")
                .HasColumnName("total");
            entity.Property(e => e.User).HasColumnName("user");
        });

        modelBuilder.Entity<ShopShortcutCart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_shortcut_cart")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Cost)
                .HasPrecision(18, 2)
                .HasColumnName("cost");
            entity.Property(e => e.DashboardItemId)
                .HasMaxLength(32)
                .HasColumnName("dashboard_item_id");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.ProductPrice)
                .HasPrecision(18, 2)
                .HasColumnName("product_price");
            entity.Property(e => e.ShopItemId).HasColumnName("shop_item_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ShopShortcutItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_shortcut_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.CartId, e.ShopItemId, e.ProductPrice }, "idx_shop_shortcut_item_cart_id_shop_item_id_product_price");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CartId).HasColumnName("cart_id");
            entity.Property(e => e.ProductPrice)
                .HasPrecision(18, 2)
                .HasColumnName("product_price");
            entity.Property(e => e.ShopItemId).HasColumnName("shop_item_id");
        });

        modelBuilder.Entity<ShopShortcutMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_shortcut_menu")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ShopStoreId, "shop_store_id");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DashboardItemId)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("dashboard_item_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.ShopStoreId).HasColumnName("shop_store_id");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<ShopStore>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_store")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.BillingAddressId, "billing_address_id");

            entity.HasIndex(e => e.LocationId, "location_id");

            entity.HasIndex(e => e.ShippingAddressId, "shipping_address_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.BillingAddressId).HasColumnName("billing_address_id");
            entity.Property(e => e.BillingCity)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("billing_city");
            entity.Property(e => e.BillingState)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("billing_state");
            entity.Property(e => e.BillingStreetAddress)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("billing_street_address");
            entity.Property(e => e.BillingStreetAddress2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("billing_street_address2");
            entity.Property(e => e.BillingZip)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("billing_zip");
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("fax");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("phone");
            entity.Property(e => e.ShippingAddressId).HasColumnName("shipping_address_id");
            entity.Property(e => e.ShippingCity)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("shipping_city");
            entity.Property(e => e.ShippingState)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("shipping_state");
            entity.Property(e => e.ShippingStreetAddress)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("shipping_street_address");
            entity.Property(e => e.ShippingStreetAddress2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("shipping_street_address2");
            entity.Property(e => e.ShippingZip)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("shipping_zip");

            entity.HasOne(d => d.BillingAddress).WithMany(p => p.ShopStoreBillingAddresses)
                .HasForeignKey(d => d.BillingAddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_billing_address_id");

            entity.HasOne(d => d.ShippingAddress).WithMany(p => p.ShopStoreShippingAddresses)
                .HasForeignKey(d => d.ShippingAddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_shipping_address_id");
        });

        modelBuilder.Entity<ShopStorePo>(entity =>
        {
            entity.HasKey(e => new { e.ShopStoreId, e.PosId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("shop_store_pos")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.ShopStoreId).HasColumnName("shop_store_id");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
        });

        modelBuilder.Entity<ShopTaxRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("shop_tax_rate");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupName)
                .HasColumnType("text")
                .HasColumnName("acc_group_name");
            entity.Property(e => e.GlCode)
                .HasColumnType("text")
                .HasColumnName("gl_code");
            entity.Property(e => e.IndexNumber).HasColumnName("index_number");
            entity.Property(e => e.Rate)
                .HasPrecision(9, 4)
                .HasColumnName("rate");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.TaxName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("tax_name");
        });

        modelBuilder.Entity<ShopVendor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_vendor")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AddressId, "address_id");

            entity.HasIndex(e => e.AllStores, "all_stores");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.AllStores)
                .HasDefaultValueSql("'1'")
                .HasColumnName("all_stores");
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .HasDefaultValueSql("''")
                .HasColumnName("city");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .HasDefaultValueSql("'US'")
                .IsFixedLength()
                .HasColumnName("country_code");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.Phone)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("phone");
            entity.Property(e => e.State)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("state");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.StreetAddress)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("street_address");
            entity.Property(e => e.StreetAddress2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("street_address2");
            entity.Property(e => e.TimeCreated)
                .HasColumnType("datetime")
                .HasColumnName("time_created");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .HasDefaultValueSql("''")
                .HasColumnName("zip");

            entity.HasOne(d => d.Address).WithMany(p => p.ShopVendors)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_sv_ad");
        });

        modelBuilder.Entity<ShopVendorItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("shop_vendor_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ShopItemId, "shop_item_id");

            entity.HasIndex(e => e.ShopVendorId, "shop_vendor_id");

            entity.Property(e => e.ShopItemId).HasColumnName("shop_item_id");
            entity.Property(e => e.ShopVendorId).HasColumnName("shop_vendor_id");
        });

        modelBuilder.Entity<ShopVendorOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_vendor_order", tb => tb.HasComment("Shop Vendor Order"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ShopVendorId, "shop_vendor_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ShopVendorId).HasColumnName("shop_vendor_id");
        });

        modelBuilder.Entity<ShopVendorOrderItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("shop_vendor_order_item", tb => tb.HasComment("Shop Vendor Order Item"))
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ShopItemId, "shop_item_id");

            entity.HasIndex(e => e.ShopVendorOrderId, "shop_vendor_order_id");

            entity.Property(e => e.ShopItemId).HasColumnName("shop_item_id");
            entity.Property(e => e.ShopVendorOrderId).HasColumnName("shop_vendor_order_id");
        });

        modelBuilder.Entity<ShopVendorStore>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("shop_vendor_store")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ShopStoreId, "shop_store_id");

            entity.HasIndex(e => e.ShopVendorId, "shop_vendor_id");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => new { e.ShopVendorId, e.ShopStoreId }, "vendor_store").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("account_number");
            entity.Property(e => e.CreditLimit)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("credit_limit");
            entity.Property(e => e.PaymentTerms)
                .HasMaxLength(45)
                .HasDefaultValueSql("''")
                .HasColumnName("payment_terms");
            entity.Property(e => e.ShopStoreId).HasColumnName("shop_store_id");
            entity.Property(e => e.ShopVendorId).HasColumnName("shop_vendor_id");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<SmallgroupStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("smallgroup_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<SoccerStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("soccer_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<SpaAddon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("spa_addon");

            entity.HasIndex(e => e.ServiceId, "service_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Archived).HasColumnName("archived");
            entity.Property(e => e.BilledByTime).HasColumnName("billed_by_time");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasPrecision(10, 2)
                .HasColumnName("price");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
        });

        modelBuilder.Entity<SpaAddonPrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("spa_addon_price")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.Price)
                .HasPrecision(10, 2)
                .HasColumnName("price");
        });

        modelBuilder.Entity<SpaPayrollRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("spa_payroll_rate")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.HourlyCompensation)
                .HasPrecision(10, 2)
                .HasColumnName("hourly_compensation");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<SpaPayrollRateLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("spa_payroll_rate_level")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.PayrollRateId, "payroll_rate_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Earning).HasColumnName("earning");
            entity.Property(e => e.From)
                .HasPrecision(10, 2)
                .HasColumnName("from");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PayrollRateId).HasColumnName("payroll_rate_id");
            entity.Property(e => e.To)
                .HasPrecision(10, 2)
                .HasColumnName("to");
            entity.Property(e => e.Type)
                .HasColumnType("enum('product','service')")
                .HasColumnName("type");
        });

        modelBuilder.Entity<SpaScheduleAddon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("spa_schedule_addon");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
        });

        modelBuilder.Entity<SpaScheduleService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("spa_schedule_service");

            entity.HasIndex(e => e.ScheduleId, "schedule_id");

            entity.HasIndex(e => e.ServiceId, "service_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
        });

        modelBuilder.Entity<SpaService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("spa_service");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Archived).HasColumnName("archived");
            entity.Property(e => e.BilledByTime).HasColumnName("billed_by_time");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Price)
                .HasPrecision(10, 2)
                .HasColumnName("price");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            entity.Property(e => e.SuggestedTime).HasColumnName("suggested_time");
        });

        modelBuilder.Entity<SpaServiceAddon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("spa_service_addon")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AddonId, "addon_id");

            entity.HasIndex(e => e.ServiceId, "service_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
        });

        modelBuilder.Entity<SpaServiceNote>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("spa_service_note");

            entity.HasIndex(e => e.ServiceId, "service_id");

            entity.HasIndex(e => new { e.ServiceId, e.UserId }, "service_id-user_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.StaffNote)
                .HasColumnType("text")
                .HasColumnName("staff_note");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<SpaServicePrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("spa_service_price")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceId, "service_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.Price)
                .HasPrecision(10, 2)
                .HasColumnName("price");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
        });

        modelBuilder.Entity<SpaStaff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("spa_staff");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.HasIndex(e => e.ServiceId, "service_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Price)
                .HasPrecision(10, 2)
                .HasColumnName("price");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
        });

        modelBuilder.Entity<SpaStaffServicePrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("spa_staff_service_price");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.HasIndex(e => e.ServiceId, "service_id");

            entity.HasIndex(e => new { e.ServiceId, e.ResourceId }, "service_id_resource_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.Price)
                .HasPrecision(10, 2)
                .HasColumnName("price");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
        });

        modelBuilder.Entity<SquashStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("squash_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<StaffField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("staff_fields")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BillingRatePeriod)
                .HasDefaultValueSql("'60'")
                .HasColumnName("billing_rate_period");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("column_name");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.FeeName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("fee_name");
            entity.Property(e => e.LessonType).HasColumnName("lesson_type");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.PlayerOnCourt).HasColumnName("player_on_court");
            entity.Property(e => e.Rate)
                .HasPrecision(18, 2)
                .HasColumnName("rate");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.TableName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("table_name");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<StaffLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("staff_level")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "fk_staff_level_component");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.Component).WithMany(p => p.StaffLevels)
                .HasForeignKey(d => d.ComponentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_staff_level_component");
        });

        modelBuilder.Entity<StaffLevelUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("staff_level_user")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "fk_staff_level_user_component");

            entity.HasIndex(e => e.StaffLevelId, "fk_staff_level_user_staff_level");

            entity.HasIndex(e => e.UserId, "fk_staff_level_user_user");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.StaffLevelId).HasColumnName("staff_level_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");

            entity.HasOne(d => d.Component).WithMany(p => p.StaffLevelUsers)
                .HasForeignKey(d => d.ComponentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_staff_level_user_component");

            entity.HasOne(d => d.StaffLevel).WithMany(p => p.StaffLevelUsers)
                .HasForeignKey(d => d.StaffLevelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_staff_level_user_staff_level");

            entity.HasOne(d => d.User).WithMany(p => p.StaffLevelUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_staff_level_user_user");
        });

        modelBuilder.Entity<StaffReleaseNote>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("staff_release_notes");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.RealeaseNoteDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("realease_note_date");
            entity.Property(e => e.ReleaseNoteId).HasColumnName("release_note_id");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
        });

        modelBuilder.Entity<StaffSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("staff_schedule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.Date, e.EntityId, e.UserId }, "date_entity_id_user_id").IsUnique();

            entity.HasIndex(e => e.ComponentId, "fk_staff_schedule_component_id");

            entity.HasIndex(e => e.EntityId, "fk_staff_schedule_entity_id");

            entity.HasIndex(e => e.RepeatId, "fk_staff_schedule_repeat_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ConcurrentBookings).HasColumnName("concurrent_bookings");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.RepeatId).HasColumnName("repeat_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Component).WithMany(p => p.StaffSchedules)
                .HasForeignKey(d => d.ComponentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_staff_schedule_component_id");

            entity.HasOne(d => d.Entity).WithMany(p => p.StaffSchedules)
                .HasForeignKey(d => d.EntityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_staff_schedule_entity_id");

            entity.HasOne(d => d.Repeat).WithMany(p => p.InverseRepeat)
                .HasForeignKey(d => d.RepeatId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_staff_schedule_repeat_id");
        });

        modelBuilder.Entity<StaffScheduleService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("staff_schedule_service")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ServiceTypeId, "fk_staff_schedule_service_service_type_id");

            entity.HasIndex(e => e.StaffScheduleId, "fk_staff_schedule_service_staff_schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");
            entity.Property(e => e.StaffScheduleId).HasColumnName("staff_schedule_id");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.StaffScheduleServices)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_staff_schedule_service_service_type_id");

            entity.HasOne(d => d.StaffSchedule).WithMany(p => p.StaffScheduleServices)
                .HasForeignKey(d => d.StaffScheduleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_staff_schedule_service_staff_schedule_id");
        });

        modelBuilder.Entity<StaffScheduleTime>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("staff_schedule_time")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.StaffScheduleId, "fk_staff_schedule_day_staff_schedule_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.StaffScheduleId).HasColumnName("staff_schedule_id");
            entity.Property(e => e.TimeFrom)
                .HasColumnType("time")
                .HasColumnName("time_from");
            entity.Property(e => e.TimeTo)
                .HasColumnType("time")
                .HasColumnName("time_to");

            entity.HasOne(d => d.StaffSchedule).WithMany(p => p.StaffScheduleTimes)
                .HasForeignKey(d => d.StaffScheduleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_staff_schedule_day_staff_schedule_id");
        });

        modelBuilder.Entity<StaffShift>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("staff_shift")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DateTimeFrom, "date_time_from");

            entity.HasIndex(e => e.DateTimeTo, "date_time_to");

            entity.HasIndex(e => e.StaffShiftScheduleId, "fk_staff_shift_schedule");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateTimeFrom)
                .HasColumnType("datetime")
                .HasColumnName("date_time_from");
            entity.Property(e => e.DateTimeTo)
                .HasColumnType("datetime")
                .HasColumnName("date_time_to");
            entity.Property(e => e.StaffShiftScheduleId).HasColumnName("staff_shift_schedule_id");

            entity.HasOne(d => d.StaffShiftSchedule).WithMany(p => p.StaffShifts)
                .HasForeignKey(d => d.StaffShiftScheduleId)
                .HasConstraintName("fk_staff_shift_schedule");
        });

        modelBuilder.Entity<StaffShiftSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("staff_shift_schedule")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.DateFrom, "date_from");

            entity.HasIndex(e => e.DateTo, "date_to");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.DateFrom)
                .HasComment("Original start date")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasComment("Original end date")
                .HasColumnName("date_to");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.RecurrenceType)
                .HasDefaultValueSql("'never'")
                .HasColumnType("enum('never','weekly')")
                .HasColumnName("recurrence_type");
            entity.Property(e => e.UserId)
                .HasComment("Staff")
                .HasColumnName("user_id");
            entity.Property(e => e.WeekDayNumbers)
                .HasMaxLength(30)
                .HasDefaultValueSql("'[]'")
                .HasComment("Json array from 1 (monday) to 7 (sunday)")
                .HasColumnName("week_day_numbers");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("state");

            entity.HasIndex(e => e.CountryId, "fk_state_country");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("code");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("country_code");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ParentId)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("parent_id");
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .HasColumnName("type");

            entity.HasOne(d => d.Country).WithMany(p => p.States)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("fk_state_country");
        });

        modelBuilder.Entity<StatementCache>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("statement_cache");

            entity.HasIndex(e => e.CacheDate, "cache_date");

            entity.HasIndex(e => e.CacheStatus, "cache_status");

            entity.HasIndex(e => e.DateTo, "date_to");

            entity.HasIndex(e => e.Hash, "hash");

            entity.HasIndex(e => new { e.Hash, e.RowType, e.DateTo, e.CacheStatus, e.CacheDate }, "hash_row_type");

            entity.HasIndex(e => new { e.MemberFirstName, e.MemberLastName }, "member_first_name");

            entity.HasIndex(e => e.RowType, "row_type");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CacheDate)
                .HasColumnType("datetime")
                .HasColumnName("cache_date");
            entity.Property(e => e.CacheStatus)
                .IsRequired()
                .HasDefaultValueSql("'2'")
                .HasColumnName("cache_status");
            entity.Property(e => e.ContractNum)
                .HasMaxLength(25)
                .HasDefaultValueSql("''")
                .HasColumnName("contract_num");
            entity.Property(e => e.Credit)
                .HasPrecision(9, 2)
                .HasColumnName("credit");
            entity.Property(e => e.CumulativeAging).HasColumnName("cumulative_aging");
            entity.Property(e => e.Current)
                .HasPrecision(18, 2)
                .HasColumnName("current");
            entity.Property(e => e.D120)
                .HasPrecision(18, 2)
                .HasColumnName("d120");
            entity.Property(e => e.D30)
                .HasPrecision(18, 2)
                .HasColumnName("d30");
            entity.Property(e => e.D60)
                .HasPrecision(18, 2)
                .HasColumnName("d60");
            entity.Property(e => e.D90)
                .HasPrecision(18, 2)
                .HasColumnName("d90");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.Hash).HasColumnName("hash");
            entity.Property(e => e.HouseCharge)
                .HasMaxLength(255)
                .HasColumnName("house_charge");
            entity.Property(e => e.LateFee)
                .HasPrecision(18, 2)
                .HasColumnName("late_fee");
            entity.Property(e => e.MemberFirstName)
                .HasDefaultValueSql("''")
                .HasColumnName("member_first_name");
            entity.Property(e => e.MemberLastName)
                .HasDefaultValueSql("''")
                .HasColumnName("member_last_name");
            entity.Property(e => e.MemberName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("member_name");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasColumnName("phone");
            entity.Property(e => e.RowType).HasColumnName("row_type");
            entity.Property(e => e.StatementBalance)
                .HasPrecision(18, 2)
                .HasColumnName("statement_balance");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .HasColumnName("status");
            entity.Property(e => e.TimeTo)
                .HasColumnType("datetime")
                .HasColumnName("time_to");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<StatementEmailQueue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("statement_email_queue");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.JsonParams)
                .HasColumnType("mediumtext")
                .HasColumnName("json_params");
            entity.Property(e => e.Removed).HasColumnName("removed");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Style>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("style")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Type, "type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Settings)
                .HasColumnType("text")
                .HasColumnName("settings");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'1'")
                .HasColumnName("type");
        });

        modelBuilder.Entity<SummerCamp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("summer_camp");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Location)
                .HasMaxLength(1000)
                .HasColumnName("location");
            entity.Property(e => e.RegistrationDeadline).HasColumnName("registration_deadline");
        });

        modelBuilder.Entity<SummerCampRegister>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("summer_camp_register");

            entity.Property(e => e.LessonType).HasColumnName("lesson_type");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<SummerCampType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("summer_camp_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.PriceAfterDeadline)
                .HasPrecision(9, 2)
                .HasColumnName("price_after_deadline");
            entity.Property(e => e.PriceBeforeDeadline)
                .HasPrecision(9, 2)
                .HasColumnName("price_before_deadline");
            entity.Property(e => e.SummerCampId).HasColumnName("summer_camp_id");
            entity.Property(e => e.Weekdays)
                .HasMaxLength(200)
                .HasColumnName("weekdays");
        });

        modelBuilder.Entity<SwimmingStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("swimming_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<SyncDatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("sync_data")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Exported, "exported");

            entity.HasIndex(e => e.ItemId, "item_id");

            entity.HasIndex(e => e.Table, "table").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Action)
                .HasMaxLength(255)
                .HasColumnName("action");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Exported).HasColumnName("exported");
            entity.Property(e => e.ItemId).HasColumnName("item_id");
            entity.Property(e => e.Table).HasColumnName("table");
        });

        modelBuilder.Entity<TanningStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tanning_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Tbatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tbatch");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("date_created");
            entity.Property(e => e.MemberId).HasColumnName("member_id");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("float(18,2)")
                .HasColumnName("total_amount");
            entity.Property(e => e.TransactionType)
                .HasDefaultValueSql("'charge'")
                .HasColumnType("enum('charge','credit','check')")
                .HasColumnName("transaction_type");
            entity.Property(e => e.Type)
                .HasMaxLength(14)
                .HasColumnName("type");
        });

        modelBuilder.Entity<TbatchTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tbatch_transaction");

            entity.HasIndex(e => e.TbatchId, "tbatch_id");

            entity.HasIndex(e => e.TransactionId, "transaction_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.TbatchId).HasColumnName("tbatch_id");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
        });

        modelBuilder.Entity<TeeSheet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("tee_sheet")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ResourceId, "resource_id");

            entity.HasIndex(e => e.TeeSheetTemplateId, "tee_sheet_template_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DaysOfWeek)
                .HasMaxLength(100)
                .HasDefaultValueSql("''")
                .HasComment("comma separated list")
                .HasColumnName("days_of_week");
            entity.Property(e => e.EndDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("end_date");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("start_date");
            entity.Property(e => e.TeeSheetTemplateId).HasColumnName("tee_sheet_template_id");
            entity.Property(e => e.TeeSheetTemplateName)
                .HasMaxLength(250)
                .HasColumnName("tee_sheet_template_name");
        });

        modelBuilder.Entity<TeeSheetTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("tee_sheet_template")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasColumnName("name");
        });

        modelBuilder.Entity<TeeSheetTemplateItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("tee_sheet_template_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.TeeSheetTemplateId, "tee_sheet_template_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EndTime)
                .HasColumnType("time")
                .HasColumnName("end_time");
            entity.Property(e => e.PlayersMaxNum).HasColumnName("players_max_num");
            entity.Property(e => e.RoundType)
                .HasComment("18/9 holes, see constants (for tee time only)")
                .HasColumnName("round_type");
            entity.Property(e => e.StartHole)
                .HasComment("usually 1/10 for Front 9/Back 9 (for tee time only)")
                .HasColumnName("start_hole");
            entity.Property(e => e.StartTime)
                .HasColumnType("time")
                .HasColumnName("start_time");
            entity.Property(e => e.TeeSheetTemplateId).HasColumnName("tee_sheet_template_id");
            entity.Property(e => e.TeeTimeInterval)
                .HasComment("in minutes")
                .HasColumnName("tee_time_interval");
            entity.Property(e => e.Type)
                .HasComment("tee time | shortgun | blocked time (see defined constants)")
                .HasColumnName("type");
        });

        modelBuilder.Entity<TeeTime>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("tee_time")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.EndTime)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("end_time");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.GolfCartFee)
                .HasPrecision(10, 2)
                .HasColumnName("golf_cart_fee");
            entity.Property(e => e.GreenFee)
                .HasPrecision(10, 2)
                .HasColumnName("green_fee");
            entity.Property(e => e.PlayersMaxNum)
                .HasComment("maximum number of players allowed for online registration")
                .HasColumnName("players_max_num");
            entity.Property(e => e.PlayersNum)
                .HasComment("number of players already registered in this time slot")
                .HasColumnName("players_num");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoundType)
                .HasComment("18/9 holes round, see constants (is used when create tee time reservation)")
                .HasColumnName("round_type");
            entity.Property(e => e.StartHole)
                .HasDefaultValueSql("'1'")
                .HasComment("1 for Front 9, 10 for Back 9 etc. (is used when create tee time reservation)")
                .HasColumnName("start_hole");
            entity.Property(e => e.StartTime)
                .HasDefaultValueSql("'00:00:00'")
                .HasColumnType("time")
                .HasColumnName("start_time");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasComment("1 - active, 2 - squeeze, 3 - canceled")
                .HasColumnName("status");
            entity.Property(e => e.TeeSheetId).HasColumnName("tee_sheet_id");
            entity.Property(e => e.Type)
                .HasComment("tee time | shortgun | blocked time (see defined constants)")
                .HasColumnName("type");
        });

        modelBuilder.Entity<TennisStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tennis_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ticket");

            entity.HasIndex(e => e.Blocked, "blocked");

            entity.HasIndex(e => e.BlockedDate, "blocked_date");

            entity.HasIndex(e => e.CompleteDate, "complete_date");

            entity.HasIndex(e => e.InitialStaff, "initial_staff");

            entity.HasIndex(e => e.InitialUser, "initial_user");

            entity.HasIndex(e => e.PaymentStatus, "payment_status");

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.BlockedDate).HasColumnName("blocked_date");
            entity.Property(e => e.BlockedTime)
                .HasColumnType("datetime")
                .HasColumnName("blocked_time");
            entity.Property(e => e.ChargeIds)
                .HasColumnType("text")
                .HasColumnName("charge_ids");
            entity.Property(e => e.CompleteDate)
                .HasColumnType("datetime")
                .HasColumnName("complete_date");
            entity.Property(e => e.Count)
                .HasDefaultValueSql("'1.00'")
                .HasColumnType("float(18,2)")
                .HasColumnName("count");
            entity.Property(e => e.DateTime)
                .HasComment("day required")
                .HasColumnType("datetime")
                .HasColumnName("date_time");
            entity.Property(e => e.DropDate)
                .HasColumnType("datetime")
                .HasColumnName("drop_date");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.HasHouseCharge).HasColumnName("has_house_charge");
            entity.Property(e => e.InitialStaff).HasColumnName("initial_staff");
            entity.Property(e => e.InitialUser).HasColumnName("initial_user");
            entity.Property(e => e.PaymentStatus)
                .HasDefaultValueSql("'unpaid'")
                .HasColumnType("enum('unpaid','paid')")
                .HasColumnName("payment_status");
            entity.Property(e => e.Phone)
                .HasMaxLength(255)
                .HasColumnName("phone");
            entity.Property(e => e.Racquet)
                .HasMaxLength(255)
                .HasColumnName("racquet");
            entity.Property(e => e.RepairNew)
                .HasDefaultValueSql("'repair'")
                .HasColumnType("enum('repair','new')")
                .HasColumnName("repair_new");
            entity.Property(e => e.Repairs)
                .HasColumnType("text")
                .HasColumnName("repairs");
            entity.Property(e => e.Report)
                .HasColumnType("text")
                .HasColumnName("report");
            entity.Property(e => e.StaffComment)
                .HasColumnType("text")
                .HasColumnName("staff_comment");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.StaffPayroll)
                .HasColumnType("float(9,2)")
                .HasColumnName("staff_payroll");
            entity.Property(e => e.StaffRates)
                .HasColumnType("text")
                .HasColumnName("staff_rates");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'open'")
                .HasColumnType("enum('open','complete')")
                .HasColumnName("status");
            entity.Property(e => e.String)
                .HasMaxLength(255)
                .HasColumnName("string");
            entity.Property(e => e.Tension)
                .HasMaxLength(255)
                .HasColumnName("tension");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<Tournament>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tournament");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.RegisterDeadline).HasColumnName("register_deadline");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
        });

        modelBuilder.Entity<TournamentDraw>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tournament_draw");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.TournamentId).HasColumnName("tournament_id");
        });

        modelBuilder.Entity<TournamentMatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tournament_match");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DrawId).HasColumnName("draw_id");
            entity.Property(e => e.FirstPlayer).HasColumnName("first_player");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Round)
                .HasDefaultValueSql("'1'")
                .HasColumnName("round");
            entity.Property(e => e.Score)
                .HasMaxLength(200)
                .HasColumnName("score");
            entity.Property(e => e.SecondPlayer).HasColumnName("second_player");
            entity.Property(e => e.Winner).HasColumnName("winner");
        });

        modelBuilder.Entity<TournamentPlayer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tournament_player");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .HasColumnName("address");
            entity.Property(e => e.City)
                .HasMaxLength(200)
                .HasColumnName("city");
            entity.Property(e => e.FirstName)
                .HasMaxLength(200)
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .HasMaxLength(200)
                .HasColumnName("last_name");
            entity.Property(e => e.Phone)
                .HasMaxLength(200)
                .HasColumnName("phone");
            entity.Property(e => e.State)
                .HasMaxLength(200)
                .HasColumnName("state");
            entity.Property(e => e.TournamentId).HasColumnName("tournament_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UstaNumber)
                .HasMaxLength(200)
                .HasColumnName("usta_number");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(200)
                .HasColumnName("zip_code");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("transaction");

            entity.HasIndex(e => e.Complete, "complete");

            entity.HasIndex(e => e.Date, "date");

            entity.HasIndex(e => e.EftCode, "eft_code").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.IsCheck, "is_check");

            entity.HasIndex(e => e.IsEft, "is_eft");

            entity.HasIndex(e => e.IsOnline, "is_online");

            entity.HasIndex(e => e.MailBilled, "mail_billed");

            entity.HasIndex(e => e.PosId, "pos_id");

            entity.HasIndex(e => e.Result, "result");

            entity.HasIndex(e => new { e.RetailerId, e.EftCode }, "retailer_eft_code");

            entity.HasIndex(e => e.ShiftId, "shift_id");

            entity.HasIndex(e => e.SubmitStatus, "submit_status").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.HasIndex(e => e.Time, "time");

            entity.HasIndex(e => e.Unreal, "unreal");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthorizationNumber)
                .HasMaxLength(255)
                .HasColumnName("authorization_number");
            entity.Property(e => e.CcTransactionInfo)
                .HasColumnType("text")
                .HasColumnName("cc_transaction_info");
            entity.Property(e => e.ChangeGiven)
                .HasColumnType("float(18,2)")
                .HasColumnName("change_given");
            entity.Property(e => e.Complete)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("complete");
            entity.Property(e => e.CreditCardNumber)
                .HasMaxLength(255)
                .HasColumnName("credit_card_number");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Discount)
                .HasPrecision(9, 2)
                .HasColumnName("discount");
            entity.Property(e => e.EftCode).HasColumnName("eft_code");
            entity.Property(e => e.EftDate)
                .HasColumnType("datetime")
                .HasColumnName("eft_date");
            entity.Property(e => e.EntityId)
                .HasComment("club id")
                .HasColumnName("entity_id");
            entity.Property(e => e.IsCheck).HasColumnName("is_check");
            entity.Property(e => e.IsEft).HasColumnName("is_eft");
            entity.Property(e => e.IsOnline).HasColumnName("is_online");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MailBilled).HasColumnName("mail_billed");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.Result)
                .HasColumnType("enum('OK','FAILED','DECLINED','DUPLICATE','FRAUD','VOIDED','SUBMITTED')")
                .HasColumnName("result");
            entity.Property(e => e.RetailerId).HasColumnName("retailer_id");
            entity.Property(e => e.ShiftId).HasColumnName("shift_id");
            entity.Property(e => e.SslApprovalCode)
                .HasMaxLength(50)
                .HasColumnName("ssl_approval_code");
            entity.Property(e => e.SslTxnId)
                .HasMaxLength(50)
                .HasColumnName("ssl_txn_id");
            entity.Property(e => e.SubmitStatus)
                .HasMaxLength(50)
                .HasColumnName("submit_status");
            entity.Property(e => e.Subtotal)
                .HasPrecision(12, 2)
                .HasColumnName("subtotal");
            entity.Property(e => e.TParams)
                .HasColumnType("text")
                .HasColumnName("t_params");
            entity.Property(e => e.Tax)
                .HasPrecision(9, 3)
                .HasColumnName("tax");
            entity.Property(e => e.TaxRate)
                .HasPrecision(9, 4)
                .HasColumnName("tax_rate");
            entity.Property(e => e.Time)
                .HasColumnType("datetime")
                .HasColumnName("time");
            entity.Property(e => e.Total)
                .HasPrecision(12, 2)
                .HasColumnName("total");
            entity.Property(e => e.Unreal).HasColumnName("unreal");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<TransactionInfrastructureFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("transaction_infrastructure_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.TransactionId, "transaction_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.PaymentTransactionAmount)
                .HasPrecision(12, 2)
                .HasColumnName("payment_transaction_amount");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TotalFeeApplied).HasColumnName("total_fee_applied");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
        });

        modelBuilder.Entity<TransactionPenaltyCharge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("transaction_penalty_charge")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ChargeId, "charge_id");

            entity.HasIndex(e => e.TransactionId, "transaction_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.FeeAdded)
                .HasDefaultValueSql("'YES'")
                .HasColumnType("enum('YES','NO')")
                .HasColumnName("fee_added");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
        });

        modelBuilder.Entity<TrxStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("trx_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<TryU>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("try_us")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.LocationId, "location_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Email)
                .HasMaxLength(128)
                .HasDefaultValueSql("''")
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(128)
                .HasDefaultValueSql("''")
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .HasMaxLength(128)
                .HasDefaultValueSql("''")
                .HasColumnName("last_name");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.Phone)
                .HasMaxLength(128)
                .HasDefaultValueSql("''")
                .HasColumnName("phone");
        });

        modelBuilder.Entity<TurffieldStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("turffield_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UpdateLogger>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("update_logger");

            entity.HasIndex(e => new { e.UpdatedId, e.UpdatedObject, e.InvolvedService }, "updated_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InvolvedService)
                .HasDefaultValueSql("'checkin'")
                .HasColumnType("enum('checkin','gates','booker')")
                .HasColumnName("involved_service");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.UpdatedId).HasColumnName("updated_id");
            entity.Property(e => e.UpdatedObject)
                .HasDefaultValueSql("''")
                .HasColumnName("updated_object");
            entity.Property(e => e.UpdatedStatus)
                .HasComment("0 - waiting, 1 - updated")
                .HasColumnName("updated_status");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user");

            entity.HasIndex(e => e.AccountNum, "account_num").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.HasIndex(e => e.ContractNum, "contract_num");

            entity.HasIndex(e => e.DeliveryMethod, "delivery_method");

            entity.HasIndex(e => e.Email, "email");

            entity.HasIndex(e => e.EntityId, "entity_id");

            entity.HasIndex(e => e.FirstName, "first_name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.HasIndex(e => e.HouseCharge, "house_charge");

            entity.HasIndex(e => e.ImportId, "import_id").IsUnique();

            entity.HasIndex(e => e.Joined, "joined");

            entity.HasIndex(e => e.LastName, "last_name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.HasIndex(e => e.Login, "login");

            entity.HasIndex(e => e.ModifiedBy, "modified_by");

            entity.HasIndex(e => e.ModifiedDate, "modified_date");

            entity.HasIndex(e => e.Nonmember, "nonmember");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => e.PrimaryId, "primary_id");

            entity.HasIndex(e => e.Role, "role");

            entity.HasIndex(e => e.SendMail, "send_mail");

            entity.HasIndex(e => e.Status, "status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountNum).HasColumnName("account_num");
            entity.Property(e => e.Activated).HasColumnName("activated");
            entity.Property(e => e.AdditionalEmails)
                .HasColumnType("text")
                .HasColumnName("additional_emails");
            entity.Property(e => e.Age)
                .HasPrecision(6, 2)
                .HasColumnName("age");
            entity.Property(e => e.Balance)
                .HasColumnType("float(18,2)")
                .HasColumnName("balance");
            entity.Property(e => e.BalanceTill)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("balance_till");
            entity.Property(e => e.BirthDate).HasColumnName("birth_date");
            entity.Property(e => e.Cancelled)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("cancelled");
            entity.Property(e => e.CancelledReason)
                .HasMaxLength(255)
                .HasColumnName("cancelled_reason");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.Confidence)
                .IsRequired()
                .HasDefaultValueSql("'3'")
                .HasColumnName("confidence");
            entity.Property(e => e.ConfirmedRso).HasColumnName("confirmed_rso");
            entity.Property(e => e.ContractNum).HasColumnName("contract_num");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .HasDefaultValueSql("'US'")
                .HasColumnName("country_code");
            entity.Property(e => e.CreditLimit).HasColumnName("credit_limit");
            entity.Property(e => e.DcsAddrStatus)
                .HasComment("if 1 address updated by dcs elseif 2 address acknowledge by staff elseif 3 exclude address update by dcs")
                .HasColumnName("dcs_addr_status");
            entity.Property(e => e.DeliveryMethod)
                .HasDefaultValueSql("'none'")
                .HasColumnType("enum('none','email','mail')")
                .HasColumnName("delivery_method");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(250)
                .HasColumnName("drivers_license");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(10)
                .HasColumnName("drivers_license_state");
            entity.Property(e => e.ELogin)
                .HasMaxLength(100)
                .HasColumnName("e_login");
            entity.Property(e => e.EPass)
                .HasMaxLength(250)
                .HasColumnName("e_pass");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .HasColumnName("email");
            entity.Property(e => e.EmailNotConfirmed).HasColumnName("email_not_confirmed");
            entity.Property(e => e.EntityId)
                .HasComment("home club")
                .HasColumnName("entity_id");
            entity.Property(e => e.Expired).HasColumnName("expired");
            entity.Property(e => e.FamilyAddrType).HasColumnName("family_addr_type");
            entity.Property(e => e.Filename)
                .HasMaxLength(100)
                .HasColumnName("filename");
            entity.Property(e => e.FirstName).HasColumnName("first_name");
            entity.Property(e => e.GuestVisits).HasColumnName("guest_visits");
            entity.Property(e => e.HouseCharge)
                .HasDefaultValueSql("'no'")
                .HasColumnType("enum('no','credit card','bank account','mail bill','trade')")
                .HasColumnName("house_charge");
            entity.Property(e => e.ImportId)
                .HasMaxLength(100)
                .HasColumnName("import_id");
            entity.Property(e => e.IsGlobal).HasColumnName("is_global");
            entity.Property(e => e.IsSystem).HasColumnName("is_system");
            entity.Property(e => e.Joined).HasColumnName("joined");
            entity.Property(e => e.LastName).HasColumnName("last_name");
            entity.Property(e => e.LastStatementDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("last_statement_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LastUpdatePasswordDate).HasColumnName("last_update_password_date");
            entity.Property(e => e.LastVisitDate).HasColumnName("last_visit_date");
            entity.Property(e => e.LateFeeExempt)
                .HasDefaultValueSql("'2'")
                .HasColumnName("late_fee_exempt");
            entity.Property(e => e.Login)
                .HasMaxLength(200)
                .HasColumnName("login");
            entity.Property(e => e.MembershipType).HasColumnName("membership_type");
            entity.Property(e => e.MenuCollapsed).HasColumnName("menu_collapsed");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(255)
                .HasColumnName("middle_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Nonmember).HasColumnName("nonmember");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.PosHouseCharge).HasColumnName("pos_house_charge");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.PrimaryId).HasColumnName("primary_id");
            entity.Property(e => e.RealDriversLicense)
                .HasMaxLength(255)
                .HasColumnName("real_drivers_license")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.ReferralSource)
                .HasMaxLength(256)
                .HasColumnName("referral_source");
            entity.Property(e => e.ReferringMemberId).HasColumnName("referring_member_id");
            entity.Property(e => e.RegisterDate).HasColumnName("register_date");
            entity.Property(e => e.Rep).HasColumnName("rep");
            entity.Property(e => e.RewardPoints)
                .HasPrecision(18, 2)
                .HasColumnName("reward_points");
            entity.Property(e => e.Role)
                .HasDefaultValueSql("'Guest'")
                .HasComment("If user is both staff and member, we set role to Staff, Guest is when he is neither Staff or Member.")
                .HasColumnType("enum('Staff','Guest','Member','Corporate')")
                .HasColumnName("role");
            entity.Property(e => e.Salutation)
                .HasMaxLength(10)
                .HasDefaultValueSql("'Mr'")
                .HasColumnName("salutation");
            entity.Property(e => e.SendMail)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("send_mail");
            entity.Property(e => e.Sex)
                .HasDefaultValueSql("'0'")
                .HasColumnName("sex");
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .HasColumnName("state");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'No membership'")
                .HasColumnType("enum('Active','Inactive','Suspended','Canceled','Removed','Expired','Holded','On Hold','No membership','Online Review','Joined','Non-member','Staff','Corporate Account')")
                .HasColumnName("status");
            entity.Property(e => e.StreetAddress)
                .HasMaxLength(255)
                .HasColumnName("street_address");
            entity.Property(e => e.StreetAddress2)
                .HasMaxLength(255)
                .HasColumnName("street_address2");
            entity.Property(e => e.TaxExempt).HasColumnName("tax_exempt");
            entity.Property(e => e.Trade)
                .HasDefaultValueSql("'2'")
                .HasColumnName("trade");
            entity.Property(e => e.UnsubscribeCode)
                .HasMaxLength(10)
                .HasDefaultValueSql("''")
                .HasColumnName("unsubscribe_code");
            entity.Property(e => e.Viewed).HasColumnName("viewed");
            entity.Property(e => e.Zip)
                .HasMaxLength(16)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<UserAdvancedRating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_advanced_rating")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.DepartmentId, e.UserId }, "department_id_user_id");

            entity.HasIndex(e => new { e.DepartmentId, e.UserId, e.AdvancedRatingId }, "department_id_user_id_advanced_rating_id");

            entity.HasIndex(e => new { e.DepartmentId, e.UserId, e.IsActive }, "department_id_user_id_is_active");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdvancedRatingId).HasColumnName("advanced_rating_id");
            entity.Property(e => e.CompletionDate).HasColumnName("completion_date");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserAdvancedRatingItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_advanced_rating_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.AdvancedRatingItemId, e.UserId }, "advanced_rating_item_id_user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdvancedRatingItemId).HasColumnName("advanced_rating_item_id");
            entity.Property(e => e.CompletedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("completed_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'Incomplete'")
                .HasColumnType("enum('Incomplete','In Progress','Almost There','Complete')")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserAnalyticDatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_analytic_data")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.LastCheckinDate, "last_checkin_date");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LastCheckinDate)
                .HasComputedColumnSql("cast(`last_checkin_datetime` as date)", false)
                .HasColumnName("last_checkin_date");
            entity.Property(e => e.LastCheckinDatetime)
                .HasColumnType("datetime")
                .HasColumnName("last_checkin_datetime");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserApiMenuSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_api_menu_setting")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AppointmentRequests).HasColumnName("appointment_requests");
            entity.Property(e => e.BecomeMember).HasColumnName("become_member");
            entity.Property(e => e.CapacityCounter).HasColumnName("capacity_counter");
            entity.Property(e => e.ChildcareReservation).HasColumnName("childcare_reservation");
            entity.Property(e => e.Favorites)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("favorites");
            entity.Property(e => e.GoogleApplePay).HasColumnName("google_apple_pay");
            entity.Property(e => e.GroupEx)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("group_ex");
            entity.Property(e => e.LocationHours)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("location_hours");
            entity.Property(e => e.Locations)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("locations");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("login");
            entity.Property(e => e.MembershipCard)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("membership_card");
            entity.Property(e => e.Packages).HasColumnName("packages");
            entity.Property(e => e.PayBill).HasColumnName("pay_bill");
            entity.Property(e => e.Programs)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("programs");
            entity.Property(e => e.RegisterNow).HasColumnName("register_now");
            entity.Property(e => e.Reservations)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("reservations");
            entity.Property(e => e.ResourceWaitlist).HasColumnName("resource_waitlist");
            entity.Property(e => e.Sso).HasColumnName("sso");
            entity.Property(e => e.TryUs)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("try_us");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Waitlist).HasColumnName("waitlist");
        });

        modelBuilder.Entity<UserArchive>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_archive");

            entity.HasIndex(e => e.ArchiveDate, "archive_date");

            entity.HasIndex(e => e.ArchivedBy, "archived_by");

            entity.HasIndex(e => e.FirstName, "first_name").HasAnnotation("MySql:IndexPrefixLength", new[] { 50 });

            entity.HasIndex(e => e.LastName, "last_name").HasAnnotation("MySql:IndexPrefixLength", new[] { 50 });

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArchiveDate).HasColumnName("archive_date");
            entity.Property(e => e.ArchivedBy).HasColumnName("archived_by");
            entity.Property(e => e.ByParentId)
                .HasColumnType("mediumtext")
                .HasColumnName("by_parent_id");
            entity.Property(e => e.ByPrimaryId)
                .HasColumnType("mediumtext")
                .HasColumnName("by_primary_id");
            entity.Property(e => e.ContractNum)
                .HasMaxLength(255)
                .HasColumnName("contract_num");
            entity.Property(e => e.Data).HasColumnName("data");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Events)
                .HasColumnType("mediumtext")
                .HasColumnName("events");
            entity.Property(e => e.FirstName).HasColumnName("first_name");
            entity.Property(e => e.Joined).HasColumnName("joined");
            entity.Property(e => e.LastName).HasColumnName("last_name");
            entity.Property(e => e.Login)
                .HasMaxLength(255)
                .HasColumnName("login");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserAuthhash>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_authhash")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AuthCode, "auth_code");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthCode)
                .HasMaxLength(16)
                .HasColumnName("auth_code");
            entity.Property(e => e.Code)
                .HasMaxLength(100)
                .HasDefaultValueSql("''")
                .HasColumnName("code");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Hash)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("hash");
            entity.Property(e => e.RedirectToUrl)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasComment("URL to redirect user to upon successful authorization.")
                .HasColumnName("redirectToUrl");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserAuthhashToGuestHash>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_authhash_to_guest_hash");

            entity.HasIndex(e => new { e.AuthhashId, e.GuestHashId }, "primary_key");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthhashId).HasColumnName("authhash_id");
            entity.Property(e => e.GuestHashId).HasColumnName("guest_hash_id");
        });

        modelBuilder.Entity<UserBalance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_balance")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.DateFrom, "date_from");

            entity.HasIndex(e => e.DateTo, "date_to");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Balance)
                .HasColumnType("float(18,2)")
                .HasColumnName("balance");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.ViewHidden).HasColumnName("view_hidden");
        });

        modelBuilder.Entity<UserBankAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_bank_account")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Title, "title");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BankAccountType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("bank_account_type");
            entity.Property(e => e.BankCity)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("bank_city");
            entity.Property(e => e.BankCountry)
                .HasMaxLength(2)
                .HasDefaultValueSql("'US'")
                .IsFixedLength()
                .HasColumnName("bank_country");
            entity.Property(e => e.BankName)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("bank_name");
            entity.Property(e => e.BankState)
                .HasMaxLength(10)
                .HasDefaultValueSql("''")
                .HasColumnName("bank_state");
            entity.Property(e => e.CheckingAccountNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("checking_account_number");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_date");
            entity.Property(e => e.IsPrimary).HasColumnName("is_primary");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PaymentProcessorUniqueId)
                .HasMaxLength(255)
                .HasColumnName("payment_processor_unique_id");
            entity.Property(e => e.RealCheckingAccountNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("real_checking_account_number");
            entity.Property(e => e.RealRoutingNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("real_routing_number");
            entity.Property(e => e.RoutingNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("routing_number");
            entity.Property(e => e.Title)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserBankAccountRetailer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_bank_account_retailer")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.MerchantRetailerId, "merchant_retailer_id");

            entity.HasIndex(e => e.UserBankAccountId, "user_bank_account_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountToken)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("account_token");
            entity.Property(e => e.MerchantRetailerId).HasColumnName("merchant_retailer_id");
            entity.Property(e => e.UserBankAccountId).HasColumnName("user_bank_account_id");
        });

        modelBuilder.Entity<UserBiography>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_biography")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.UserId, e.ComponentId }, "user_id_department_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BioPicture)
                .HasMaxLength(255)
                .HasColumnName("bio_picture");
            entity.Property(e => e.Biography)
                .HasColumnType("text")
                .HasColumnName("biography");
            entity.Property(e => e.Certification)
                .HasColumnType("text")
                .HasColumnName("certification");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ContactInfo)
                .HasColumnType("text")
                .HasColumnName("contact_info");
            entity.Property(e => e.Experience)
                .HasColumnType("text")
                .HasColumnName("experience");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_contract")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Type, "type");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuditStatus)
                .HasDefaultValueSql("'pending'")
                .HasColumnType("enum('pending','in_review','approved','updated')")
                .HasColumnName("audit_status");
            entity.Property(e => e.BaseAgreementId).HasColumnName("base_agreement_id");
            entity.Property(e => e.CreateDate).HasColumnName("create_date");
            entity.Property(e => e.DocumentId).HasColumnName("document_id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.PaymentType)
                .HasColumnType("enum('credit_card','bank_account','mail_bill','trade')")
                .HasColumnName("payment_type");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("reason");
            entity.Property(e => e.Signed).HasColumnName("signed");
            entity.Property(e => e.Term)
                .HasColumnType("mediumtext")
                .HasColumnName("term");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'original'")
                .HasColumnType("enum('original','amendment','renewal','change','cancel')")
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserContractCharge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_contract_charge")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ChargeId, "fk_charge_id");

            entity.HasIndex(e => e.UserContractId, "user_contract_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChargeId).HasColumnName("charge_id");
            entity.Property(e => e.UserContractId).HasColumnName("user_contract_id");

            entity.HasOne(d => d.Charge).WithMany(p => p.UserContractCharges)
                .HasForeignKey(d => d.ChargeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_charge_id");
        });

        modelBuilder.Entity<UserContractToTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_contract_to_transaction");

            entity.HasIndex(e => e.TransactionId, "transaction_id");

            entity.HasIndex(e => e.UserContractId, "user_contract_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
            entity.Property(e => e.UserContractId).HasColumnName("user_contract_id");
        });

        modelBuilder.Entity<UserContractToUserGroupSubscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_contract_to_user_group_subscription")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.UserContractId, e.UserGroupSubscriptionId }, "contract_to_subscription").IsUnique();

            entity.HasIndex(e => e.UserGroupSubscriptionId, "user_group_subscription_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AgreementEndDate)
                .HasColumnType("datetime")
                .HasColumnName("agreement_end_date");
            entity.Property(e => e.AgreementStartDate)
                .HasColumnType("datetime")
                .HasColumnName("agreement_start_date");
            entity.Property(e => e.AuditStatus)
                .HasDefaultValueSql("'pending'")
                .HasColumnType("enum('pending','in_review','approved','updated')")
                .HasColumnName("audit_status");
            entity.Property(e => e.BaseFee)
                .HasPrecision(18, 2)
                .HasColumnName("base_fee");
            entity.Property(e => e.CancellationDate)
                .HasColumnType("datetime")
                .HasColumnName("cancellation_date");
            entity.Property(e => e.CycleRenewType)
                .HasColumnType("enum('renew_with_custom_price','renew_with_default_price','terminated')")
                .HasColumnName("cycle_renew_type");
            entity.Property(e => e.FirstBillingDate)
                .HasColumnType("datetime")
                .HasColumnName("first_billing_date");
            entity.Property(e => e.TotalAgreementAmount)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("total_agreement_amount");
            entity.Property(e => e.UserContractId).HasColumnName("user_contract_id");
            entity.Property(e => e.UserGroupSubscriptionId).HasColumnName("user_group_subscription_id");
        });

        modelBuilder.Entity<UserContractToUserGroupSubscriptionPricingDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_contract_to_user_group_subscription_pricing_detail")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserContractId, "user_contract_id");

            entity.HasIndex(e => e.UserContractToUserGroupSubscriptionId, "user_contract_to_user_group_subscription_id");

            entity.HasIndex(e => e.UserGroupSubscriptionId, "user_group_subscription_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasColumnType("enum('prorated_dues','additional_dues','enrollment_dues','additional_charges','corporate_prorate','bill_to','tax','total')")
                .HasColumnName("type");
            entity.Property(e => e.UserContractId).HasColumnName("user_contract_id");
            entity.Property(e => e.UserContractToUserGroupSubscriptionId).HasColumnName("user_contract_to_user_group_subscription_id");
            entity.Property(e => e.UserGroupSubscriptionId).HasColumnName("user_group_subscription_id");
        });

        modelBuilder.Entity<UserContractToUserGroupSubscriptionPricingTable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_contract_to_user_group_subscription_pricing_table")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserContractId, "user_contract_id");

            entity.HasIndex(e => e.UserContractToUserGroupSubscriptionId, "user_contract_to_user_group_subscription_id");

            entity.HasIndex(e => e.UserGroupSubscriptionId, "user_group_subscription_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.UserContractId).HasColumnName("user_contract_id");
            entity.Property(e => e.UserContractToUserGroupSubscriptionId).HasColumnName("user_contract_to_user_group_subscription_id");
            entity.Property(e => e.UserGroupSubscriptionId).HasColumnName("user_group_subscription_id");
        });

        modelBuilder.Entity<UserContractToUserPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_contract_to_user_package")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.UserContractId, e.UserPackageId }, "contract_to_package").IsUnique();

            entity.HasIndex(e => e.UserPackageId, "user_package_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuditStatus)
                .HasDefaultValueSql("'pending'")
                .HasColumnType("enum('pending','in_review','approved','updated')")
                .HasColumnName("audit_status");
            entity.Property(e => e.TotalAgreementAmount)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("total_agreement_amount");
            entity.Property(e => e.UserContractId).HasColumnName("user_contract_id");
            entity.Property(e => e.UserPackageId).HasColumnName("user_package_id");
        });

        modelBuilder.Entity<UserCreditCard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_credit_card")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.PaymentProcessorUniqueId, "payment_processor_unique_id");

            entity.HasIndex(e => e.Title, "title");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AvailableOnPos)
                .HasDefaultValueSql("'1'")
                .HasColumnName("available_on_pos");
            entity.Property(e => e.BillAddrType).HasColumnName("bill_addr_type");
            entity.Property(e => e.BillCity)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("bill_city");
            entity.Property(e => e.BillCountryCode)
                .HasMaxLength(3)
                .HasDefaultValueSql("'US'")
                .HasColumnName("bill_country_code");
            entity.Property(e => e.BillPhone)
                .HasMaxLength(100)
                .HasDefaultValueSql("''")
                .HasColumnName("bill_phone");
            entity.Property(e => e.BillState)
                .HasMaxLength(100)
                .HasDefaultValueSql("''")
                .HasColumnName("bill_state");
            entity.Property(e => e.BillStreetAddress)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("bill_street_address");
            entity.Property(e => e.BillStreetAddress2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("bill_street_address2");
            entity.Property(e => e.BillZip)
                .HasMaxLength(10)
                .HasDefaultValueSql("''")
                .HasColumnName("bill_zip");
            entity.Property(e => e.CcDate).HasColumnName("cc_date");
            entity.Property(e => e.CcName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("cc_name");
            entity.Property(e => e.CcNumber)
                .HasMaxLength(255)
                .HasColumnName("cc_number");
            entity.Property(e => e.CcType).HasColumnName("cc_type");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_date");
            entity.Property(e => e.Fcc)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("fcc");
            entity.Property(e => e.IsPrimary).HasColumnName("is_primary");
            entity.Property(e => e.IsSyncedToUpdater)
                .HasDefaultValueSql("'0'")
                .HasColumnType("enum('0','1')")
                .HasColumnName("is_synced_to_updater");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.PaymentProcessorCofId)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("payment_processor_cof_id");
            entity.Property(e => e.PaymentProcessorUniqueId)
                .HasDefaultValueSql("''")
                .HasColumnName("payment_processor_unique_id");
            entity.Property(e => e.Shift4TokenSerialNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("shift4_token_serial_number");
            entity.Property(e => e.Title)
                .HasDefaultValueSql("''")
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserCustomField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_custom_fields");

            entity.HasIndex(e => e.ModifiedBy, "FK_modified_by");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InUse)
                .HasDefaultValueSql("'1'")
                .HasColumnName("in_use");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.Params)
                .HasColumnType("mediumtext")
                .HasColumnName("params");
            entity.Property(e => e.Type)
                .HasColumnType("enum('numeric','currency','text','list','date')")
                .HasColumnName("type");
            entity.Property(e => e.UsedFor)
                .HasDefaultValueSql("'profile'")
                .HasColumnType("enum('both','registration','profile')")
                .HasColumnName("used_for");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<UserCustomFieldsValue>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.FieldId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("user_custom_fields_values");

            entity.HasIndex(e => e.FieldId, "FK_field");

            entity.HasIndex(e => new { e.UserId, e.FieldId, e.ValueText }, "idx_user_custom_fields_values_user_id_field_id");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.FieldId).HasColumnName("field_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.ValueDate).HasColumnName("value_date");
            entity.Property(e => e.ValueNumber).HasColumnName("value_number");
            entity.Property(e => e.ValueText).HasColumnName("value_text");
        });

        modelBuilder.Entity<UserCustomRegistrationFieldsValue>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.UserCustomFieldsId, e.EventId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("user_custom_registration_fields_value");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserCustomFieldsId).HasColumnName("user_custom_fields_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ValueDate).HasColumnName("value_date");
            entity.Property(e => e.ValueNumber).HasColumnName("value_number");
            entity.Property(e => e.ValueText)
                .HasMaxLength(255)
                .HasColumnName("value_text");
        });

        modelBuilder.Entity<UserDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_documents")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.NoteId, "note_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DocumentType).HasColumnName("document_type");
            entity.Property(e => e.File)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("file");
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("file_name");
            entity.Property(e => e.FileSize).HasColumnName("file_size");
            entity.Property(e => e.FileType).HasColumnName("file_type");
            entity.Property(e => e.IpAddress)
                .HasMaxLength(45)
                .HasColumnName("ip_address");
            entity.Property(e => e.IsUploaded)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_uploaded");
            entity.Property(e => e.LiabilityWaiver).HasColumnName("liability_waiver");
            entity.Property(e => e.MimeType)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("mime_type");
            entity.Property(e => e.NoteId).HasColumnName("note_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_event");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CalcPricePerHour)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(9,2)")
                .HasColumnName("calc_price_per_hour");
            entity.Property(e => e.CustomNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("custom_number");
            entity.Property(e => e.CustomPercent)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(5,2)")
                .HasColumnName("custom_percent");
            entity.Property(e => e.CustomPrice)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(18,2)")
                .HasColumnName("custom_price");
            entity.Property(e => e.CustomPriceType)
                .HasDefaultValueSql("'per_hour'")
                .HasColumnType("enum('per_hour','full','season','per_time')")
                .HasColumnName("custom_price_type");
            entity.Property(e => e.CustomTimes)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(9,2)")
                .HasColumnName("custom_times");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTotalCharge)
                .HasColumnType("float(18,2)")
                .HasColumnName("event_total_charge");
            entity.Property(e => e.EventTotalPaid)
                .HasColumnType("float(18,2)")
                .HasColumnName("event_total_paid");
            entity.Property(e => e.IsCustom).HasColumnName("is_custom");
            entity.Property(e => e.IsMakeup).HasColumnName("is_makeup");
            entity.Property(e => e.IsPerTime).HasColumnName("is_per_time");
            entity.Property(e => e.IsRemoved).HasColumnName("is_removed");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Params)
                .HasColumnType("text")
                .HasColumnName("params");
            entity.Property(e => e.PreviousEventId).HasColumnName("previous_event_id");
            entity.Property(e => e.Prorate).HasColumnName("prorate");
            entity.Property(e => e.ProrateDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("prorate_date");
            entity.Property(e => e.RegDate).HasColumnName("reg_date");
            entity.Property(e => e.UnregDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("unreg_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.WaiverSign)
                .HasMaxLength(128)
                .HasDefaultValueSql("''")
                .HasColumnName("waiver_sign");
        });

        modelBuilder.Entity<UserEventAddon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_event_addons");

            entity.HasIndex(e => e.Id, "id");

            entity.HasIndex(e => new { e.UserId, e.EventId }, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonId).HasColumnName("addon_id");
            entity.Property(e => e.Date)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.IsMakeup).HasColumnName("is_makeup");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserEventDiscount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_event_discount");

            entity.HasIndex(e => e.AuthId, "auth_id");

            entity.HasIndex(e => e.EventFor, "event_for");

            entity.HasIndex(e => e.EventIn, "event_in");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AuthId).HasColumnName("auth_id");
            entity.Property(e => e.EventFor).HasColumnName("event_for");
            entity.Property(e => e.EventIn).HasColumnName("event_in");
            entity.Property(e => e.RegType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("reg_type");
            entity.Property(e => e.UserFor).HasColumnName("user_for");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserEventWaitingList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_event_waiting_list")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserFavoriteClass>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_favorite_class")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.UserId, e.ClassId }, "user_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClassId)
                .HasComment("event id with type Group Activity")
                .HasColumnName("class_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserFavoriteLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_favorite_location")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.UserId, e.LocationId }, "user_location").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LocationId)
                .HasComment("accgroup_entity_id")
                .HasColumnName("location_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AddonEndDate, "addon_end_date");

            entity.HasIndex(e => e.AddonResourceId, "addon_resource_id");

            entity.HasIndex(e => e.BillTo, "bill_to");

            entity.HasIndex(e => e.BillingTypeGroupId, "billing_type_group_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.HoldType, "hold_type");

            entity.HasIndex(e => new { e.NextBillDate, e.UserId, e.GroupId }, "idx_user_group_next_bill_date_user_id");

            entity.HasIndex(e => e.JoinDate, "join_date");

            entity.HasIndex(e => e.StartBillingDate, "start_billing_date");

            entity.HasIndex(e => e.StopBillingDate, "stop_billing_date");

            entity.HasIndex(e => e.UgStatus, "ug_status");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActivateOn).HasColumnName("activate_on");
            entity.Property(e => e.ActivatedDate).HasColumnName("activated_date");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.AddonEndDate).HasColumnName("addon_end_date");
            entity.Property(e => e.AddonResourceId).HasColumnName("addon_resource_id");
            entity.Property(e => e.BillTo).HasColumnName("bill_to");
            entity.Property(e => e.BillToPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("bill_to_percent");
            entity.Property(e => e.BillToType)
                .HasMaxLength(5)
                .HasDefaultValueSql("'%'")
                .HasColumnName("bill_to_type");
            entity.Property(e => e.BillingTypeGroupId).HasColumnName("billing_type_group_id");
            entity.Property(e => e.CancelOn).HasColumnName("cancel_on");
            entity.Property(e => e.CanceledDate).HasColumnName("canceled_date");
            entity.Property(e => e.CanceledReason)
                .HasMaxLength(255)
                .HasColumnName("canceled_reason");
            entity.Property(e => e.CreditAmount)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(18,2)")
                .HasColumnName("credit_amount");
            entity.Property(e => e.DiscountAsStatement).HasColumnName("discount_as_statement");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.ExpiredDate).HasColumnName("expired_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HoldFrom).HasColumnName("hold_from");
            entity.Property(e => e.HoldReason)
                .HasMaxLength(255)
                .HasColumnName("hold_reason");
            entity.Property(e => e.HoldTo).HasColumnName("hold_to");
            entity.Property(e => e.HoldType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("hold_type");
            entity.Property(e => e.HoldValue)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(9,2)")
                .HasColumnName("hold_value");
            entity.Property(e => e.HoldedDate).HasColumnName("holded_date");
            entity.Property(e => e.HowAdded).HasColumnName("how_added");
            entity.Property(e => e.InactivateOn).HasColumnName("inactivate_on");
            entity.Property(e => e.IsHolded).HasColumnName("is_holded");
            entity.Property(e => e.IsMembershipAddon).HasColumnName("is_membership_addon");
            entity.Property(e => e.IsSecondary).HasColumnName("is_secondary");
            entity.Property(e => e.JoinDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("join_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MapRevenueTo).HasColumnName("map_revenue_to");
            entity.Property(e => e.MembershipDiscount)
                .HasColumnType("float(9,2)")
                .HasColumnName("membership_discount");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.MonthlyActivateOn)
                .HasDefaultValueSql("'1'")
                .HasColumnName("monthly_activate_on");
            entity.Property(e => e.MonthlyBillingType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("monthly_billing_type");
            entity.Property(e => e.MonthlyProrateFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("monthly_prorate_from");
            entity.Property(e => e.MonthlyStartBillingFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("monthly_start_billing_from");
            entity.Property(e => e.NextBillDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("next_bill_date");
            entity.Property(e => e.OverrideEnrollmentFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("override_enrollment_fee");
            entity.Property(e => e.OverrideFee)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnType("float(18,2)")
                .HasColumnName("override_fee");
            entity.Property(e => e.ReferedBy).HasColumnName("refered_by");
            entity.Property(e => e.ReferedByType)
                .HasMaxLength(5)
                .HasDefaultValueSql("'%'")
                .HasColumnName("refered_by_type");
            entity.Property(e => e.ReferedByValue)
                .HasColumnType("float(9,2)")
                .HasColumnName("refered_by_value");
            entity.Property(e => e.SoldAt).HasColumnName("sold_at");
            entity.Property(e => e.StartBillingDate).HasColumnName("start_billing_date");
            entity.Property(e => e.StopBillingDate).HasColumnName("stop_billing_date");
            entity.Property(e => e.TotalEnrollmentFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("total_enrollment_fee");
            entity.Property(e => e.TotalMembershipFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("total_membership_fee");
            entity.Property(e => e.UgStatus)
                .HasDefaultValueSql("'Active'")
                .HasColumnType("enum('Active','Inactive','Suspended','Canceled','Expired','Holded','On Hold','Online Review')")
                .HasColumnName("ug_status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserGroupContractFee>(entity =>
        {
            entity.HasKey(e => new { e.ContractId, e.ChildId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("user_group_contract_fees");

            entity.Property(e => e.ContractId).HasColumnName("contract_id");
            entity.Property(e => e.ChildId).HasColumnName("child_id");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.MembershipFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("membership_fee");
        });

        modelBuilder.Entity<UserGroupFee>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.GroupId, e.ChildId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity.ToTable("user_group_fees");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.ChildId).HasColumnName("child_id");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.MembershipFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("membership_fee");
            entity.Property(e => e.Order).HasColumnName("order");
        });

        modelBuilder.Entity<UserGroupHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_group_history");

            entity.HasIndex(e => e.DateFrom, "date_from");

            entity.HasIndex(e => e.DateTime, "date_time");

            entity.HasIndex(e => e.DateTo, "date_to");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.Hide, "hide");

            entity.HasIndex(e => e.Holdedminus, "holdedminus");

            entity.HasIndex(e => e.Holdedplus, "holdedplus");

            entity.HasIndex(e => e.IsLastInDay, "is_last_in_day");

            entity.HasIndex(e => e.IsNew, "is_new");

            entity.HasIndex(e => e.MarkIsNew, "mark_is_new");

            entity.HasIndex(e => e.ModifiedBy, "modified_by");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => e.Reactivate, "reactivate");

            entity.HasIndex(e => e.Renewed, "renewed");

            entity.HasIndex(e => e.UgStatus, "ug_status");

            entity.HasIndex(e => e.UgStatusOld, "ug_status_old");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddonResourceId).HasColumnName("addon_resource_id");
            entity.Property(e => e.BillingTypeGroupId).HasColumnName("billing_type_group_id");
            entity.Property(e => e.CancelOn)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("cancel_on");
            entity.Property(e => e.CanceledDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("canceled_date");
            entity.Property(e => e.CanceledReason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("canceled_reason");
            entity.Property(e => e.DateFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("date_time");
            entity.Property(e => e.DateTo)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("date_to");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.ExpiredDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("expired_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GroupIdNew).HasColumnName("group_id_new");
            entity.Property(e => e.GroupIdOld).HasColumnName("group_id_old");
            entity.Property(e => e.Hide).HasColumnName("hide");
            entity.Property(e => e.HoldFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("hold_from");
            entity.Property(e => e.HoldReason)
                .HasMaxLength(255)
                .HasColumnName("hold_reason");
            entity.Property(e => e.HoldTo)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("hold_to");
            entity.Property(e => e.HoldType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("hold_type");
            entity.Property(e => e.HoldValue)
                .HasPrecision(9, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("hold_value");
            entity.Property(e => e.HoldedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("holded_date");
            entity.Property(e => e.Holdedminus).HasColumnName("holdedminus");
            entity.Property(e => e.Holdedplus).HasColumnName("holdedplus");
            entity.Property(e => e.IsHolded).HasColumnName("is_holded");
            entity.Property(e => e.IsLastInDay)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_last_in_day");
            entity.Property(e => e.IsMembershipAddon).HasColumnName("is_membership_addon");
            entity.Property(e => e.IsNew).HasColumnName("is_new");
            entity.Property(e => e.JoinDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("join_date");
            entity.Property(e => e.Linked)
                .HasColumnType("text")
                .HasColumnName("linked");
            entity.Property(e => e.MarkIsNew).HasColumnName("mark_is_new");
            entity.Property(e => e.MembershipGoals)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("membership_goals");
            entity.Property(e => e.MembershipSales)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("membership_sales");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.NextBillDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("next_bill_date");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Reactivate).HasColumnName("reactivate");
            entity.Property(e => e.ReferedBy).HasColumnName("refered_by");
            entity.Property(e => e.ReferedByType)
                .HasMaxLength(5)
                .HasDefaultValueSql("'%'")
                .HasColumnName("refered_by_type");
            entity.Property(e => e.ReferedByValue)
                .HasPrecision(9, 2)
                .HasColumnName("refered_by_value");
            entity.Property(e => e.ReferralSource)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("referral_source");
            entity.Property(e => e.ReferringMemberId).HasColumnName("referring_member_id");
            entity.Property(e => e.Renewed).HasColumnName("renewed");
            entity.Property(e => e.StartBillingDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("start_billing_date");
            entity.Property(e => e.StopBillingDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("stop_billing_date");
            entity.Property(e => e.TotalEnrollmentFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("total_enrollment_fee");
            entity.Property(e => e.TotalMembershipFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("total_membership_fee");
            entity.Property(e => e.UgStatus)
                .HasDefaultValueSql("'Active'")
                .HasColumnType("enum('Active','Inactive','Suspended','Canceled','Expired','Holded','On Hold','Online Review','Removed')")
                .HasColumnName("ug_status");
            entity.Property(e => e.UgStatusOld)
                .HasDefaultValueSql("'Active'")
                .HasColumnType("enum('Active','Inactive','Suspended','Canceled','Expired','Holded','On Hold','Online Review','Removed')")
                .HasColumnName("ug_status_old");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<UserGroupSale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_group_sales");

            entity.HasIndex(e => new { e.UserId, e.GroupId, e.Order, e.Removed, e.SalesId }, "idx_user_group_sales_user_id_group_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedDate).HasColumnName("added_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.Removed).HasColumnName("removed");
            entity.Property(e => e.RemovedDate).HasColumnName("removed_date");
            entity.Property(e => e.SalesId).HasColumnName("sales_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<UserGroupSubscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.IsActive, "is_active");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => e.UserGroupSubscriptionBillingOptionId, "user_group_subscription_billing_option_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.FamilyRole)
                .HasDefaultValueSql("'primary'")
                .HasColumnType("enum('primary','secondary','dependent')")
                .HasColumnName("family_role");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HowAdded)
                .HasDefaultValueSql("'profile'")
                .HasColumnType("enum('online','pos','profile','prospect')")
                .HasColumnName("how_added");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UserGroupSubscriptionBillingOptionId).HasColumnName("user_group_subscription_billing_option_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_action")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ActionType, "action_type");

            entity.HasIndex(e => e.Completed, "completed");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.UserGroupSubscriptionId, "user_group_subscription_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActionType)
                .HasDefaultValueSql("'activate'")
                .HasColumnType("enum('activate','inactivate','hold','cancel','payment_required')")
                .HasColumnName("action_type");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Completed).HasColumnName("completed");
            entity.Property(e => e.CompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("completed_date");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HoldType)
                .HasColumnType("enum('credit','no_charge','charge')")
                .HasColumnName("hold_type");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("reason");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UserGroupSubscriptionId).HasColumnName("user_group_subscription_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionAdditionalCharge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_additional_charge")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.UserGroupSubscriptionBillingOptionId, "user_group_subscription_billing_option_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("statement_description");
            entity.Property(e => e.UserGroupSubscriptionBillingOptionId).HasColumnName("user_group_subscription_billing_option_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionBillingOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_billing_option")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ChangeToId, "change_to_id");

            entity.HasIndex(e => e.GroupEntityBillingId, "group_entity_billing_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.RenewalId, "renewal_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BillTo).HasColumnName("bill_to");
            entity.Property(e => e.BillToAmount)
                .HasPrecision(18, 2)
                .HasColumnName("bill_to_amount");
            entity.Property(e => e.BillToType)
                .HasDefaultValueSql("'%'")
                .HasColumnType("enum('%','$')")
                .HasColumnName("bill_to_type");
            entity.Property(e => e.BillingDay)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("billing_day");
            entity.Property(e => e.ChangeToId).HasColumnName("change_to_id");
            entity.Property(e => e.ContractTermsId).HasColumnName("contract_terms_id");
            entity.Property(e => e.CycleCount).HasColumnName("cycle_count");
            entity.Property(e => e.CycleCountRenew).HasColumnName("cycle_count_renew");
            entity.Property(e => e.CycleRenewType)
                .HasDefaultValueSql("'renew_with_default_price'")
                .HasColumnType("enum('renew_with_custom_price','renew_with_default_price','terminated')")
                .HasColumnName("cycle_renew_type");
            entity.Property(e => e.CycleStartBillingDate).HasColumnName("cycle_start_billing_date");
            entity.Property(e => e.DiscountAsStatement).HasColumnName("discount_as_statement");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.GroupEntityBillingId).HasColumnName("group_entity_billing_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HasAgreement).HasColumnName("has_agreement");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MapRevenueEntityId).HasColumnName("map_revenue_entity_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ProrateFirstMonth)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("prorate_first_month");
            entity.Property(e => e.ReferredBy).HasColumnName("referred_by");
            entity.Property(e => e.ReferredByAmount)
                .HasPrecision(18, 2)
                .HasColumnName("referred_by_amount");
            entity.Property(e => e.ReferredByType)
                .HasDefaultValueSql("'%'")
                .HasColumnType("enum('%','$')")
                .HasColumnName("referred_by_type");
            entity.Property(e => e.RenewBefore)
                .HasComment("Days before new billing cycle will start")
                .HasColumnName("renew_before");
            entity.Property(e => e.RenewalId).HasColumnName("renewal_id");
            entity.Property(e => e.StartBillingDate).HasColumnName("start_billing_date");
        });

        modelBuilder.Entity<UserGroupSubscriptionCalculatedFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_calculated_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.BillDate, "bill_date");

            entity.HasIndex(e => e.BillToHolderId, "bill_to_owner_id");

            entity.HasIndex(e => e.BillToUserId, "bill_to_user_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => new { e.Status, e.BillDate }, "status_bill_date");

            entity.HasIndex(e => e.UserContractId, "user_contract_id");

            entity.HasIndex(e => e.UserGroupSubscriptionBillingOptionId, "user_group_subscription_billing_option_id");

            entity.HasIndex(e => e.UserGroupSubscriptionId, "user_group_subscription_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.BillAmount)
                .HasPrecision(18, 2)
                .HasColumnName("bill_amount");
            entity.Property(e => e.BillDate).HasColumnName("bill_date");
            entity.Property(e => e.BillToHolderId).HasColumnName("bill_to_holder_id");
            entity.Property(e => e.BillToUserId).HasColumnName("bill_to_user_id");
            entity.Property(e => e.CorporateDiscountedAmount)
                .HasPrecision(18, 2)
                .HasColumnName("corporate_discounted_amount");
            entity.Property(e => e.Cycle)
                .HasDefaultValueSql("'1'")
                .HasColumnName("cycle");
            entity.Property(e => e.CycleDefaultAmount)
                .HasPrecision(18, 2)
                .HasColumnName("cycle_default_amount");
            entity.Property(e => e.CycleDiscountedAmount)
                .HasPrecision(18, 2)
                .HasColumnName("cycle_discounted_amount");
            entity.Property(e => e.DefaultAmount)
                .HasPrecision(18, 2)
                .HasColumnName("default_amount");
            entity.Property(e => e.DiscountedAmount)
                .HasPrecision(18, 2)
                .HasColumnName("discounted_amount");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.FamilyType)
                .HasColumnType("enum('individual','individual_dependents','couple','family')")
                .HasColumnName("family_type");
            entity.Property(e => e.FeeType)
                .HasDefaultValueSql("'base_fee'")
                .HasColumnType("enum('base_fee','cycle_prorate_fee','hold_fee','hold_credit','discount_credit','maintenance_fee','enrollment_fee','additional_fee','corporate_fee','user_prorate_fee','referral_credit')")
                .HasColumnName("fee_type");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HoldAmount)
                .HasPrecision(18, 2)
                .HasColumnName("hold_amount");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LocationOfSaleEntityId).HasColumnName("location_of_sale_entity_id");
            entity.Property(e => e.MapRevenueEntityId).HasColumnName("map_revenue_entity_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ParentId)
                .HasComment("Uses for credit fees")
                .HasColumnName("parent_id");
            entity.Property(e => e.ProrateAmount)
                .HasPrecision(18, 2)
                .HasColumnName("prorate_amount");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("statement_description");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'pending'")
                .HasColumnType("enum('pending','processed','cancelled','deleted')")
                .HasColumnName("status");
            entity.Property(e => e.UserContractId).HasColumnName("user_contract_id");
            entity.Property(e => e.UserGroupSubscriptionBillingOptionId).HasColumnName("user_group_subscription_billing_option_id");
            entity.Property(e => e.UserGroupSubscriptionId).HasColumnName("user_group_subscription_id");
            entity.Property(e => e.UserGroupSubscriptionMaintenanceFeeId)
                .HasComment("Uses for maintenance fees")
                .HasColumnName("user_group_subscription_maintenance_fee_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionCalculatedFeeDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_calculated_fee_detail")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserGroupSubscriptionCalculatedFeeId, "user_group_subscription_calculated_fee_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BillAmount)
                .HasPrecision(18, 2)
                .HasColumnName("bill_amount");
            entity.Property(e => e.CorporateDiscountedAmount)
                .HasPrecision(18, 2)
                .HasColumnName("corporate_discounted_amount");
            entity.Property(e => e.CycleDefaultAmount)
                .HasPrecision(18, 2)
                .HasColumnName("cycle_default_amount");
            entity.Property(e => e.CycleDiscountedAmount)
                .HasPrecision(18, 2)
                .HasColumnName("cycle_discounted_amount");
            entity.Property(e => e.DefaultAmount)
                .HasPrecision(18, 2)
                .HasColumnName("default_amount");
            entity.Property(e => e.DiscountedAmount)
                .HasPrecision(18, 2)
                .HasColumnName("discounted_amount");
            entity.Property(e => e.HoldAmount)
                .HasPrecision(18, 2)
                .HasColumnName("hold_amount");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.ProrateAmount)
                .HasPrecision(18, 2)
                .HasColumnName("prorate_amount");
            entity.Property(e => e.UserGroupSubscriptionCalculatedFeeId).HasColumnName("user_group_subscription_calculated_fee_id");
            entity.Property(e => e.UserGroupSubscriptionId).HasColumnName("user_group_subscription_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionCyclePrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_cycle_price")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.Cycle, "cycle");

            entity.HasIndex(e => e.GroupEntityCyclePriceId, "group_entity_cycle_price_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.UserGroupSubscriptionBillingOptionId, "user_group_subscription_billing_option_id");

            entity.HasIndex(e => new { e.UserGroupSubscriptionPriceId, e.Cycle }, "user_group_subscription_price_cycle").IsUnique();

            entity.HasIndex(e => e.UserGroupSubscriptionPriceDetailId, "user_group_subscription_price_detail_id");

            entity.HasIndex(e => e.UserGroupSubscriptionPriceId, "user_group_subscription_price_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BaseFee)
                .HasPrecision(18, 2)
                .HasColumnName("base_fee");
            entity.Property(e => e.BillMonth)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("bill_month");
            entity.Property(e => e.Cycle)
                .HasDefaultValueSql("'1'")
                .HasColumnName("cycle");
            entity.Property(e => e.DueNow).HasColumnName("due_now");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.GroupEntityCyclePriceId).HasColumnName("group_entity_cycle_price_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.KeepActive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("keep_active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UserGroupSubscriptionBillingOptionId).HasColumnName("user_group_subscription_billing_option_id");
            entity.Property(e => e.UserGroupSubscriptionPriceDetailId).HasColumnName("user_group_subscription_price_detail_id");
            entity.Property(e => e.UserGroupSubscriptionPriceId).HasColumnName("user_group_subscription_price_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_history")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.DateFrom, e.DateTo }, "date_from_to");

            entity.HasIndex(e => e.FamilyRole, "family_role");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.MapRevenueEntityId, "map_revenue_entity_id");

            entity.HasIndex(e => e.SaleEntityId, "sale_entity_id");

            entity.HasIndex(e => e.SubscriptionBillingOptionChangeFrom, "subscription_billing_option_change_from");

            entity.HasIndex(e => e.SubscriptionBillingOptionChangeTo, "subscription_billing_option_change_to");

            entity.HasIndex(e => e.SubscriptionBillingOptionId, "subscription_billing_option_id");

            entity.HasIndex(e => e.SubscriptionId, "subscription_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BaseFee)
                .HasPrecision(18, 2)
                .HasColumnName("base_fee");
            entity.Property(e => e.BillTo).HasColumnName("bill_to");
            entity.Property(e => e.BillToAmount)
                .HasPrecision(18, 2)
                .HasColumnName("bill_to_amount");
            entity.Property(e => e.BillToType)
                .HasColumnType("enum('%','$')")
                .HasColumnName("bill_to_type");
            entity.Property(e => e.CancellationDate).HasColumnName("cancellation_date");
            entity.Property(e => e.CancellationReason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("cancellation_reason");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DependentUserIds)
                .HasColumnType("json")
                .HasColumnName("dependent_user_ids");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.FamilyRole)
                .HasDefaultValueSql("'primary'")
                .HasColumnType("enum('primary','secondary','dependent')")
                .HasColumnName("family_role");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HoldEndDate).HasColumnName("hold_end_date");
            entity.Property(e => e.HoldReason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("hold_reason");
            entity.Property(e => e.HoldStartDate).HasColumnName("hold_start_date");
            entity.Property(e => e.LastInDay)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("last_in_day");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MapRevenueEntityId).HasColumnName("map_revenue_entity_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Order)
                .HasDefaultValueSql("'1'")
                .HasColumnName("order");
            entity.Property(e => e.PrimaryUserId).HasColumnName("primary_user_id");
            entity.Property(e => e.ReferredBy).HasColumnName("referred_by");
            entity.Property(e => e.ReferredByAmount)
                .HasPrecision(18, 2)
                .HasColumnName("referred_by_amount");
            entity.Property(e => e.ReferredByType)
                .HasColumnType("enum('%','$')")
                .HasColumnName("referred_by_type");
            entity.Property(e => e.SaleEntityId).HasColumnName("sale_entity_id");
            entity.Property(e => e.SalesAssociateIds)
                .HasColumnType("json")
                .HasColumnName("sales_associate_ids");
            entity.Property(e => e.SecondaryUserId).HasColumnName("secondary_user_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusFrom)
                .HasColumnType("enum('active','inactive','pending','canceled','expired','on_hold','online_review','removed','rejected','payment_required','fulfilled')")
                .HasColumnName("status_from");
            entity.Property(e => e.StatusTo)
                .HasDefaultValueSql("'active'")
                .HasColumnType("enum('active','inactive','pending','canceled','expired','on_hold','online_review','removed','rejected','payment_required','fulfilled')")
                .HasColumnName("status_to");
            entity.Property(e => e.SubscriptionBillingOptionChangeFrom).HasColumnName("subscription_billing_option_change_from");
            entity.Property(e => e.SubscriptionBillingOptionChangeTo).HasColumnName("subscription_billing_option_change_to");
            entity.Property(e => e.SubscriptionBillingOptionId).HasColumnName("subscription_billing_option_id");
            entity.Property(e => e.SubscriptionId).HasColumnName("subscription_id");
            entity.Property(e => e.SubscriptionStatusId).HasColumnName("subscription_status_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<UserGroupSubscriptionMaintenanceFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_maintenance_fee")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupEntityMaintenanceFeeId, "group_entity_maintenance_fee_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.IsActive, "is_active");

            entity.HasIndex(e => e.UserGroupSubscriptionBillingOptionId, "user_group_subscription_billing_option_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountingGroupId).HasColumnName("accounting_group_id");
            entity.Property(e => e.BillDay).HasColumnName("bill_day");
            entity.Property(e => e.BillMonth).HasColumnName("bill_month");
            entity.Property(e => e.CycleDuration).HasColumnName("cycle_duration");
            entity.Property(e => e.CycleType)
                .HasColumnType("enum('day','week','month','default')")
                .HasColumnName("cycle_type");
            entity.Property(e => e.DelayInterval).HasColumnName("delay_interval");
            entity.Property(e => e.DelayIntervalType)
                .HasColumnType("enum('day','week','month','default')")
                .HasColumnName("delay_interval_type");
            entity.Property(e => e.Fee)
                .HasPrecision(18, 2)
                .HasColumnName("fee");
            entity.Property(e => e.GroupEntityMaintenanceFeeId).HasColumnName("group_entity_maintenance_fee_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasColumnName("statement_description");
            entity.Property(e => e.Type)
                .HasColumnType("enum('recurring','fixed','default')")
                .HasColumnName("type");
            entity.Property(e => e.UserGroupSubscriptionBillingOptionId).HasColumnName("user_group_subscription_billing_option_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionPrice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_price")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.FamilyRole, "family_role");

            entity.HasIndex(e => e.GroupEntityPriceId, "group_entity_price_id");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.Order, "order");

            entity.HasIndex(e => new { e.UserGroupSubscriptionBillingOptionId, e.FamilyRole, e.Order }, "user_group_subscription_billing_option_family_role_order").IsUnique();

            entity.HasIndex(e => e.UserGroupSubscriptionBillingOptionId, "user_group_subscription_billing_option_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BaseFee)
                .HasPrecision(18, 2)
                .HasColumnName("base_fee");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(18, 2)
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.FamilyRole)
                .HasDefaultValueSql("'primary'")
                .HasColumnType("enum('primary','dependent')")
                .HasColumnName("family_role");
            entity.Property(e => e.GroupEntityPriceId).HasColumnName("group_entity_price_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Order)
                .HasDefaultValueSql("'1'")
                .HasColumnName("order");
            entity.Property(e => e.UserGroupSubscriptionBillingOptionId).HasColumnName("user_group_subscription_billing_option_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionPriceDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_price_detail")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.IsActive, "is_active");

            entity.HasIndex(e => e.UserGroupSubscriptionBillingOptionId, "user_group_subscription_billing_option_id");

            entity.HasIndex(e => e.UserGroupSubscriptionPriceId, "user_group_subscription_price_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BaseFee)
                .HasPrecision(18, 2)
                .HasColumnName("base_fee");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(18, 2)
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("is_active");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.UserGroupSubscriptionBillingOptionId).HasColumnName("user_group_subscription_billing_option_id");
            entity.Property(e => e.UserGroupSubscriptionPriceId).HasColumnName("user_group_subscription_price_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionSale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_sales")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.UserGroupSubscriptionBillingOptionId, "user_group_subscription_billing_option_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.SalesId).HasColumnName("sales_id");
            entity.Property(e => e.UserGroupSubscriptionBillingOptionId).HasColumnName("user_group_subscription_billing_option_id");
        });

        modelBuilder.Entity<UserGroupSubscriptionStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_group_subscription_status")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EffectiveDate, "effective_date");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => new { e.UserGroupSubscriptionId, e.EffectiveDate }, "user_group_subscription_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CancelReason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("cancel_reason");
            entity.Property(e => e.EffectiveDate).HasColumnName("effective_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HoldReason)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("hold_reason");
            entity.Property(e => e.LastInDay)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("last_in_day");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'active'")
                .HasColumnType("enum('active','inactive','pending','canceled','expired','on_hold','online_review','removed','rejected','payment_required','fulfilled')")
                .HasColumnName("status");
            entity.Property(e => e.UserGroupSubscriptionActionId).HasColumnName("user_group_subscription_action_id");
            entity.Property(e => e.UserGroupSubscriptionId).HasColumnName("user_group_subscription_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserImportBulk>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_import_bulk")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ImportId).HasColumnName("import_id");
            entity.Property(e => e.ImportType)
                .HasDefaultValueSql("'user'")
                .HasColumnType("enum('user','user_group_pif','user_group_recurring','staff')")
                .HasColumnName("import_type");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
        });

        modelBuilder.Entity<UserImportBulkItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_import_bulk_item")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.BulkId, "fk_user_import_bulk");

            entity.HasIndex(e => new { e.RowId, e.BulkId, e.UserId, e.ImportId }, "row_id_bulk_id_user_id_import_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BulkId).HasColumnName("bulk_id");
            entity.Property(e => e.Errors)
                .HasColumnType("text")
                .HasColumnName("errors");
            entity.Property(e => e.ImportId)
                .HasMaxLength(100)
                .HasColumnName("import_id");
            entity.Property(e => e.InputData)
                .HasColumnType("text")
                .HasColumnName("input_data");
            entity.Property(e => e.RowId).HasColumnName("row_id");
            entity.Property(e => e.Status)
                .HasMaxLength(32)
                .HasColumnName("status");
            entity.Property(e => e.SubscriptionId).HasColumnName("subscription_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserStatus)
                .HasColumnType("enum('created','updated')")
                .HasColumnName("user_status");

            entity.HasOne(d => d.Bulk).WithMany(p => p.UserImportBulkItems)
                .HasForeignKey(d => d.BulkId)
                .HasConstraintName("fk_user_import_bulk");
        });

        modelBuilder.Entity<UserLeagueSubstitution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_league_substitution");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Comment)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("comment");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.PlayerNumber)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("player_number");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserLoginAttempt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_login_attempt");

            entity.HasIndex(e => e.UserId, "user_login_attempt_user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Ip)
                .HasMaxLength(20)
                .HasColumnName("ip");
            entity.Property(e => e.LockCounted)
                .HasDefaultValueSql("'0'")
                .HasColumnName("lock_counted");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserLoginLock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_login_lock");

            entity.HasIndex(e => e.UserId, "user_login_lock_user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .HasColumnName("ip");
            entity.Property(e => e.LockedUntil)
                .HasColumnType("datetime")
                .HasColumnName("locked_until");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserMailgroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_mailgroup");

            entity.HasIndex(e => e.Email, "email").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserMetricValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_metric_value")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.HasIndex(e => new { e.UserId, e.MetricId }, "user_id_metric_id");

            entity.HasIndex(e => new { e.UserId, e.MetricId, e.CreateDate }, "user_id_metric_id_create_date");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("create_date");
            entity.Property(e => e.MetricId).HasColumnName("metric_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Value)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("value");
        });

        modelBuilder.Entity<UserNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_notifications")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.HasIndex(e => new { e.UserId, e.Notification }, "user_id_2");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Notification).HasColumnName("notification");
            entity.Property(e => e.Sender).HasColumnName("sender");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserOffsiteAddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_offsite_address");

            entity.HasIndex(e => e.AddressId, "address_id");

            entity.HasIndex(e => new { e.UserId, e.Type }, "user_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .HasDefaultValueSql("''")
                .HasColumnName("state");
            entity.Property(e => e.StreetAddress)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("street_address");
            entity.Property(e => e.StreetAddress2)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("street_address2");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Zip)
                .HasMaxLength(9)
                .HasDefaultValueSql("''")
                .HasColumnName("zip");

            entity.HasOne(d => d.Address).WithMany(p => p.UserOffsiteAddresses)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_offsite_address_id");
        });

        modelBuilder.Entity<UserPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_package")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.AddedBy, "added_by");

            entity.HasIndex(e => e.ComponentId, "component_id");

            entity.HasIndex(e => e.ExpirationDate, "expiration_date");

            entity.HasIndex(e => e.Name, "name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.HasIndex(e => e.PackageId, "package_id");

            entity.HasIndex(e => e.SoldBy, "sold_by");

            entity.HasIndex(e => e.StaffId, "staff_id");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccGroupId).HasColumnName("acc_group_id");
            entity.Property(e => e.ActivatedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("activated_date");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.AddedDate).HasColumnName("added_date");
            entity.Property(e => e.AddedTime)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("added_time");
            entity.Property(e => e.AnyStaff).HasColumnName("any_staff");
            entity.Property(e => e.AutoRenew).HasColumnName("auto_renew");
            entity.Property(e => e.AutoRenewComplete).HasColumnName("auto_renew_complete");
            entity.Property(e => e.AutoRenewCount).HasColumnName("auto_renew_count");
            entity.Property(e => e.AutoRenewParentPackageId).HasColumnName("auto_renew_parent_package_id");
            entity.Property(e => e.AutoRenewPrice)
                .HasPrecision(8, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("auto_renew_price");
            entity.Property(e => e.AutoRenewType)
                .HasColumnType("enum('expiration_and_usage','expiration_only','usage_only')")
                .HasColumnName("auto_renew_type");
            entity.Property(e => e.AutoRenewUnlimited).HasColumnName("auto_renew_unlimited");
            entity.Property(e => e.CanExpire).HasColumnName("can_expire");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ContractTermsId).HasColumnName("contract_terms_id");
            entity.Property(e => e.Count)
                .HasPrecision(8, 3)
                .HasColumnName("count");
            entity.Property(e => e.CountInitial)
                .HasPrecision(8, 3)
                .HasColumnName("count_initial");
            entity.Property(e => e.DayOfWeek)
                .IsRequired()
                .HasDefaultValueSql("'-1'")
                .HasColumnName("day_of_week");
            entity.Property(e => e.DefaultShareSetting)
                .HasComment("1 - yes, 0 - no")
                .HasColumnName("default_share_setting");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
            entity.Property(e => e.ExpirationDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("expiration_date");
            entity.Property(e => e.ExpirationDurationCount).HasColumnName("expiration_duration_count");
            entity.Property(e => e.ExpirationDurationType)
                .HasColumnType("enum('days','weeks','months')")
                .HasColumnName("expiration_duration_type");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LessonType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("lesson_type");
            entity.Property(e => e.MaximumUses).HasColumnName("maximum_uses");
            entity.Property(e => e.MaximumUsesPeriod)
                .HasDefaultValueSql("'week'")
                .HasColumnType("enum('week','month')")
                .HasColumnName("maximum_uses_period");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.NotificationExpired).HasColumnName("notification_expired");
            entity.Property(e => e.NotificationRenewal).HasColumnName("notification_renewal");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.PaymentStatus)
                .HasDefaultValueSql("'unpaid'")
                .HasColumnType("enum('unpaid','paid')")
                .HasColumnName("payment_status");
            entity.Property(e => e.PlayerOnCourt)
                .HasDefaultValueSql("'1'")
                .HasColumnName("player_on_court");
            entity.Property(e => e.Price)
                .HasPrecision(8, 2)
                .HasColumnName("price");
            entity.Property(e => e.PriceInitial)
                .HasPrecision(8, 2)
                .HasColumnName("price_initial");
            entity.Property(e => e.PricePerSession)
                .HasPrecision(8, 2)
                .HasColumnName("price_per_session");
            entity.Property(e => e.PriceType)
                .HasMaxLength(255)
                .HasDefaultValueSql("'60'")
                .HasColumnName("price_type");
            entity.Property(e => e.PrimaryActivityId).HasColumnName("primary_activity_id");
            entity.Property(e => e.RateId)
                .HasDefaultValueSql("'0'")
                .HasColumnName("rate_id");
            entity.Property(e => e.RecognizedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("recognized_date");
            entity.Property(e => e.ReminderExpirationSend).HasColumnName("reminder_expiration_send");
            entity.Property(e => e.SendReminderDays).HasColumnName("send_reminder_days");
            entity.Property(e => e.SessionCarryOverEnabled).HasColumnName("session_carry_over_enabled");
            entity.Property(e => e.SoldBy).HasColumnName("sold_by");
            entity.Property(e => e.SpecificStaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("specific_staff_level");
            entity.Property(e => e.SpecificStaffList)
                .HasColumnType("text")
                .HasColumnName("specific_staff_list");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'1'")
                .HasColumnName("type");
            entity.Property(e => e.UsedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("used_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserPackageAdjustmentLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_package_adjustment_log")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserPackageId, "userPackageId");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdjustmentChargeId)
                .HasComment("adjustment charge for past payments")
                .HasColumnName("adjustment_charge_id");
            entity.Property(e => e.AdjustmentCreditId)
                .HasComment("adjustment credit for past payments")
                .HasColumnName("adjustment_credit_id");
            entity.Property(e => e.CurrentPricePerSession)
                .HasPrecision(8, 2)
                .HasColumnName("current_price_per_session");
            entity.Property(e => e.ExpectedPricePerSession)
                .HasPrecision(8, 2)
                .HasColumnName("expected_price_per_session");
            entity.Property(e => e.InitialPrice)
                .HasPrecision(8, 2)
                .HasColumnName("initial_price");
            entity.Property(e => e.InitialSessions)
                .HasPrecision(7, 2)
                .HasColumnName("initial_sessions");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.RemainingPrice)
                .HasPrecision(8, 2)
                .HasColumnName("remaining_price");
            entity.Property(e => e.RemainingSessions)
                .HasPrecision(7, 2)
                .HasColumnName("remaining_sessions");
            entity.Property(e => e.UserPackageId).HasColumnName("user_package_id");
        });

        modelBuilder.Entity<UserPackageDuration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_package_duration")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Duration)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("duration");
            entity.Property(e => e.UserPackageId).HasColumnName("user_package_id");
        });

        modelBuilder.Entity<UserPackageEntity>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.PackageId, e.EntityId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity
                .ToTable("user_package_entity")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.EntityId).HasColumnName("entity_id");
        });

        modelBuilder.Entity<UserPackageEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_package_event")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.EventId, "event_id");

            entity.HasIndex(e => e.UpackageId, "upackage_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.UpackageId).HasColumnName("upackage_id");
        });

        modelBuilder.Entity<UserPackageLessonType>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.PackageId, e.LessonType, e.ComponentId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity
                .ToTable("user_package_lesson_type")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.LessonType).HasColumnName("lesson_type");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
        });

        modelBuilder.Entity<UserPackageLocation>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.PackageId, e.LocationId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity
                .ToTable("user_package_location")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
        });

        modelBuilder.Entity<UserPackagePlayersCount>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.PackageId, e.Players })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

            entity
                .ToTable("user_package_players_count")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.Players).HasColumnName("players");
        });

        modelBuilder.Entity<UserPackageSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_package_source")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserPackageId, "userPackageId");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Source).HasColumnName("source");
            entity.Property(e => e.UserPackageId).HasColumnName("user_package_id");
        });

        modelBuilder.Entity<UserPackageUsage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_package_usage")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.ChargeId, "chargeId");

            entity.HasIndex(e => e.EventId, "eventId");

            entity.HasIndex(e => e.ModifiedDate, "modifiedDate");

            entity.HasIndex(e => e.Operation, "operation");

            entity.HasIndex(e => e.OperationType, "operationType");

            entity.HasIndex(e => e.PaymentId, "paymentId");

            entity.HasIndex(e => e.ScheduleId, "scheduleId");

            entity.HasIndex(e => e.UserPackageId, "userPackageId");

            entity.HasIndex(e => e.WasMigrated, "wasMigrated");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChargeId)
                .HasComment("related charge")
                .HasColumnName("charge_id");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("description of operation")
                .HasColumnName("description");
            entity.Property(e => e.EventId)
                .HasComment("related event")
                .HasColumnName("event_id");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.NumberOfSessions)
                .HasPrecision(7, 2)
                .HasComment("number of used sessions")
                .HasColumnName("number_of_sessions");
            entity.Property(e => e.Operation)
                .HasMaxLength(50)
                .HasColumnName("operation");
            entity.Property(e => e.OperationType)
                .HasColumnType("enum('extract','return')")
                .HasColumnName("operation_type");
            entity.Property(e => e.PaymentId)
                .HasComment("related payment")
                .HasColumnName("payment_id");
            entity.Property(e => e.RefundReceiptId)
                .HasComment("related refund receipt")
                .HasColumnName("refund_receipt_id");
            entity.Property(e => e.ScheduleId)
                .HasComment("related schedule")
                .HasColumnName("schedule_id");
            entity.Property(e => e.UserPackageId).HasColumnName("user_package_id");
            entity.Property(e => e.UserPackageStatus)
                .HasDefaultValueSql("'1'")
                .HasColumnName("user_package_status");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
            entity.Property(e => e.WasMigrated)
                .HasComment("it is true if user package usage was migrated from the old logic")
                .HasColumnName("was_migrated");
        });

        modelBuilder.Entity<UserPasswordsHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_passwords_history")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_pasword_history_user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserQueueGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("user_queue_group");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.GroupIdOld, "group_id_old");

            entity.HasIndex(e => e.NextBillDate, "next_bill_date");

            entity.HasIndex(e => e.ParentId, "parent_id");

            entity.HasIndex(e => e.Status, "status");

            entity.HasIndex(e => e.UgStatus, "ug_status");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.ActivateOn)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("activate_on");
            entity.Property(e => e.ActivatedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("activated_date");
            entity.Property(e => e.AddedBy).HasColumnName("added_by");
            entity.Property(e => e.BillTo).HasColumnName("bill_to");
            entity.Property(e => e.BillToPercent)
                .HasPrecision(9, 2)
                .HasColumnName("bill_to_percent");
            entity.Property(e => e.BillToType)
                .HasMaxLength(5)
                .HasDefaultValueSql("'%'")
                .HasColumnName("bill_to_type");
            entity.Property(e => e.CancelOn)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("cancel_on");
            entity.Property(e => e.CanceledDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("canceled_date");
            entity.Property(e => e.CanceledReason)
                .HasMaxLength(255)
                .HasColumnName("canceled_reason");
            entity.Property(e => e.CreditAmount)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("credit_amount");
            entity.Property(e => e.DiscountAsStatement).HasColumnName("discount_as_statement");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.ExpiredDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("expired_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GroupIdOld).HasColumnName("group_id_old");
            entity.Property(e => e.HoldFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("hold_from");
            entity.Property(e => e.HoldTo)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("hold_to");
            entity.Property(e => e.HoldType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("hold_type");
            entity.Property(e => e.HoldValue)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("hold_value");
            entity.Property(e => e.HoldedDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("holded_date");
            entity.Property(e => e.HowAdded).HasColumnName("how_added");
            entity.Property(e => e.InactivateOn).HasColumnName("inactivate_on");
            entity.Property(e => e.IsHolded).HasColumnName("is_holded");
            entity.Property(e => e.IsSecondary).HasColumnName("is_secondary");
            entity.Property(e => e.JoinDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("join_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MapRevenueTo).HasColumnName("map_revenue_to");
            entity.Property(e => e.MembershipDiscount)
                .HasPrecision(9, 2)
                .HasColumnName("membership_discount");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.MonthlyActivateOn)
                .HasDefaultValueSql("'1'")
                .HasColumnName("monthly_activate_on");
            entity.Property(e => e.MonthlyBillingType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("monthly_billing_type");
            entity.Property(e => e.MonthlyProrateFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("monthly_prorate_from");
            entity.Property(e => e.MonthlyStartBillingFrom)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("monthly_start_billing_from");
            entity.Property(e => e.NextBillDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("next_bill_date");
            entity.Property(e => e.OverrideEnrollmentFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("override_enrollment_fee");
            entity.Property(e => e.OverrideFee)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("override_fee");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ReferedBy).HasColumnName("refered_by");
            entity.Property(e => e.ReferedByType)
                .HasMaxLength(5)
                .HasDefaultValueSql("'%'")
                .HasColumnName("refered_by_type");
            entity.Property(e => e.ReferedByValue)
                .HasPrecision(9, 2)
                .HasColumnName("refered_by_value");
            entity.Property(e => e.SoldAt).HasColumnName("sold_at");
            entity.Property(e => e.StartBillingDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("start_billing_date");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'Queued'")
                .HasColumnType("enum('Queued','Failed')")
                .HasColumnName("status");
            entity.Property(e => e.StopBillingDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("stop_billing_date");
            entity.Property(e => e.TotalEnrollmentFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("total_enrollment_fee");
            entity.Property(e => e.TotalMembershipFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("total_membership_fee");
            entity.Property(e => e.UgStatus)
                .HasDefaultValueSql("'Active'")
                .HasColumnType("enum('Active','Inactive','Suspended','Canceled','Expired','Holded','On Hold','Online Review','Pending')")
                .HasColumnName("ug_status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserQueueGroupAdditionalCharge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_queue_group_additional_charge")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => new { e.UserId, e.GroupId, e.GroupIdOld }, "user_id_group_id_group_id_old");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdditionalChargeId).HasColumnName("additional_charge_id");
            entity.Property(e => e.Fee)
                .HasPrecision(18, 2)
                .HasColumnName("fee");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GroupIdOld).HasColumnName("group_id_old");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserQueueGroupFee>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.GroupId, e.GroupIdOld, e.ChildId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.ToTable("user_queue_group_fees");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GroupIdOld).HasColumnName("group_id_old");
            entity.Property(e => e.ChildId).HasColumnName("child_id");
            entity.Property(e => e.EnrollmentFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.MembershipFee)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'-1.00'")
                .HasColumnName("membership_fee");
            entity.Property(e => e.Order).HasColumnName("order");
        });

        modelBuilder.Entity<UserQueueGroupSale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_queue_group_sales");

            entity.HasIndex(e => e.GroupId, "group_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddedDate).HasColumnName("added_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GroupIdOld).HasColumnName("group_id_old");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.Removed).HasColumnName("removed");
            entity.Property(e => e.RemovedDate).HasColumnName("removed_date");
            entity.Property(e => e.SalesId).HasColumnName("sales_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserRetailer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_retailer")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.MerchantRetailerId, "merchant_retailer_id");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CustomerToken)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("customer_token");
            entity.Property(e => e.MerchantRetailerId).HasColumnName("merchant_retailer_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_setting");

            entity.HasIndex(e => e.IntValue, "int_value");

            entity.HasIndex(e => e.Name, "name").HasAnnotation("MySql:IndexPrefixLength", new[] { 20 });

            entity.HasIndex(e => e.StringValue, "string_value");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArrayValue)
                .HasColumnType("mediumtext")
                .HasColumnName("array_value");
            entity.Property(e => e.FloatValue).HasColumnName("float_value");
            entity.Property(e => e.IntValue).HasColumnName("int_value");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasDefaultValueSql("''")
                .HasColumnName("name");
            entity.Property(e => e.StringValue)
                .HasDefaultValueSql("''")
                .HasColumnName("string_value");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserStatementAgingBalance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_statement_aging_balance")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AgingBalance)
                .HasPrecision(12, 2)
                .HasColumnName("aging_balance");
            entity.Property(e => e.AgingDays).HasColumnName("aging_days");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .ValueGeneratedOnAddOrUpdate()
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.NeedUpdate)
                .HasDefaultValueSql("'0'")
                .HasColumnName("need_update");
            entity.Property(e => e.StatementBalance)
                .HasPrecision(12, 2)
                .HasColumnName("statement_balance");
            entity.Property(e => e.TotalBalance)
                .HasPrecision(12, 2)
                .HasColumnName("total_balance");
            entity.Property(e => e.UnusedCredits)
                .HasPrecision(12, 2)
                .HasColumnName("unused_credits");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<UserStatementPastDue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("user_statement_past_due")
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci");

            entity.HasIndex(e => e.NeedUpdate, "need_update");

            entity.HasIndex(e => e.UserId, "user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Current)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("current");
            entity.Property(e => e.D120)
                .HasPrecision(12, 2)
                .HasColumnName("d120");
            entity.Property(e => e.D30)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("d30");
            entity.Property(e => e.D60)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("d60");
            entity.Property(e => e.D90)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("d90");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.NeedUpdate)
                .HasDefaultValueSql("'0'")
                .HasColumnName("need_update");
            entity.Property(e => e.StatementBalance)
                .HasPrecision(12, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("statement_balance");
            entity.Property(e => e.UnusedCredits)
                .HasPrecision(12, 2)
                .HasColumnName("unused_credits");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<VolleyballStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("volleyball_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<VwGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_group");

            entity.Property(e => e.AddonType)
                .HasDefaultValueSql("'Custom'")
                .HasColumnType("enum('Custom','Discount Program','Resource')")
                .HasColumnName("addon_type");
            entity.Property(e => e.AllowFeeProration)
                .HasDefaultValueSql("'1'")
                .HasColumnName("allow_fee_proration");
            entity.Property(e => e.AnnualMaintenanceFee).HasColumnName("annual_maintenance_fee");
            entity.Property(e => e.AutoCancel).HasColumnName("auto_cancel");
            entity.Property(e => e.AutoEnroll).HasColumnName("auto_enroll");
            entity.Property(e => e.AutoRenew).HasColumnName("auto_renew");
            entity.Property(e => e.AutomaticApproval).HasColumnName("automatic_approval");
            entity.Property(e => e.AvailableForSale).HasColumnName("available_for_sale");
            entity.Property(e => e.AvailableOnStaffSchedule).HasColumnName("available_on_staff_schedule");
            entity.Property(e => e.BillGuestFee).HasColumnName("bill_guest_fee");
            entity.Property(e => e.BillingDay).HasColumnName("billing_day");
            entity.Property(e => e.BillingType)
                .HasDefaultValueSql("'recurring'")
                .HasColumnType("enum('recurring','pif')")
                .HasColumnName("billing_type");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.ContractAgreementTerm)
                .HasDefaultValueSql("'12'")
                .HasColumnName("contract_agreement_term");
            entity.Property(e => e.ContractEnabled).HasColumnName("contract_enabled");
            entity.Property(e => e.ContractLockRate).HasColumnName("contract_lock_rate");
            entity.Property(e => e.ContractRenewalOption)
                .HasDefaultValueSql("'1'")
                .HasColumnName("contract_renewal_option");
            entity.Property(e => e.ContractRenewalTerm).HasColumnName("contract_renewal_term");
            entity.Property(e => e.ContractTermsId).HasColumnName("contract_terms_id");
            entity.Property(e => e.CustomPeriod).HasColumnName("custom_period");
            entity.Property(e => e.CycleDuration)
                .HasDefaultValueSql("'1'")
                .HasColumnName("cycle_duration");
            entity.Property(e => e.CycleType)
                .HasColumnType("enum('day','week','month')")
                .HasColumnName("cycle_type");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DisplayOnProfile)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("display_on_profile");
            entity.Property(e => e.DisplayOnSignin).HasColumnName("display_on_signin");
            entity.Property(e => e.DurationType)
                .HasDefaultValueSql("'month'")
                .HasColumnType("enum('month','week','day')")
                .HasColumnName("duration_type");
            entity.Property(e => e.DurationValue).HasColumnName("duration_value");
            entity.Property(e => e.EndDate)
                .HasMaxLength(5)
                .HasDefaultValueSql("'00-00'")
                .IsFixedLength()
                .HasColumnName("end_date");
            entity.Property(e => e.EnrollmentFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("enrollment_fee");
            entity.Property(e => e.FamilyType)
                .HasColumnType("enum('individual','individual_dependents','couple','family')")
                .HasColumnName("family_type");
            entity.Property(e => e.GroupType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("group_type");
            entity.Property(e => e.HasAdditionalCharges).HasColumnName("has_additional_charges");
            entity.Property(e => e.HoldType)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("hold_type");
            entity.Property(e => e.HoldValue)
                .HasColumnType("float(9,2)")
                .HasColumnName("hold_value");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsFamily).HasColumnName("is_family");
            entity.Property(e => e.IsOnlineRegistration).HasColumnName("is_online_registration");
            entity.Property(e => e.IsResource).HasColumnName("is_resource");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.MaxDependents)
                .HasDefaultValueSql("'-1'")
                .HasColumnName("max_dependents");
            entity.Property(e => e.MemberFee)
                .HasColumnType("float(18,2)")
                .HasColumnName("member_fee");
            entity.Property(e => e.MemberFeeType)
                .HasDefaultValueSql("'monthly'")
                .HasColumnType("enum('monthly','custom','annual','cmonthly','trial')")
                .HasColumnName("member_fee_type");
            entity.Property(e => e.MembershipTypeId).HasColumnName("membership_type_id");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.NoGuestFee)
                .HasDefaultValueSql("'0'")
                .HasColumnName("no_guest_fee");
            entity.Property(e => e.NoGuestFeeChild)
                .HasDefaultValueSql("'0'")
                .HasColumnName("no_guest_fee_child");
            entity.Property(e => e.OnlineDescription)
                .HasColumnType("mediumtext")
                .HasColumnName("online_description");
            entity.Property(e => e.OnlineMembershipProration).HasColumnName("online_membership_proration");
            entity.Property(e => e.PAmount)
                .HasColumnType("float(18,2)")
                .HasColumnName("p_amount");
            entity.Property(e => e.PBillingDateDay)
                .HasDefaultValueSql("'1'")
                .HasColumnName("p_billing_date_day");
            entity.Property(e => e.PBillingDateMonth)
                .HasDefaultValueSql("'1'")
                .HasColumnName("p_billing_date_month");
            entity.Property(e => e.PBillingMonth).HasColumnName("p_billing_month");
            entity.Property(e => e.PBillingType)
                .HasDefaultValueSql("'month'")
                .HasColumnType("enum('date','month')")
                .HasColumnName("p_billing_type");
            entity.Property(e => e.PDescription)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("p_description");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PayNow).HasColumnName("pay_now");
            entity.Property(e => e.PaymentRequired).HasColumnName("payment_required");
            entity.Property(e => e.PosAvailable).HasColumnName("pos_available");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProrateLastMonth).HasColumnName("prorate_last_month");
            entity.Property(e => e.RenewBefore).HasColumnName("renew_before");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(255)
                .HasColumnName("resource_name");
            entity.Property(e => e.RevenueMapping)
                .HasDefaultValueSql("'by_home_club'")
                .HasColumnType("enum('by_home_club','by_location_of_sale')")
                .HasColumnName("revenue_mapping");
            entity.Property(e => e.SalesEndDate).HasColumnName("sales_end_date");
            entity.Property(e => e.SalesStartDate).HasColumnName("sales_start_date");
            entity.Property(e => e.ScheduleShow).HasColumnName("schedule_show");
            entity.Property(e => e.ShowOnCheckin).HasColumnName("show_on_checkin");
            entity.Property(e => e.ShowOnMembership).HasColumnName("show_on_membership");
            entity.Property(e => e.ShowOnProspect).HasColumnName("show_on_prospect");
            entity.Property(e => e.StartDate)
                .HasMaxLength(5)
                .HasDefaultValueSql("'00-00'")
                .IsFixedLength()
                .HasColumnName("start_date");
            entity.Property(e => e.StatementDescription)
                .HasMaxLength(255)
                .HasColumnName("statement_description");
            entity.Property(e => e.SysName)
                .HasMaxLength(255)
                .HasDefaultValueSql("''")
                .HasColumnName("sys_name");
            entity.Property(e => e.System).HasColumnName("system");
            entity.Property(e => e.SystemType)
                .HasDefaultValueSql("'base'")
                .HasColumnType("enum('base','non_member','member','staff','front_desc','admin','global_admin','guest','addon','manager','time_clock','check_in','prospect','external_pos','membership_sales','api_staff')")
                .HasColumnName("system_type");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("'system'")
                .HasColumnType("enum('system','membership','addon','guest','staff','prospect')")
                .HasColumnName("type");
            entity.Property(e => e.UseNonmemberFee).HasColumnName("use_nonmember_fee");
            entity.Property(e => e.UseSaleSpecificDate).HasColumnName("use_sale_specific_date");
            entity.Property(e => e.UtcTimestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("utc_timestamp");
        });

        modelBuilder.Entity<VwUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_user");

            entity.Property(e => e.AccountNum)
                .HasMaxLength(255)
                .HasColumnName("account_num");
            entity.Property(e => e.Activated).HasColumnName("activated");
            entity.Property(e => e.AdditionalEmails)
                .HasColumnType("text")
                .HasColumnName("additional_emails");
            entity.Property(e => e.Age)
                .HasPrecision(6, 2)
                .HasColumnName("age");
            entity.Property(e => e.Balance)
                .HasColumnType("float(18,2)")
                .HasColumnName("balance");
            entity.Property(e => e.BalanceTill)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("balance_till");
            entity.Property(e => e.BirthDate).HasColumnName("birth_date");
            entity.Property(e => e.Cancelled)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("cancelled");
            entity.Property(e => e.CancelledReason)
                .HasMaxLength(255)
                .HasColumnName("cancelled_reason");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.Confidence)
                .IsRequired()
                .HasDefaultValueSql("'3'")
                .HasColumnName("confidence");
            entity.Property(e => e.ConfirmedRso).HasColumnName("confirmed_rso");
            entity.Property(e => e.ContractNum)
                .HasMaxLength(255)
                .HasColumnName("contract_num");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("country");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .HasDefaultValueSql("'US'")
                .HasColumnName("country_code");
            entity.Property(e => e.CreditLimit).HasColumnName("credit_limit");
            entity.Property(e => e.DcsAddrStatus)
                .HasComment("if 1 address updated by dcs elseif 2 address acknowledge by staff elseif 3 exclude address update by dcs")
                .HasColumnName("dcs_addr_status");
            entity.Property(e => e.DeliveryMethod)
                .HasDefaultValueSql("'none'")
                .HasColumnType("enum('none','email','mail')")
                .HasColumnName("delivery_method");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(250)
                .HasColumnName("drivers_license");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(10)
                .HasColumnName("drivers_license_state");
            entity.Property(e => e.ELogin)
                .HasMaxLength(100)
                .HasColumnName("e_login");
            entity.Property(e => e.EPass)
                .HasMaxLength(250)
                .HasColumnName("e_pass");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .HasColumnName("email");
            entity.Property(e => e.EmailNotConfirmed).HasColumnName("email_not_confirmed");
            entity.Property(e => e.EntityId)
                .HasComment("home club")
                .HasColumnName("entity_id");
            entity.Property(e => e.Expired).HasColumnName("expired");
            entity.Property(e => e.FamilyAddrType).HasColumnName("family_addr_type");
            entity.Property(e => e.Filename)
                .HasMaxLength(100)
                .HasColumnName("filename");
            entity.Property(e => e.FirstName)
                .HasMaxLength(255)
                .HasColumnName("first_name");
            entity.Property(e => e.GuestVisits).HasColumnName("guest_visits");
            entity.Property(e => e.HouseCharge)
                .HasDefaultValueSql("'no'")
                .HasColumnType("enum('no','credit card','bank account','mail bill','trade')")
                .HasColumnName("house_charge");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ImportId)
                .HasMaxLength(100)
                .HasColumnName("import_id");
            entity.Property(e => e.IsGlobal).HasColumnName("is_global");
            entity.Property(e => e.IsSystem).HasColumnName("is_system");
            entity.Property(e => e.Joined).HasColumnName("joined");
            entity.Property(e => e.LastName)
                .HasMaxLength(255)
                .HasColumnName("last_name");
            entity.Property(e => e.LastStatementDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("last_statement_date");
            entity.Property(e => e.LastTrack)
                .HasColumnType("mediumtext")
                .HasColumnName("last_track");
            entity.Property(e => e.LastUpdatePasswordDate).HasColumnName("last_update_password_date");
            entity.Property(e => e.LastVisitDate).HasColumnName("last_visit_date");
            entity.Property(e => e.LateFeeExempt)
                .HasDefaultValueSql("'2'")
                .HasColumnName("late_fee_exempt");
            entity.Property(e => e.Login)
                .HasMaxLength(200)
                .HasColumnName("login");
            entity.Property(e => e.MembershipType).HasColumnName("membership_type");
            entity.Property(e => e.MenuCollapsed).HasColumnName("menu_collapsed");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(255)
                .HasColumnName("middle_name");
            entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");
            entity.Property(e => e.ModifiedByIntranet).HasColumnName("modified_by_intranet");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("modified_date");
            entity.Property(e => e.Nonmember).HasColumnName("nonmember");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.PosHouseCharge).HasColumnName("pos_house_charge");
            entity.Property(e => e.PosId).HasColumnName("pos_id");
            entity.Property(e => e.PrimaryId).HasColumnName("primary_id");
            entity.Property(e => e.RealDriversLicense)
                .HasMaxLength(255)
                .HasColumnName("real_drivers_license")
                .UseCollation("utf8_general_ci")
                .HasCharSet("utf8");
            entity.Property(e => e.ReferralSource)
                .HasMaxLength(256)
                .HasColumnName("referral_source");
            entity.Property(e => e.ReferringMemberId).HasColumnName("referring_member_id");
            entity.Property(e => e.RegisterDate).HasColumnName("register_date");
            entity.Property(e => e.Rep).HasColumnName("rep");
            entity.Property(e => e.RewardPoints)
                .HasPrecision(18, 2)
                .HasColumnName("reward_points");
            entity.Property(e => e.Role)
                .HasDefaultValueSql("'Guest'")
                .HasComment("If user is both staff and member, we set role to Staff, Guest is when he is neither Staff or Member.")
                .HasColumnType("enum('Staff','Guest','Member','Corporate')")
                .HasColumnName("role");
            entity.Property(e => e.Salutation)
                .HasMaxLength(10)
                .HasDefaultValueSql("'Mr'")
                .HasColumnName("salutation");
            entity.Property(e => e.SendMail)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("send_mail");
            entity.Property(e => e.Sex)
                .HasDefaultValueSql("'0'")
                .HasColumnName("sex");
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .HasColumnName("state");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'No membership'")
                .HasColumnType("enum('Active','Inactive','Suspended','Canceled','Removed','Expired','Holded','On Hold','No membership','Online Review','Joined','Non-member','Staff','Corporate Account')")
                .HasColumnName("status");
            entity.Property(e => e.StreetAddress)
                .HasMaxLength(255)
                .HasColumnName("street_address");
            entity.Property(e => e.StreetAddress2)
                .HasMaxLength(255)
                .HasColumnName("street_address2");
            entity.Property(e => e.TaxExempt).HasColumnName("tax_exempt");
            entity.Property(e => e.Trade)
                .HasDefaultValueSql("'2'")
                .HasColumnName("trade");
            entity.Property(e => e.UnsubscribeCode)
                .HasMaxLength(10)
                .HasDefaultValueSql("''")
                .HasColumnName("unsubscribe_code");
            entity.Property(e => e.Viewed).HasColumnName("viewed");
            entity.Property(e => e.Zip)
                .HasMaxLength(16)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<WellnessStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wellness_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<YogaStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("yoga_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<YogabyroomStaffField>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("yogabyroom_staff_fields");

            entity.HasIndex(e => e.UserId, "user_id").IsUnique();

            entity.Property(e => e.CalculateCourtFeeAs)
                .HasDefaultValueSql("'$'")
                .HasColumnType("enum('$','%')")
                .HasColumnName("calculate_court_fee_as");
            entity.Property(e => e.CourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("court_fee_arr");
            entity.Property(e => e.DirectorComBaseRate)
                .HasColumnType("float(18,2)")
                .HasColumnName("director_com_base_rate");
            entity.Property(e => e.DirectorComBaseSummerRate)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_com_base_summer_rate");
            entity.Property(e => e.DirectorFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("director_fee");
            entity.Property(e => e.DirectorSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("director_summer_fee");
            entity.Property(e => e.GroupEventFees)
                .HasColumnType("mediumtext")
                .HasColumnName("group_event_fees");
            entity.Property(e => e.GroupLessonFee)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_fee");
            entity.Property(e => e.GroupLessonPercent)
                .HasColumnType("float(9,3)")
                .HasColumnName("group_lesson_percent");
            entity.Property(e => e.GroupLessonSummerFee)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_fee");
            entity.Property(e => e.GroupLessonSummerPercent)
                .HasColumnType("float(9,2)")
                .HasColumnName("group_lesson_summer_percent");
            entity.Property(e => e.PackageDiscountType)
                .HasDefaultValueSql("'1'")
                .HasColumnName("package_discount_type");
            entity.Property(e => e.PackageLessonPriceData)
                .HasColumnType("mediumtext")
                .HasColumnName("package_lesson_price_data");
            entity.Property(e => e.PayrollType)
                .HasColumnType("mediumtext")
                .HasColumnName("payroll_type");
            entity.Property(e => e.PlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_percentages");
            entity.Property(e => e.PlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("plesson_rates");
            entity.Property(e => e.StaffLevel)
                .HasMaxLength(32)
                .HasDefaultValueSql("''")
                .HasColumnName("staff_level");
            entity.Property(e => e.SummerCourtFeeArr)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_court_fee_arr");
            entity.Property(e => e.SummerPlessonPercentages)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_percentages");
            entity.Property(e => e.SummerPlessonRates)
                .HasColumnType("mediumtext")
                .HasColumnName("summer_plesson_rates");
            entity.Property(e => e.UseDefaultRates).HasColumnName("use_default_rates");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
